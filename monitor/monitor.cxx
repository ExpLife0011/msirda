/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: Visual C++
*/

#include <windows.h>
#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int __stdcall WPP_SF_(int a1, int a2, int a3, int a4);
int __stdcall WPP_SF_d(int a1, int a2, int a3, int a4, int a5);
int __stdcall AcpiNotifyCallback(int a1, int a2);
int __stdcall AcpiRegisterForNotification(int a1);
POWER_SETTING_CALLBACK BrightnessCallback; // idb
int __stdcall BrightnessTimer(int a1);
int __stdcall EvtDeviceSelfManagedIoRestart(int a1);
int __stdcall WPP_INIT_CONTROL_ARRAY(int a1);
signed int __cdecl W2kTraceMessage(int a1, int a2, int a3, int a4, char a5, void *a6);
int __stdcall WppClassicProviderCallback(int a1, char a2, int a3, int a4);
NTSTATUS __stdcall EtwShutdown();
NTSTATUS __stdcall EtwTraceVersion(int a1, int a2, char a3);
NTSTATUS __stdcall EtwTraceAcpiEvent(int a1);
int __stdcall EtwWmiCallback(int, int, size_t, void *, int, int); // idb
NTSTATUS __stdcall EtwInit();
int __stdcall WPP_SF_dd(int a1, int a2, int a3, int a4, int a5, char a6);
int __stdcall WPP_SF_qqd(int a1, int a2, int a3, int a4, int a5, char a6, char a7);
// int __userpurge ForwardRequestToNextDriver@<eax>(int a1@<esi>, int a2, int a3);
bool __stdcall SupportedInternalIoctl(int a1, int a2);
// int __stdcall NoDataInstanceQueryHandler(int, int, int, int); weak
int __stdcall WmiRegisterMethod(int a1, int a2, int a3, int a4);
NTSTATUS __stdcall WmiCallPhysicalDevice(int a1, ULONG IoControlCode, ULONG InputBufferLength, PVOID InputBuffer, ULONG OutputBufferLength, PVOID OutputBuffer, int a7);
int __stdcall MonitorAlpcInit(int a1);
int __stdcall MonitorAlpcSendPoMessage(int a1, int a2, int a3);
// void *__cdecl memset(void *, int, size_t);
// void *__cdecl memcpy(void *, const void *, size_t);
void __stdcall FxStubDriverUnloadCommon(); // idb
void __stdcall FxStubDriverUnload(int a1);
void __stdcall FxStubDriverMiniportUnload(int a1, int a2);
NTSTATUS __stdcall FxDriverEntryWorker(int DriverObject, PCUNICODE_STRING SourceString);
int __stdcall FxStubBindClasses(struct _WDF_BIND_INFO *a1);
void __stdcall FxStubUnbindClasses(struct _WDF_BIND_INFO *); // idb
void __stdcall FxStubInitTypes(); // idb
// int __stdcall WdfVersionUnbind(_DWORD, _DWORD, _DWORD); weak
// int __stdcall WdfVersionBind(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall WdfVersionBindClass(_DWORD, _DWORD, _DWORD); weak
// int __stdcall WdfVersionUnbindClass(_DWORD, _DWORD, _DWORD); weak
// NTSTATUS PoRegisterPowerSettingCallback(PDEVICE_OBJECT DeviceObject, LPCGUID SettingGuid, PPOWER_SETTING_CALLBACK Callback, PVOID Context, PVOID *Handle);
// NTSTATUS __stdcall ZwClose(HANDLE Handle);
// NTSTATUS __stdcall IoDeleteSymbolicLink(PUNICODE_STRING SymbolicLinkName);
// NTSTATUS __stdcall RtlQueryRegistryValues(ULONG RelativeTo, PCWSTR Path, PRTL_QUERY_REGISTRY_TABLE QueryTable, PVOID Context, PVOID Environment);
// NTSTATUS __stdcall ZwCreateKey(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);
// void __stdcall RtlInitUnicodeString(PUNICODE_STRING DestinationString, PCWSTR SourceString);
// NTSTATUS __stdcall IoCreateSymbolicLink(PUNICODE_STRING SymbolicLinkName, PUNICODE_STRING DeviceName);
// NTSTATUS __stdcall IoGetDeviceProperty(PDEVICE_OBJECT DeviceObject, DEVICE_REGISTRY_PROPERTY DeviceProperty, ULONG BufferLength, PVOID PropertyBuffer, PULONG ResultLength);
// NTSTATUS __stdcall ZwPowerInformation(POWER_INFORMATION_LEVEL PowerInformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);
// NTSTATUS __stdcall IoWMIWriteEvent(PVOID WnodeEventItem);
// PVOID __stdcall MmGetSystemRoutineAddress(PUNICODE_STRING SystemRoutineName);
// NTSTATUS __stdcall IoWMIRegistrationControl(PDEVICE_OBJECT DeviceObject, ULONG Action);
// NTSTATUS __fastcall IofCallDriver(PDEVICE_OBJECT DeviceObject, PIRP Irp);
// NTSTATUS __stdcall KeWaitForSingleObject(PVOID Object, KWAIT_REASON WaitReason, KPROCESSOR_MODE WaitMode, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
// PIRP __stdcall IoBuildDeviceIoControlRequest(ULONG IoControlCode, PDEVICE_OBJECT DeviceObject, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, BOOLEAN InternalDeviceIoControl, PKEVENT Event, PIO_STATUS_BLOCK IoStatusBlock);
// void __stdcall KeInitializeEvent(PRKEVENT Event, EVENT_TYPE Type, BOOLEAN State);
// void __stdcall ExRaiseStatus(NTSTATUS Status);
// int __stdcall ZwAlpcConnectPort(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall ZwAlpcSendWaitReceivePort(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// PKTHREAD __stdcall KeGetCurrentThread();
// NTSTATUS PoUnregisterPowerSettingCallback(PVOID Handle);
// void __stdcall RtlCopyUnicodeString(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString);
// void *__cdecl _memmove(void *, const void *, size_t);
// void __stdcall PoSetSystemState(EXECUTION_STATE Flags);
// PVOID __stdcall ExAllocatePoolWithTag(POOL_TYPE PoolType, SIZE_T NumberOfBytes, ULONG Tag);
// SIZE_T __stdcall RtlCompareMemory(const void *Source1, const void *Source2, SIZE_T Length);
// void __stdcall ExFreePoolWithTag(PVOID P, ULONG Tag);
signed int __stdcall AcpiEvaluateMethod(int a1, int a2, int *a3, PVOID *a4);
int __stdcall AcpiEvaluateBcl(PVOID P); // idb
int __stdcall AcpiEvaluateBcm(int, PVOID P); // idb
int __stdcall AcpiEvaluateBqc(int, PVOID P); // idb
int __stdcall AcpiNotificationWorker(int a1);
int __stdcall ReleaseAcpiInterfaces(int a1);
int __stdcall AcpiInit(PVOID P); // idb
int __stdcall BrightnessSortStates(int a1);
int __stdcall SetALSBrightness(int a1, unsigned __int8 a2);
int __stdcall SetALSBrightnessState(int a1, char a2);
unsigned int __stdcall BrightnessTargetToPercentage(int a1, unsigned __int8 a2);
int __stdcall BrightnessTargetToPossible(int a1, unsigned __int8 a2, int a3);
int __stdcall BrightnessTargetPercentageToPossible(int a1, unsigned __int8 a2, int a3);
int __stdcall BrightnessAction(int a1, int a2);
int __stdcall ReleaseMiniportInterface(int a1);
int __stdcall BrightnessInit(int a1);
int __stdcall ProcessBrightness(int a1);
int __stdcall SetBrightnessOverride(int a1, int a2, int a3, unsigned __int8 a4);
int __stdcall BrightnessTimerWorker(int a1);
int __stdcall EvtDeviceSelfManagedIoInit(PVOID Context);
int __stdcall EvtDeviceSelfManagedIoCleanup(int a1);
NTSTATUS __stdcall EvtDeviceContextCleanup(int a1);
NTSTATUS __stdcall GetRegistryParameters(signed int a1);
int __stdcall EvtDriverDeviceAdd(int a1, int a2);
int __stdcall WppLoadTracingSupport();
int __stdcall WppTraceCallback(int, int, size_t, void *, int, int); // idb
NTSTATUS __stdcall WppInitKm(int a1, int a2);
void __stdcall WppCleanupKm(int a1);
NTSTATUS __stdcall EvtDriverUnload(int a1);
NTSTATUS __stdcall GetMonitorAdapterInfo(PDEVICE_OBJECT DeviceObject, int a2, PVOID OutputBuffer);
int __stdcall EvtIoDefault(int a1, int a2);
int __stdcall EvtIoDeviceControl(void *, int, int, int, int); // idb
int __stdcall EvtIoInternalDeviceControl(int a1, int a2, int a3, char a4, int a5);
int __stdcall QueueInitialize(int a1);
int __stdcall WmiRegisterDataBlock(int a1, int a2, int a3, int a4);
int __stdcall WmiRegisterEvents(int a1);
signed int __stdcall EvtWmiBrightnessQueryBlock(int a1, unsigned int a2, int a3, int a4);
signed int __stdcall EvtWmiBrightnessExecuteMethod(int a1, int a2, unsigned int a3, int a4, int a5, int a6);
int __stdcall WmiFireBrightnessEvent(int a1);
size_t __stdcall EvtWmiMonitorDescriptorMethods(int a1, int a2, int a3, size_t a4, void *a5, int a6);
NTSTATUS __stdcall EvtWmiMonitorIDQueryBlock(int a1, int a2, int a3, int a4);
NTSTATUS __stdcall EvtWmiMonitorBasicDisplayParamsQueryBlock(int a1, int a2, int a3, int a4);
NTSTATUS __stdcall EvtWmiMonitorAnalogVideoInputParamsQueryBlock(int a1, int a2, int a3, int a4);
NTSTATUS __stdcall EvtWmiMonitorDigitalVideoInputParamsQueryBlock(int a1, int a2, int a3, int a4);
NTSTATUS __stdcall EvtWmiMonitorColorCharacteristicsQueryBlock(int a1, int a2, int a3, int a4);
NTSTATUS __stdcall EvtWmiMonitorSupportedSourceModesQueryBlock(int a1, int a2, int a3, int a4);
signed int __stdcall EvtWmiMonitorConnectionParamsQueryBlock(int a1, unsigned int a2, int a3, int a4);
signed int __stdcall WmiRegisterDataBlocks(int a1);
int __stdcall WmiRegisterMethods(int a1);
signed int __stdcall WmiInitialize(int a1);
NTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath);
void __cdecl __security_init_cookie();

//-------------------------------------------------------------------------
// Data declarations

// extern volatile KSYSTEM_TIME _KeTickCount;
GUID GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS = { 2918014594u, 47369u, 17945u, { 153u, 73u, 245u, 215u, 29u, 172u, 11u, 203u } };
GUID GUID_CONSOLE_DISPLAY_STATE =
{
  1877382486u,
  28746u,
  18336u,
  { 143u, 36u, 194u, 141u, 147u, 111u, 218u, 71u }
};
GUID GUID_ACDC_POWER_SOURCE = { 1564383833u, 59861u, 19200u, { 166u, 189u, 255u, 52u, 255u, 81u, 101u, 72u } };
GUID GUID_ACPI_INTERFACE_STANDARD2 = { 3899219811u, 6193u, 18544u, { 168u, 207u, 156u, 47u, 3u, 249u, 220u, 181u } };
int WmiMonitorBrightness_GUID[4] = { 3560182444, 1337681913, 1377272224, 2218705826 }; // weak
int WmiMonitorBrightnessMethods_GUID[4] = { 1201348788, 1191073113, 578656190, 524440609 }; // weak
int WmiMonitorBrightnessEvent_GUID[4] = { 305955026, 1291752319, 231011456, 3074977369 }; // weak
int WmiMonitorDescriptorMethods_GUID[4] = { 1396791150, 1256945092, 1015491496, 2226374355 }; // weak
int WmiMonitorID_GUID[4] = { 1729790597, 1286491867, 2708078233, 3166718044 }; // weak
int WmiMonitorBasicDisplayParams_GUID[4] = { 2553395174, 1226770860, 1027344269, 1082301796 }; // weak
int WmiMonitorConnectionParams_GUID[4] = { 774710371, 1302836535, 810675854, 793255791 }; // weak
int WmiMonitorAnalogVideoInputParams_GUID[4] = { 2775432441, 1151911152, 1002118044, 1296791359 }; // weak
int WmiMonitorDigitalVideoInputParams_GUID[4] = { 1364613445, 1249331594, 454411948, 3389376748 }; // weak
int WmiMonitorColorCharacteristics_GUID[4] = { 3929163667, 1214927291, 1427086762, 322188626 }; // weak
int WmiMonitorListedSupportedSourceModes_GUID[4] = { 1841784405, 1159988796, 1102602920, 455616012 }; // weak
GUID GUID_DEVINTERFACE_BRIGHTNESS = { 4259691428u, 46073u, 18171u, { 189u, 170u, 7u, 40u, 206u, 49u, 0u, 180u } };
GUID GUID_DEVINTERFACE_MONITOR_DRIVER =
{
  2254772661u,
  16135u,
  19607u,
  { 183u, 223u, 36u, 197u, 216u, 168u, 204u, 184u }
};
int VP_ETW_MONITOR_CONTROL_GUID[4] = { 3468243748, 1293028804, 647587492, 707489649 }; // weak
int VP_ETW_MONITOR_VERSION_DATA_GUID[4] = { 4040674436, 1192339328, 1180303802, 4047534591 }; // weak
int VP_ETW_MONITOR_ACPI_EVENT_DATA_GUID[4] = { 1599102641, 1139568427, 1096152454, 2731499932 }; // weak
int WPP_ThisDir_CTLGUID_MonitorTraceGuid[4] = { 1489518210, 1259649723, 3341444522, 989668661 }; // weak
int dword_12238[4] = { 2763267551, 2186982049, 2323112279, 379624426 }; // weak
int dword_12248[4] = { 2560497473, 3919115459, 3063797786, 300716187 }; // weak
int dword_12258[8] =
{
  2804178656,
  1021593149,
  292474837,
  1403740842,
  439861356,
  3000284984,
  864587224,
  3902979156
}; // weak
int dword_12278[4] = { 2380373686, 3774392707, 2087872140, 2346711136 }; // weak
int dword_12288[4] = { 3683589290, 1305266903, 1028358451, 1825244856 }; // weak
_DWORD off_1300C = 77824; // idb
PDEVICE_OBJECT WPP_GLOBAL_Control = &WPP_GLOBAL_Control; // idb
_DWORD off_13024 = 77848; // idb
ULONG_PTR __security_cookie = 3141592654u; // idb
ULONG_PTR __security_cookie_complement = 1153374641u; // idb
int dword_1303C = 32; // weak
_UNKNOWN __KMDF_CLASS_BIND_START; // weak
void *__KMDF_CLASS_BIND_END = NULL; // weak
struct _MARKER_TYPE *off_1306C = &__KMDF_CLASS_BIND_START; // weak
int (__stdcall *pfnWppQueryTraceInformation)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__fastcall *pfnEtwUnregister)(_DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *pfnEtwRegisterClassicProvider)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *pfnWppGetVersion)(_DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int WPPTraceSuite = 0; // weak
int LCDDevice = 0; // weak
char G_FailDriverEntry = '\0'; // weak
struct _DEVICE_OBJECT g_EtwState =
{
  0,
  0u,
  0,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  0u,
  0u,
  NULL,
  NULL,
  0u,
  '\0',
  { { { { NULL, NULL }, 0u, 0u }, NULL, NULL, 0u, NULL, NULL, NULL } },
  0u,
  { 0, 0, { NULL, NULL }, 0u, 0u },
  { 0, 0u, 0u, { NULL, NULL }, NULL, NULL, NULL, NULL, NULL },
  0u,
  NULL,
  { { { { 0u, 0u, 0u, { 0u } } }, 0, { NULL, NULL } } },
  0u,
  0u,
  NULL,
  NULL
}; // idb
int dword_130A4 = 0; // weak
char byte_130A8[8] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
int dword_130B0 = 0; // weak
int dword_130B4 = 0; // weak
int (__stdcall *dword_13134)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_1313C)(_DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_1315C)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_13160)(_DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_13170)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_13194)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_1319C)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_131B8)(_DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_131E4)(_DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_131EC)(_DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_13288)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_13290)(_DWORD, _DWORD); // weak
int (__stdcall *dword_1329C)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_132A8)(_DWORD, _DWORD); // weak
int (__stdcall *dword_132C4)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_13318)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_1332C)(_DWORD, _DWORD); // weak
int (__stdcall *dword_133A0)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int dword_133DC; // weak
int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_133F8)(_DWORD, _DWORD); // weak
int (__stdcall *dword_134A4)(_DWORD, _DWORD); // weak
int (__stdcall *dword_134AC)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_134B0)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_134D4)(_DWORD, _DWORD); // weak
int (__stdcall *dword_134DC)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_134E0)(_DWORD, _DWORD); // weak
int (__stdcall *dword_134EC)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_134F0)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_13518)(_DWORD, _DWORD); // weak
int (__stdcall *dword_135B0)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_135B4)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_135B8)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_135BC)(_DWORD, _DWORD); // weak
int (__stdcall *dword_1368C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_13698)(_DWORD, _DWORD); // weak
int (__stdcall *dword_136A0)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_136A4)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__fastcall *dword_136A8)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_136AC)(_DWORD, _DWORD); // weak
UNICODE_STRING DestinationString; // idb
int (__stdcall *dword_136F4)(_DWORD); // weak
int dword_136F8; // weak
_DWORD WdfDriverGlobals; // idb
int dword_13700; // weak
int dword_13708[134]; // weak
struct _DEVICE_OBJECT WPP_MAIN_CB; // idb
wchar_t aMonitorwmi[11] = L"MonitorWMI"; // weak


//----- (00011006) --------------------------------------------------------
int __stdcall WPP_SF_(int a1, int a2, int a3, int a4)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, 0);
}
// 13084: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (0001102E) --------------------------------------------------------
int __stdcall WPP_SF_d(int a1, int a2, int a3, int a4, int a5)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 13084: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (0001105C) --------------------------------------------------------
int __stdcall AcpiNotifyCallback(int a1, int a2)
{
  int v2; // esi@1
  int v3; // edi@1
  int result; // eax@1
  int v5; // eax@6
  int v6; // edx@6
  int v7; // ecx@6
  int v8; // [sp+Ch] [bp-2Ch]@1
  int v9; // [sp+18h] [bp-20h]@1
  int v10; // [sp+1Ch] [bp-1Ch]@1
  int v11; // [sp+20h] [bp-18h]@1
  int v12; // [sp+28h] [bp-10h]@1
  int v13; // [sp+2Ch] [bp-Ch]@1
  int (__stdcall *v14)(int); // [sp+30h] [bp-8h]@1
  int v15; // [sp+34h] [bp-4h]@1

  v2 = a1;
  memset(&v8, 0, 0x20u);
  v12 = off_13024;
  v15 = 0;
  v3 = a2;
  v8 = 32;
  v9 = 1;
  v10 = 1;
  v11 = a1;
  v13 = 12;
  v14 = AcpiNotificationWorker;
  LOBYTE(v15) = 0;
  EtwTraceAcpiEvent(a2);
  result = dword_136A4(WdfDriverGlobals, &v13, &v8, &a1);
  if ( result >= 0 )
  {
    v5 = dword_133E0(WdfDriverGlobals, a1, off_13024);
    *(_DWORD *)v5 = v2;
    *(_DWORD *)(v5 + 4) = v3;
    result = dword_136A8(v7, v6, WdfDriverGlobals, a1);
  }
  else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
         && WPP_GLOBAL_Control->Characteristics & 1
         && BYTE1(WPP_GLOBAL_Control->Flags) >= 1u )
  {
    result = WPP_SF_d(
               (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
               (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
               11,
               (int)dword_12238,
               result);
  }
  return result;
}
// 12238: using guessed type int dword_12238[4];
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);
// 136A4: using guessed type int (__stdcall *dword_136A4)(_DWORD, _DWORD, _DWORD, _DWORD);
// 136A8: using guessed type int (__fastcall *dword_136A8)(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00011130) --------------------------------------------------------
int __stdcall AcpiRegisterForNotification(int a1)
{
  int v1; // esi@1
  int v2; // edi@1
  int v3; // ebx@2
  void (__stdcall *v4)(_DWORD); // eax@3

  v1 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  v2 = dword_132C4(WdfDriverGlobals, a1, &GUID_ACPI_INTERFACE_STANDARD2, v1 + 256, 44, 1, 0);
  if ( v2 >= 0 )
  {
    v3 = (*(int (__stdcall **)(_DWORD, int (__stdcall *)(int, int), int))(v1 + 292))(
           *(_DWORD *)(v1 + 260),
           AcpiNotifyCallback,
           a1);
    if ( v3 < 0 )
    {
      v4 = *(void (__stdcall **)(_DWORD))(v1 + 268);
      if ( v4 )
      {
        v4(*(_DWORD *)(v1 + 260));
      }
      v2 = v3;
    }
  }
  return v2;
}
// 132C4: using guessed type int (__stdcall *dword_132C4)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (000111B2) --------------------------------------------------------
NTSTATUS __stdcall BrightnessCallback(LPCGUID SettingGuid, PVOID Value, ULONG ValueLength, PVOID Context)
{
  int v4; // ebx@1
  LPCGUID v5; // esi@5
  int v6; // ecx@5
  GUID *v7; // edi@5
  bool v8; // zf@5
  int v9; // edx@5

  v4 = dword_133E0(WdfDriverGlobals, Context, off_1300C);
  if ( !memcmp(SettingGuid, &GUID_ACDC_POWER_SOURCE, 0x10u) )
  {
    *(_BYTE *)(v4 + 245) = 1;
  }
  if ( !memcmp(SettingGuid, &GUID_CONSOLE_DISPLAY_STATE, 0x10u) )
  {
    *(_DWORD *)(v4 + 248) = *(_DWORD *)Value;
  }
  v5 = SettingGuid;
  v6 = 4;
  v7 = &GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;
  v9 = 0;
  v8 = 1;
  do
  {
    if ( !v6 )
    {
      break;
    }
    v8 = v5->Data1 == v7->Data1;
    v5 = (LPCGUID)((char *)v5 + 4);
    v7 = (GUID *)((char *)v7 + 4);
    --v6;
  }
  while ( v8 );
  if ( v8 && ValueLength == 4 )
  {
    v6 = v4 + 16;
    _InterlockedExchange((volatile signed __int32 *)(v4 + 16), *(_DWORD *)Value);
    if ( *(_DWORD *)v4 )
    {
      PoUnregisterPowerSettingCallback(*(PVOID *)v4);
    }
    *(_DWORD *)v4 = 0;
  }
  dword_136A8(v6, v9, WdfDriverGlobals, *(_DWORD *)(v4 + 20));
  return 0;
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);
// 136A8: using guessed type int (__fastcall *dword_136A8)(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00011250) --------------------------------------------------------
int __stdcall BrightnessTimer(int a1)
{
  int v1; // eax@1
  int v2; // eax@1
  int v3; // edx@1
  int v4; // ecx@1

  v1 = dword_135BC(WdfDriverGlobals, a1);
  v2 = dword_133E0(WdfDriverGlobals, v1, off_1300C);
  return dword_136A8(v4, v3, WdfDriverGlobals, *(_DWORD *)(v2 + 20));
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);
// 135BC: using guessed type int (__stdcall *dword_135BC)(_DWORD, _DWORD);
// 136A8: using guessed type int (__fastcall *dword_136A8)(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00011290) --------------------------------------------------------
int __stdcall EvtDeviceSelfManagedIoRestart(int a1)
{
  int v1; // eax@5
  int v2; // edx@5
  int v3; // ecx@5

  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
  {
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      41,
      (int)dword_12248);
  }
  v1 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  dword_136A8(v3, v2, WdfDriverGlobals, *(_DWORD *)(v1 + 20));
  return 0;
}
// 12248: using guessed type int dword_12248[4];
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);
// 136A8: using guessed type int (__fastcall *dword_136A8)(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (000112EE) --------------------------------------------------------
int __stdcall WPP_INIT_CONTROL_ARRAY(int a1)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = WPP_ThisDir_CTLGUID_MonitorTraceGuid;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 1;
  *(_BYTE *)(a1 + 29) = 0;
  *(_WORD *)(a1 + 30) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}
// 12228: using guessed type int WPP_ThisDir_CTLGUID_MonitorTraceGuid[4];

//----- (00011320) --------------------------------------------------------
signed int __cdecl W2kTraceMessage(int a1, int a2, int a3, int a4, char a5, void *a6)
{
  SIZE_T v6; // edi@1
  void *v7; // esi@1
  unsigned int v8; // ebx@1
  void **v9; // eax@2
  int *v10; // ecx@2
  int v11; // eax@3
  int v12; // edx@3
  PVOID v14; // ecx@9
  int v15; // ebx@9
  const void *v16; // eax@11
  void **v17; // esi@12
  size_t *v18; // esi@14
  size_t v19; // edi@14
  NTSTATUS v20; // esi@17
  __int16 WnodeEventItem; // [sp+Ch] [bp-B4h]@1
  char v22; // [sp+10h] [bp-B0h]@1
  int v23; // [sp+14h] [bp-ACh]@1
  int v24; // [sp+18h] [bp-A8h]@1
  int v25; // [sp+24h] [bp-9Ch]@1
  int v26; // [sp+28h] [bp-98h]@1
  int v27; // [sp+38h] [bp-88h]@1
  char *v28; // [sp+3Ch] [bp-84h]@1
  int v29; // [sp+40h] [bp-80h]@1
  int v30; // [sp+44h] [bp-7Ch]@1
  PVOID v31; // [sp+4Ch] [bp-74h]@11
  int v32; // [sp+50h] [bp-70h]@11
  SIZE_T v33; // [sp+54h] [bp-6Ch]@11
  PVOID P; // [sp+BCh] [bp-4h]@1

  v6 = 0;
  P = 0;
  memset(&WnodeEventItem, 0, 0x30u);
  v7 = a6;
  v23 = a1;
  v24 = a2;
  v25 = a4;
  v8 = 0;
  v26 = 0;
  v27 = 1703936;
  v22 = -1;
  v28 = &a5;
  v29 = 0;
  v30 = 2;
  if ( !a6 )
  {
    goto LABEL_22;
  }
  v9 = &a6;
  v10 = &v30;
  do
  {
    v11 = (int)(v9 + 1);
    v12 = *(_DWORD *)v11;
    v6 += *(_DWORD *)v11;
    ++v8;
    v10 += 4;
    if ( v8 <= 7 )
    {
      *(v10 - 1) = 0;
      *(v10 - 2) = (int)v7;
      *v10 = v12;
    }
    v9 = (void **)(v11 + 4);
    v7 = *v9;
  }
  while ( *v9 );
  if ( v6 > 0x2000 )
  {
    return -1073741823;
  }
  if ( v8 > 7 )
  {
    v14 = ExAllocatePoolWithTag(PagedPool, v6, 0x45435453u);
    v15 = 0;
    P = v14;
    if ( !v14 )
    {
      return -1073741801;
    }
    v16 = a6;
    v31 = v14;
    v32 = 0;
    v33 = v6;
    if ( a6 )
    {
      v17 = &a6;
      while ( 1 )
      {
        v18 = (size_t *)(v17 + 1);
        v19 = *v18;
        memcpy((char *)v14 + v15, v16, *v18);
        v17 = (void **)(v18 + 1);
        v16 = *v17;
        v15 += v19;
        if ( !*v17 )
        {
          break;
        }
        v14 = P;
      }
    }
    WnodeEventItem = 80;
  }
  else
  {
LABEL_22:
    WnodeEventItem = 16 * (v8 + 4);
  }
  v20 = IoWMIWriteEvent(&WnodeEventItem);
  if ( P )
  {
    ExFreePoolWithTag(P, 0);
  }
  return v20;
}

//----- (00011472) --------------------------------------------------------
int __stdcall WppClassicProviderCallback(int a1, char a2, int a3, int a4)
{
  int result; // eax@4

  if ( a2 == 1 || !a2 )
  {
    if ( a2 )
    {
      *(_DWORD *)(a4 + 32) = *(_DWORD *)(a3 + 4);
      *(_BYTE *)(a4 + 29) = *(_BYTE *)(a3 + 2);
      *(_DWORD *)(a4 + 16) = *(_DWORD *)a3;
      result = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a4 + 20) = result;
    }
    else
    {
      result = a4;
      *(_BYTE *)(a4 + 29) = 0;
      *(_DWORD *)(a4 + 32) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      *(_DWORD *)(a4 + 20) = 0;
    }
  }
  return result;
}

//----- (000114C0) --------------------------------------------------------
NTSTATUS __stdcall EtwShutdown()
{
  dword_130B0 = 0;
  dword_130B4 = 0;
  return IoWMIRegistrationControl(&g_EtwState, 0x80000002);
}
// 130B0: using guessed type int dword_130B0;
// 130B4: using guessed type int dword_130B4;

//----- (000114E4) --------------------------------------------------------
NTSTATUS __stdcall EtwTraceVersion(int a1, int a2, char a3)
{
  __int16 WnodeEventItem; // [sp+8h] [bp-40h]@1
  char v5; // [sp+Ch] [bp-3Ch]@1
  int v6; // [sp+10h] [bp-38h]@1
  int v7; // [sp+14h] [bp-34h]@1
  int v8; // [sp+20h] [bp-28h]@1
  int v9; // [sp+24h] [bp-24h]@1
  int v10; // [sp+28h] [bp-20h]@1
  int v11; // [sp+2Ch] [bp-1Ch]@1
  int v12; // [sp+34h] [bp-14h]@1
  int v13; // [sp+38h] [bp-10h]@1
  int v14; // [sp+3Ch] [bp-Ch]@1
  char v15; // [sp+40h] [bp-8h]@1

  memset(&WnodeEventItem, 0, 0x40u);
  v12 = 0x20000;
  v8 = VP_ETW_MONITOR_VERSION_DATA_GUID[0];
  v9 = VP_ETW_MONITOR_VERSION_DATA_GUID[1];
  v10 = VP_ETW_MONITOR_VERSION_DATA_GUID[2];
  v11 = VP_ETW_MONITOR_VERSION_DATA_GUID[3];
  WnodeEventItem = 64;
  v13 = a1;
  v14 = a2;
  v15 = a3;
  v6 = dword_130B0;
  v7 = dword_130B4;
  v5 = 0;
  return IoWMIWriteEvent(&WnodeEventItem);
}
// 12208: using guessed type int VP_ETW_MONITOR_VERSION_DATA_GUID[4];
// 130B0: using guessed type int dword_130B0;
// 130B4: using guessed type int dword_130B4;

//----- (00011554) --------------------------------------------------------
NTSTATUS __stdcall EtwTraceAcpiEvent(int a1)
{
  __int16 WnodeEventItem; // [sp+8h] [bp-38h]@1
  char v3; // [sp+Ch] [bp-34h]@1
  int v4; // [sp+10h] [bp-30h]@1
  int v5; // [sp+14h] [bp-2Ch]@1
  int v6; // [sp+20h] [bp-20h]@1
  int v7; // [sp+24h] [bp-1Ch]@1
  int v8; // [sp+28h] [bp-18h]@1
  int v9; // [sp+2Ch] [bp-14h]@1
  int v10; // [sp+34h] [bp-Ch]@1
  int v11; // [sp+38h] [bp-8h]@1

  memset(&WnodeEventItem, 0, 0x38u);
  v10 = 0x20000;
  v6 = VP_ETW_MONITOR_ACPI_EVENT_DATA_GUID[0];
  v7 = VP_ETW_MONITOR_ACPI_EVENT_DATA_GUID[1];
  v8 = VP_ETW_MONITOR_ACPI_EVENT_DATA_GUID[2];
  v9 = VP_ETW_MONITOR_ACPI_EVENT_DATA_GUID[3];
  WnodeEventItem = 56;
  v11 = a1;
  v4 = dword_130B0;
  v5 = dword_130B4;
  v3 = 0;
  return IoWMIWriteEvent(&WnodeEventItem);
}
// 12218: using guessed type int VP_ETW_MONITOR_ACPI_EVENT_DATA_GUID[4];
// 130B0: using guessed type int dword_130B0;
// 130B4: using guessed type int dword_130B4;

//----- (000115B8) --------------------------------------------------------
int __stdcall EtwWmiCallback(int a1, int a2, size_t a3, void *a4, int a5, int a6)
{
  signed int v6; // edi@1
  int v7; // eax@12
  int v8; // ebx@12
  int v9; // esi@12

  v6 = 0;
  *(_DWORD *)a6 = 0;
  if ( (unsigned __int8)a1 < 4u )
  {
    return -1073741808;
  }
  if ( (unsigned __int8)a1 <= 5u )
  {
    if ( a3 < 0x30 )
    {
      v6 = -1073741811;
    }
    else if ( (_BYTE)a1 == 5 )
    {
      byte_130A8[0] = 0;
      dword_130A4 = 0;
      dword_130B0 = 0;
      dword_130B4 = 0;
    }
    else
    {
      v7 = *((_DWORD *)a4 + 3);
      dword_130B0 = *((_DWORD *)a4 + 2);
      v8 = __PAIR__((unsigned int)v7, dword_130B0) >> 16;
      dword_130B4 = v7;
      v9 = v7 | 1;
      EtwTraceVersion(1, v7 | 1, __PAIR__((unsigned int)v7, dword_130B0) >> 16);
      dword_130A4 = v9;
      byte_130A8[0] = v8;
    }
    return v6;
  }
  if ( (unsigned __int8)a1 <= 7u )
  {
    return v6;
  }
  if ( (_BYTE)a1 != 8 )
  {
    return -1073741808;
  }
  if ( a3 < 0x30 )
  {
    v6 = -1073741789;
    if ( a3 >= 4 )
    {
      *(_DWORD *)a4 = 48;
      *(_DWORD *)a6 = 4;
    }
  }
  else
  {
    memset(a4, 0, a3);
    *((_DWORD *)a4 + 2) = 0;
    *(_DWORD *)a4 = 48;
    *((_DWORD *)a4 + 4) = 1;
    *((_DWORD *)a4 + 5) = VP_ETW_MONITOR_CONTROL_GUID[0];
    *((_DWORD *)a4 + 6) = VP_ETW_MONITOR_CONTROL_GUID[1];
    *((_DWORD *)a4 + 7) = VP_ETW_MONITOR_CONTROL_GUID[2];
    *((_DWORD *)a4 + 8) = VP_ETW_MONITOR_CONTROL_GUID[3];
    *((_DWORD *)a4 + 9) = 528384;
    v6 = 0;
    *(_DWORD *)a6 = 48;
  }
  return v6;
}
// 121F8: using guessed type int VP_ETW_MONITOR_CONTROL_GUID[4];
// 130A4: using guessed type int dword_130A4;
// 130B0: using guessed type int dword_130B0;
// 130B4: using guessed type int dword_130B4;

//----- (000116C6) --------------------------------------------------------
NTSTATUS __stdcall EtwInit()
{
  *(_DWORD *)&g_EtwState.Type = EtwWmiCallback;
  return IoWMIRegistrationControl(&g_EtwState, 0x80000001);
}

//----- (000116E6) --------------------------------------------------------
int __stdcall WPP_SF_dd(int a1, int a2, int a3, int a4, int a5, char a6)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 13084: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (0001171A) --------------------------------------------------------
int __stdcall WPP_SF_qqd(int a1, int a2, int a3, int a4, int a5, char a6, char a7)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 13084: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00011754) --------------------------------------------------------
int __userpurge ForwardRequestToNextDriver@<eax>(int a1@<esi>, int a2, int a3)
{
  int v3; // eax@1
  int result; // eax@1
  int v5; // esi@2
  int v6; // [sp+4h] [bp-10h]@1
  int v7; // [sp+8h] [bp-Ch]@1
  int v8; // [sp+Ch] [bp-8h]@1
  int v9; // [sp+10h] [bp-4h]@1

  v8 = 0;
  v9 = 0;
  v6 = 16;
  v7 = 8;
  dword_134A4(WdfDriverGlobals, a3);
  v3 = dword_13160(WdfDriverGlobals, a2);
  result = dword_134AC(WdfDriverGlobals, a3, v3, &v6);
  if ( !(_BYTE)result )
  {
    v5 = dword_134B0(WdfDriverGlobals, a3, a1);
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 4
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
    {
      WPP_SF_d(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        12,
        (int)dword_12278,
        v5);
    }
    result = dword_134D4(WdfDriverGlobals, a3);
  }
  return result;
}
// 12278: using guessed type int dword_12278[4];
// 13160: using guessed type int (__stdcall *dword_13160)(_DWORD, _DWORD);
// 134A4: using guessed type int (__stdcall *dword_134A4)(_DWORD, _DWORD);
// 134AC: using guessed type int (__stdcall *dword_134AC)(_DWORD, _DWORD, _DWORD, _DWORD);
// 134B0: using guessed type int (__stdcall *dword_134B0)(_DWORD, _DWORD, _DWORD);
// 134D4: using guessed type int (__stdcall *dword_134D4)(_DWORD, _DWORD);

//----- (000117FE) --------------------------------------------------------
bool __stdcall SupportedInternalIoctl(int a1, int a2)
{
  int v2; // eax@1
  bool result; // al@2

  v2 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  if ( a2 == 2303027 )
  {
    result = *(_DWORD *)(v2 + 304) != 0;
  }
  else if ( a2 == 2303023 )
  {
    result = *(_BYTE *)(v2 + 336);
  }
  else
  {
    result = 0;
  }
  return result;
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (00011862) --------------------------------------------------------
int __stdcall WmiRegisterMethod(int a1, int a2, int a3, int a4)
{
  int v4; // esi@1
  int v6; // [sp+Ch] [bp-48h]@1
  int *v7; // [sp+14h] [bp-40h]@1
  char v8; // [sp+19h] [bp-3Bh]@1
  int (__stdcall *v9)(int, int, int, int); // [sp+1Ch] [bp-38h]@1
  int v10; // [sp+28h] [bp-2Ch]@1
  int v11; // [sp+2Ch] [bp-28h]@1
  int v12; // [sp+30h] [bp-24h]@1
  int v13; // [sp+34h] [bp-20h]@1
  int v14; // [sp+38h] [bp-1Ch]@1
  int v15; // [sp+3Ch] [bp-18h]@1
  int v16; // [sp+40h] [bp-14h]@1
  int v17; // [sp+48h] [bp-Ch]@1

  v11 = a1;
  memset(&v12, 0, 0x20u);
  v12 = 32;
  v13 = *(_DWORD *)a2;
  v14 = *(_DWORD *)(a2 + 4);
  v15 = *(_DWORD *)(a2 + 8);
  v16 = *(_DWORD *)(a2 + 12);
  v17 = a3;
  memset(&v6, 0, 0x20u);
  v7 = &v12;
  v6 = 32;
  v8 = 1;
  v10 = a4;
  v9 = NoDataInstanceQueryHandler;
  v4 = dword_1368C(WdfDriverGlobals, a1, &v6, 0, 0);
  if ( v4 < 0
    && (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
  {
    WPP_SF_d(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      11,
      (int)dword_12288,
      v4);
  }
  return v4;
}
// 1184C: using guessed type int __stdcall NoDataInstanceQueryHandler(int, int, int, int);
// 12288: using guessed type int dword_12288[4];
// 1368C: using guessed type int (__stdcall *dword_1368C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00011922) --------------------------------------------------------
NTSTATUS __stdcall WmiCallPhysicalDevice(int a1, ULONG IoControlCode, ULONG InputBufferLength, PVOID InputBuffer, ULONG OutputBufferLength, PVOID OutputBuffer, int a7)
{
  struct _DEVICE_OBJECT *v7; // edi@1
  PIRP v8; // eax@3
  NTSTATUS result; // eax@4
  struct _KEVENT Event; // [sp+Ch] [bp-18h]@3
  struct _IO_STATUS_BLOCK IoStatusBlock; // [sp+1Ch] [bp-8h]@3

  *(_DWORD *)a7 = 0;
  v7 = (struct _DEVICE_OBJECT *)dword_1313C(WdfDriverGlobals, a1);
  if ( !v7 )
  {
    ExRaiseStatus(-1073741787);
  }
  KeInitializeEvent(&Event, 0, 0);
  v8 = IoBuildDeviceIoControlRequest(
         IoControlCode,
         v7,
         InputBuffer,
         InputBufferLength,
         OutputBuffer,
         OutputBufferLength,
         1u,
         &Event,
         &IoStatusBlock);
  if ( v8 )
  {
    v8->IoStatus.Status = -1073741637;
    v8->IoStatus.Information = 0;
    result = IofCallDriver(v7, v8);
    if ( result == 259 )
    {
      KeWaitForSingleObject(&Event, 0, 0, 0, 0);
      result = IoStatusBlock.Status;
    }
    *(_DWORD *)a7 = IoStatusBlock.Information;
  }
  else
  {
    result = -1073741670;
  }
  return result;
}
// 1313C: using guessed type int (__stdcall *dword_1313C)(_DWORD, _DWORD);

//----- (000119C8) --------------------------------------------------------
int __stdcall MonitorAlpcInit(int a1)
{
  int v1; // edi@1
  int result; // eax@1
  UNICODE_STRING DestinationString; // [sp+8h] [bp-8h]@2

  v1 = dword_133E0(WdfDriverGlobals, a1, off_1300C) + 372;
  result = 0;
  if ( !*(_DWORD *)v1 )
  {
    RtlInitUnicodeString(&DestinationString, L"\\PowerMonitorPort");
    result = ZwAlpcConnectPort(v1, &DestinationString, 0, 0, 0x20000, 0, 0, 0, 0, 0, 0);
  }
  return result;
}
// 12060: using guessed type int __stdcall ZwAlpcConnectPort(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (00011A28) --------------------------------------------------------
int __stdcall MonitorAlpcSendPoMessage(int a1, int a2, int a3)
{
  int v3; // edx@1
  int result; // eax@2
  __int16 v5; // [sp+4h] [bp-24h]@3
  __int16 v6; // [sp+6h] [bp-22h]@3
  int v7; // [sp+1Ch] [bp-Ch]@3
  int v8; // [sp+20h] [bp-8h]@3

  v3 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  if ( *(_DWORD *)(v3 + 372) )
  {
    memset(&v5, 0, 0x20u);
    v5 = 8;
    v6 = 32;
    v7 = a2;
    v8 = a3;
    result = ZwAlpcSendWaitReceivePort(*(_DWORD *)(v3 + 372), 0x10000, &v5, 0, 0, 0, 0, 0);
  }
  else
  {
    result = -1073741816;
  }
  return result;
}
// 12064: using guessed type int __stdcall ZwAlpcSendWaitReceivePort(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (00011B0F) --------------------------------------------------------
void __stdcall FxStubDriverUnloadCommon()
{
  FxStubUnbindClasses((struct _WDF_BIND_INFO *)&dword_1303C);
  WdfVersionUnbind(&DestinationString, &dword_1303C, WdfDriverGlobals);
}
// 11D44: using guessed type int __stdcall WdfVersionUnbind(_DWORD, _DWORD, _DWORD);
// 1303C: using guessed type int dword_1303C;

//----- (00011B35) --------------------------------------------------------
void __stdcall FxStubDriverUnload(int a1)
{
  if ( dword_136F4 && (char *)dword_136F4 != (char *)FxStubDriverUnload )
  {
    dword_136F4(a1);
  }
  FxStubDriverUnloadCommon();
}
// 136F4: using guessed type int (__stdcall *dword_136F4)(_DWORD);

//----- (00011B5D) --------------------------------------------------------
void __stdcall FxStubDriverMiniportUnload(int a1, int a2)
{
  FxStubDriverUnloadCommon();
}

//----- (00011B6A) --------------------------------------------------------
NTSTATUS __stdcall FxDriverEntryWorker(int DriverObject, PCUNICODE_STRING SourceString)
{
  NTSTATUS result; // eax@2
  NTSTATUS v3; // esi@4

  if ( DriverObject )
  {
    DestinationString.Length = 0;
    dword_13700 = DriverObject;
    DestinationString.MaximumLength = 520;
    DestinationString.Buffer = (PWSTR)dword_13708;
    RtlCopyUnicodeString(&DestinationString, SourceString);
    result = WdfVersionBind(DriverObject, &DestinationString, &dword_1303C, &WdfDriverGlobals);
    if ( result >= 0 )
    {
      v3 = FxStubBindClasses((struct _WDF_BIND_INFO *)&dword_1303C);
      if ( v3 >= 0
        && (FxStubInitTypes(), v3 = DriverEntry((PDRIVER_OBJECT)DriverObject, (PUNICODE_STRING)SourceString), v3 >= 0) )
      {
        if ( *(_BYTE *)(WdfDriverGlobals + 44) )
        {
          if ( *(_DWORD *)(DriverObject + 52) )
          {
            dword_136F4 = *(int (__stdcall **)(_DWORD))(DriverObject + 52);
          }
          *(_DWORD *)(DriverObject + 52) = FxStubDriverUnload;
        }
        else if ( *(_BYTE *)(WdfDriverGlobals + 4) & 2 )
        {
          dword_136F8 = dword_133DC;
          dword_133DC = (int)FxStubDriverMiniportUnload;
        }
        result = 0;
      }
      else
      {
        FxStubDriverUnloadCommon();
        result = v3;
      }
    }
  }
  else
  {
    result = DriverEntry(0, (PUNICODE_STRING)SourceString);
  }
  return result;
}
// 11B6A: could not find valid save-restore pair for ebx
// 11B6A: could not find valid save-restore pair for esi
// 11D50: using guessed type int __stdcall WdfVersionBind(_DWORD, _DWORD, _DWORD, _DWORD);
// 1303C: using guessed type int dword_1303C;
// 133DC: using guessed type int dword_133DC;
// 136F4: using guessed type int (__stdcall *dword_136F4)(_DWORD);
// 136F8: using guessed type int dword_136F8;
// 13700: using guessed type int dword_13700;
// 13708: using guessed type int dword_13708[134];

//----- (00011C55) --------------------------------------------------------
int __stdcall FxStubBindClasses(struct _WDF_BIND_INFO *a1)
{
  return 0;
}
// 11D5C: using guessed type int __stdcall WdfVersionBindClass(_DWORD, _DWORD, _DWORD);
// 1306C: using guessed type struct _MARKER_TYPE *off_1306C;

//----- (00011CB5) --------------------------------------------------------
void __stdcall FxStubUnbindClasses(struct _WDF_BIND_INFO *a1)
{
  unsigned int v1; // esi@1
  void (__stdcall *v2)(_DWORD, _DWORD, _DWORD, _DWORD); // eax@3

  v1 = (unsigned int)&__KMDF_CLASS_BIND_END;
  if ( (_UNKNOWN *)off_1306C != &__KMDF_CLASS_BIND_START
    && (unsigned int)off_1306C >= (unsigned int)&__KMDF_CLASS_BIND_END )
  {
    do
    {
      v2 = *(void (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD))(v1 + 36);
      if ( v2 )
      {
        v2(WdfVersionUnbindClass, a1, WdfDriverGlobals, v1);
      }
      else
      {
        WdfVersionUnbindClass(a1, WdfDriverGlobals, v1);
      }
      v1 += 44;
    }
    while ( v1 <= (unsigned int)off_1306C );
  }
}
// 11D68: using guessed type int __stdcall WdfVersionUnbindClass(_DWORD, _DWORD, _DWORD);
// 13068: using guessed type void *__KMDF_CLASS_BIND_END;
// 1306C: using guessed type struct _MARKER_TYPE *off_1306C;

//----- (00011D06) --------------------------------------------------------
void __stdcall FxStubInitTypes()
{
  ;
}
// 11D06: could not find valid save-restore pair for edi
// 11D06: could not find valid save-restore pair for esi

//----- (00014006) --------------------------------------------------------
signed int __stdcall AcpiEvaluateMethod(int a1, int a2, int *a3, PVOID *a4)
{
  int v4; // ebx@4
  PVOID v5; // ecx@5
  signed int result; // eax@6
  int v7; // ecx@7
  int v8; // eax@15
  int v9; // edi@15
  signed int v10; // [sp-4h] [bp-28h]@3
  int v11; // [sp+4h] [bp-20h]@15
  int *v12; // [sp+8h] [bp-1Ch]@15
  int v13; // [sp+Ch] [bp-18h]@15
  int v14; // [sp+10h] [bp-14h]@15
  PVOID v15; // [sp+14h] [bp-10h]@15
  int v16; // [sp+18h] [bp-Ch]@15
  int v17; // [sp+1Ch] [bp-8h]@2
  int v18; // [sp+20h] [bp-4h]@2

  if ( !a3 )
  {
    v18 = a2;
    v17 = 1114203457;
    a3 = &v17;
LABEL_3:
    v10 = 8;
LABEL_4:
    v4 = v10;
    goto LABEL_5;
  }
  v7 = *a3;
  if ( *a3 == 1114203457 )
  {
    goto LABEL_3;
  }
  if ( v7 == 1130980673 )
  {
    v4 = a3[2];
  }
  else
  {
    if ( v7 == 1231643969 )
    {
      v10 = 12;
      goto LABEL_4;
    }
    if ( v7 != 1399416129 )
    {
      return -1073741584;
    }
    v4 = a3[2] + 15;
  }
LABEL_5:
  v5 = ExAllocatePoolWithTag(PagedPool, 0x1024u, 0x31306E4Du);
  *a4 = v5;
  if ( v5 )
  {
    v12 = a3;
    v11 = 1;
    v13 = v4;
    v14 = 1;
    v15 = v5;
    v16 = 4132;
    v8 = dword_13160(WdfDriverGlobals, a1);
    v9 = dword_133A0(WdfDriverGlobals, v8, 0, 3325956, &v11, &v14, 0, 0);
    if ( v9 < 0 )
    {
      ExFreePoolWithTag(*a4, 0);
    }
    result = v9;
  }
  else
  {
    result = -1073741670;
  }
  return result;
}
// 13160: using guessed type int (__stdcall *dword_13160)(_DWORD, _DWORD);
// 133A0: using guessed type int (__stdcall *dword_133A0)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00014108) --------------------------------------------------------
int __stdcall AcpiEvaluateBcl(PVOID P)
{
  int v1; // esi@1
  int result; // eax@1
  PVOID v3; // eax@2
  unsigned int v4; // ecx@2
  signed int v5; // esi@3
  unsigned __int8 v6; // dl@6
  int v7; // ecx@7

  v1 = dword_133E0(WdfDriverGlobals, P, off_1300C);
  result = AcpiEvaluateMethod((int)P, 1279476319, 0, &P);
  if ( result >= 0 )
  {
    v3 = P;
    v4 = *((_DWORD *)P + 2);
    if ( v4 )
    {
      if ( v4 >= 0x67 )
      {
        *((_DWORD *)P + 2) = 103;
      }
      v6 = 0;
      if ( *((_DWORD *)v3 + 2) )
      {
        v7 = 0;
        while ( !*((_WORD *)v3 + 4 * v7 + 6) )
        {
          ++v6;
          *(_BYTE *)(v7 + v1 + 37) = *((_BYTE *)v3 + 8 * v7 + 16);
          v7 = v6;
          if ( (unsigned int)v6 >= *((_DWORD *)v3 + 2) )
          {
            goto LABEL_10;
          }
        }
      }
      else
      {
LABEL_10:
        *(_BYTE *)(v1 + 36) = *((_BYTE *)v3 + 8);
      }
      v5 = 0;
    }
    else
    {
      v5 = -1073741275;
    }
    ExFreePoolWithTag(v3, 0);
    result = v5;
  }
  return result;
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (0001419A) --------------------------------------------------------
int __stdcall AcpiEvaluateBcm(int a1, PVOID P)
{
  int v2; // eax@1
  unsigned int v3; // ecx@1
  unsigned int v4; // esi@1
  int result; // eax@5
  signed int v6; // esi@6
  int v7; // [sp+4h] [bp-Ch]@6
  int v8; // [sp+8h] [bp-8h]@6
  int v9; // [sp+Ch] [bp-4h]@6

  v2 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  v3 = *(_BYTE *)(v2 + 36);
  v4 = 0;
  if ( *(_BYTE *)(v2 + 36) )
  {
    do
    {
      if ( *(_BYTE *)(v2 + v4 + 37) == (_BYTE)P )
      {
        break;
      }
      ++v4;
    }
    while ( v4 < v3 );
  }
  if ( v4 == v3 )
  {
    result = -1073741275;
  }
  else
  {
    v9 = (unsigned __int8)P;
    v7 = 1231643969;
    v8 = 1296253535;
    v6 = AcpiEvaluateMethod(a1, 1296253535, &v7, &P);
    if ( v6 >= 0 )
    {
      ExFreePoolWithTag(P, 0);
    }
    result = v6;
  }
  return result;
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (0001421E) --------------------------------------------------------
int __stdcall AcpiEvaluateBqc(int a1, PVOID P)
{
  int v2; // eax@1
  PVOID v3; // ebx@1
  int v4; // edi@1
  int result; // eax@2
  PVOID v6; // esi@4
  int v7; // edx@6
  int v8; // ecx@8
  char v9; // al@8
  signed int v10; // [sp+10h] [bp+8h]@3

  v2 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  v3 = P;
  v4 = v2;
  if ( !P )
  {
    return -1073741811;
  }
  *(_BYTE *)P = 0;
  result = AcpiEvaluateMethod(a1, 1129398879, 0, &P);
  v10 = result;
  if ( result >= 0 )
  {
    v6 = P;
    if ( *((_DWORD *)P + 2) != 1 || *((_WORD *)P + 7) != 4 || (v7 = 0, *((_WORD *)P + 6)) || *((_DWORD *)P + 4) > 0x64u )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 1u )
      {
        WPP_SF_(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          10,
          (int)dword_12238);
      }
    }
    else
    {
      v8 = *(_BYTE *)(v4 + 36);
      v9 = *((_BYTE *)P + 16);
      if ( v8 > 0 )
      {
        do
        {
          if ( *(_BYTE *)(v4 + v7 + 37) == v9 )
          {
            break;
          }
          ++v7;
        }
        while ( v7 < v8 );
      }
      if ( v7 != v8 )
      {
        *(_BYTE *)v3 = v9;
LABEL_18:
        ExFreePoolWithTag(v6, 0);
        return v10;
      }
    }
    v10 = -1073741595;
    goto LABEL_18;
  }
  return result;
}
// 12238: using guessed type int dword_12238[4];
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (000142F0) --------------------------------------------------------
int __stdcall AcpiNotificationWorker(int a1)
{
  int v1; // eax@1
  int v2; // esi@1
  int v3; // edi@1
  int v4; // eax@1
  int v5; // esi@1
  int v6; // esi@2
  int v7; // esi@3
  int v8; // ecx@6
  signed int v10; // [sp-4h] [bp-Ch]@5

  v1 = dword_133E0(WdfDriverGlobals, a1, off_13024);
  v2 = v1;
  v3 = *(_DWORD *)v1;
  v4 = dword_133E0(WdfDriverGlobals, *(_DWORD *)v1, off_1300C);
  v5 = *(_DWORD *)(v2 + 4) - 133;
  if ( v5 )
  {
    v6 = v5 - 1;
    if ( v6 )
    {
      v7 = v6 - 1;
      if ( v7 )
      {
        if ( v7 != 1 )
        {
          return dword_133F8(WdfDriverGlobals, a1);
        }
        v10 = 3;
      }
      else
      {
        v10 = 2;
      }
      v8 = v10;
    }
    else
    {
      v8 = 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if ( *(_DWORD *)(v4 + 248) == 1 )
  {
    BrightnessAction(v3, v8);
  }
  else
  {
    PoSetSystemState(4u);
  }
  return dword_133F8(WdfDriverGlobals, a1);
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);
// 133F8: using guessed type int (__stdcall *dword_133F8)(_DWORD, _DWORD);

//----- (0001437C) --------------------------------------------------------
int __stdcall ReleaseAcpiInterfaces(int a1)
{
  int v1; // eax@1
  int v2; // esi@1
  void (__stdcall *v3)(_DWORD); // eax@1
  int v4; // edi@2
  void (__stdcall *v5)(_DWORD); // esi@2

  v1 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  v2 = v1;
  v3 = *(void (__stdcall **)(_DWORD))(v1 + 296);
  if ( v3 )
  {
    v4 = v2 + 260;
    v3(*(_DWORD *)(v2 + 260));
    v5 = *(void (__stdcall **)(_DWORD))(v2 + 268);
    if ( v5 )
    {
      v5(*(_DWORD *)v4);
    }
  }
  return 0;
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (000143CA) --------------------------------------------------------
int __stdcall AcpiInit(PVOID P)
{
  PVOID v1; // ebx@1
  int v2; // esi@1
  char v4; // al@5

  v1 = P;
  v2 = dword_133E0(WdfDriverGlobals, P, off_1300C);
  if ( !*(_DWORD *)(v2 + 320) )
  {
    if ( AcpiEvaluateBcl(v1) < 0 )
    {
      return -1073741275;
    }
    *(_DWORD *)(v2 + 304) = v1;
    *(_DWORD *)(v2 + 320) = AcpiEvaluateBcm;
    *(_DWORD *)(v2 + 324) = AcpiEvaluateBqc;
    if ( AcpiEvaluateBqc((int)v1, &P) < 0 )
    {
      v4 = *(_BYTE *)(v2 + 37);
      *(_DWORD *)(v2 + 324) = 0;
      LOBYTE(P) = v4;
    }
    BrightnessSortStates((int)v1);
    *(_BYTE *)(v2 + 16) = BrightnessTargetToPercentage((int)v1, (unsigned __int8)P);
  }
  return 0;
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (00014458) --------------------------------------------------------
int __stdcall BrightnessSortStates(int a1)
{
  int result; // eax@1
  unsigned int v2; // edx@1
  const void *v3; // esi@1
  unsigned int v4; // ebx@3
  int v5; // eax@5
  int v6; // eax@6
  int v7; // esi@6
  unsigned __int8 v8; // cl@6
  int v9; // edi@6
  unsigned __int8 v10; // al@6
  unsigned int v11; // [sp+4h] [bp-8h]@1
  char v12; // [sp+Bh] [bp-1h]@4
  unsigned __int8 v13; // [sp+17h] [bp+Bh]@4
  unsigned __int8 i; // [sp+17h] [bp+Bh]@10

  result = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  v2 = result;
  v3 = (const void *)(result + 36);
  v11 = result;
  if ( *(_BYTE *)(result + 36) >= 2u )
  {
    v4 = result + 140;
    *(_BYTE *)(result + 28) = *(_BYTE *)(result + 37);
    *(_BYTE *)(result + 29) = *(_BYTE *)(result + 38);
    qmemcpy((void *)(result + 140), v3, 0x68u);
    do
    {
      v12 = 1;
      v13 = 0;
      if ( *(_BYTE *)v4 - 1 <= 0 )
      {
        break;
      }
      v5 = 0;
      do
      {
        v6 = v2 + v5;
        v7 = v6 + 142;
        v8 = *(_BYTE *)(v6 + 142);
        v9 = v6 + 141;
        v10 = *(_BYTE *)(v6 + 141);
        if ( v10 > v8 )
        {
          *(_BYTE *)v9 = v8;
          *(_BYTE *)v7 = v10;
          v12 = 0;
        }
        ++v13;
        v5 = v13;
      }
      while ( v13 < *(_BYTE *)v4 - 1 );
    }
    while ( !v12 );
    for ( i = 0; i < *(_BYTE *)v4 - 1; ++i )
    {
      if ( *(_BYTE *)(i + v2 + 141) == *(_BYTE *)(i + v2 + 142) )
      {
        _memmove((void *)(i + v2 + 141), (const void *)(i + v2 + 142), (*(_BYTE *)v4)-- - i - 1);
        --i;
        *(_BYTE *)(*(_BYTE *)v4 + v11 + 141) = 0;
        v2 = v11;
      }
    }
    result = 10 * *(_DWORD *)(v2 + 328) * (unsigned int)*(_BYTE *)(*(_BYTE *)v4 + v2 + 140) / 0x3E8;
    *(_DWORD *)(v11 + 332) = result;
    if ( (unsigned int)result < 1 )
    {
      *(_DWORD *)(v11 + 332) = 1;
    }
  }
  else
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(result + 140) = 0;
  }
  return result;
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (0001458C) --------------------------------------------------------
int __stdcall SetALSBrightness(int a1, unsigned __int8 a2)
{
  int v2; // ecx@1
  int result; // eax@1

  v2 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  result = 0;
  if ( a2 <= 0x64u )
  {
    if ( *(_BYTE *)(v2 + 244) )
    {
      result = MonitorAlpcSendPoMessage(a1, 0, a2);
    }
  }
  else
  {
    result = -1073741811;
  }
  return result;
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (000145D6) --------------------------------------------------------
int __stdcall SetALSBrightnessState(int a1, char a2)
{
  int v2; // eax@1
  int v3; // edx@1

  v2 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  v3 = 100;
  *(_BYTE *)(v2 + 244) = a2;
  if ( a2 )
  {
    v3 = *(_DWORD *)(v2 + 32);
  }
  return MonitorAlpcSendPoMessage(a1, 1, v3);
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (00014618) --------------------------------------------------------
unsigned int __stdcall BrightnessTargetToPercentage(int a1, unsigned __int8 a2)
{
  int v2; // eax@1

  v2 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  return 100 * (unsigned int)a2 / *(_BYTE *)(*(_BYTE *)(v2 + 140) + v2 + 140);
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (00014656) --------------------------------------------------------
int __stdcall BrightnessTargetToPossible(int a1, unsigned __int8 a2, int a3)
{
  int v3; // eax@1
  char v4; // cl@1
  unsigned __int8 v5; // dl@1
  int v6; // ecx@4
  int v7; // edx@8
  unsigned __int8 v8; // bl@8
  unsigned __int8 v10; // [sp+Fh] [bp+Bh]@3

  v3 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  v4 = *(_BYTE *)(v3 + 140);
  v5 = *(_BYTE *)(*(_BYTE *)(v3 + 140) + v3 + 140);
  if ( a2 <= v5 )
  {
    v10 = v4 - 1;
    if ( v4 == 1 )
    {
      goto LABEL_14;
    }
    do
    {
      v6 = v3 + v10;
      if ( a2 <= *(_BYTE *)(v6 + 141) && a2 > *(_BYTE *)(v6 + 140) )
      {
        break;
      }
      --v10;
    }
    while ( v10 );
    if ( v10 && (v7 = v10 + v3, v8 = *(_BYTE *)(v7 + 140), a2 - v8 < *(_BYTE *)(v7 + 141) - a2) )
    {
      *(_BYTE *)a3 = v8;
    }
    else
    {
LABEL_14:
      *(_BYTE *)a3 = *(_BYTE *)(v10 + v3 + 141);
    }
  }
  else
  {
    *(_BYTE *)a3 = v5;
  }
  return 0;
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (00014700) --------------------------------------------------------
int __stdcall BrightnessTargetPercentageToPossible(int a1, unsigned __int8 a2, int a3)
{
  int v3; // eax@1
  int v4; // ecx@1
  int result; // eax@2

  v3 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  v4 = *(_BYTE *)(v3 + 140);
  if ( a2 < 0x64u )
  {
    result = BrightnessTargetToPossible(a1, (10 * a2 * (unsigned int)*(_BYTE *)(v4 + v3 + 140) + 999) / 0x3E8, a3);
  }
  else
  {
    *(_BYTE *)a3 = *(_BYTE *)(v4 + v3 + 140);
    result = 0;
  }
  return result;
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (00014772) --------------------------------------------------------
int __stdcall BrightnessAction(int a1, int a2)
{
  unsigned __int8 v2; // bl@1
  int v3; // esi@1
  unsigned __int8 v5; // al@3
  unsigned __int8 i; // cl@3
  int v7; // edi@18
  int v8; // eax@18
  unsigned __int8 v9; // al@21
  unsigned __int8 v10; // [sp+Fh] [bp-1h]@3

  v2 = 0;
  v3 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  if ( *(_BYTE *)(v3 + 140) < 2u )
  {
    return 0;
  }
  BrightnessTargetPercentageToPossible(a1, *(_BYTE *)(v3 + 16), (int)&v10);
  v5 = *(_BYTE *)(v3 + 140);
  i = 0;
  if ( v5 )
  {
    while ( *(_BYTE *)(i + v3 + 141) != v10 )
    {
      ++i;
      if ( i >= v5 )
      {
        goto LABEL_8;
      }
    }
    v2 = i;
  }
LABEL_8:
  if ( !a2 )
  {
    if ( v2 == v5 - 1 )
    {
LABEL_12:
      i = 0;
      goto LABEL_21;
    }
LABEL_18:
    v7 = v5 - 1;
    v8 = v2;
    for ( i = v2; i < v7; v8 = i )
    {
      if ( *(_BYTE *)(v8 + v3 + 141) >= *(_DWORD *)(v3 + 332) + (unsigned int)v10 )
      {
        break;
      }
      ++i;
    }
    goto LABEL_21;
  }
  if ( a2 == 1 )
  {
    goto LABEL_18;
  }
  if ( a2 == 2 )
  {
    for ( i = v2; i; --i )
    {
      if ( *(_BYTE *)(i + v3 + 141) <= (unsigned int)v10 - *(_DWORD *)(v3 + 332) )
      {
        break;
      }
    }
    goto LABEL_21;
  }
  if ( a2 == 3 )
  {
    goto LABEL_12;
  }
LABEL_21:
  v9 = BrightnessTargetToPercentage(a1, *(_BYTE *)(i + v3 + 141));
  return MonitorAlpcSendPoMessage(a1, 0, v9);
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (0001488A) --------------------------------------------------------
int __stdcall ReleaseMiniportInterface(int a1)
{
  int v1; // eax@1
  void (__stdcall *v2)(_DWORD); // ecx@1

  v1 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  v2 = *(void (__stdcall **)(_DWORD))(v1 + 312);
  if ( v2 )
  {
    v2(*(_DWORD *)(v1 + 304));
  }
  return 0;
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (000148C2) --------------------------------------------------------
int __stdcall BrightnessInit(int a1)
{
  int v1; // edi@1
  int v2; // esi@1
  int (__stdcall *v3)(_DWORD, _DWORD, _DWORD, _DWORD); // eax@3

  v1 = a1;
  v2 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  if ( dword_132C4(WdfDriverGlobals, v1, &GUID_DEVINTERFACE_BRIGHTNESS, v2 + 300, 28, 1, 0) >= 0
    && *(_DWORD *)(v2 + 324)
    && (v3 = *(int (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD))(v2 + 316)) != 0
    && *(_DWORD *)(v2 + 320)
    && v3(*(_DWORD *)(v2 + 304), 103, v2 + 36, v2 + 37) >= 0
    && (*(int (__stdcall **)(_DWORD, int *))(v2 + 324))(*(_DWORD *)(v2 + 304), &a1) >= 0 )
  {
    BrightnessSortStates(v1);
    *(_BYTE *)(v2 + 16) = BrightnessTargetToPercentage(v1, a1);
  }
  else
  {
    *(_DWORD *)(v2 + 320) = 0;
    *(_DWORD *)(v2 + 304) = 0;
    *(_BYTE *)(v2 + 36) = 0;
  }
  return 0;
}
// 132C4: using guessed type int (__stdcall *dword_132C4)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (0001497C) --------------------------------------------------------
int __stdcall ProcessBrightness(int a1)
{
  int v1; // eax@1
  int v2; // esi@1
  volatile signed __int32 *v3; // edi@3
  int v4; // ST04_4@6
  int v6; // [sp+8h] [bp-4h]@1

  v1 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  v2 = v1;
  LOBYTE(v6) = 0;
  if ( *(_DWORD *)(v1 + 320) && *(_BYTE *)(v1 + 36) )
  {
    v3 = (volatile signed __int32 *)(v1 + 252);
    while ( _InterlockedCompareExchange(v3, (signed __int32)KeGetCurrentThread(), 0) )
    {
      ;
    }
    if ( *(_BYTE *)(v1 + 245) )
    {
      v4 = *(_DWORD *)(v1 + 24);
      *(_BYTE *)(v1 + 245) = 0;
      dword_135B4(WdfDriverGlobals, v4, -10000000, -1);
    }
    else
    {
      BrightnessTargetPercentageToPossible(a1, *(_BYTE *)(v1 + 16), (int)&v6);
      if ( (*(int (__stdcall **)(_DWORD, int))(v2 + 320))(*(_DWORD *)(v2 + 304), v6) >= 0 )
      {
        WmiFireBrightnessEvent(a1);
      }
    }
    _InterlockedExchange(v3, 0);
  }
  return 0;
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);
// 135B4: using guessed type int (__stdcall *dword_135B4)(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00014A2A) --------------------------------------------------------
int __stdcall SetBrightnessOverride(int a1, int a2, int a3, unsigned __int8 a4)
{
  unsigned __int8 v4; // al@1

  dword_133E0(WdfDriverGlobals, a1, off_1300C);
  v4 = BrightnessTargetToPercentage(a1, a4);
  return MonitorAlpcSendPoMessage(a1, 0, v4);
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (00014A66) --------------------------------------------------------
int __stdcall BrightnessTimerWorker(int a1)
{
  int v1; // esi@1

  v1 = dword_136AC(WdfDriverGlobals, a1);
  dword_133E0(WdfDriverGlobals, v1, off_1300C);
  return ProcessBrightness(v1);
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);
// 136AC: using guessed type int (__stdcall *dword_136AC)(_DWORD, _DWORD);

//----- (00014AA2) --------------------------------------------------------
int __stdcall EvtDeviceSelfManagedIoInit(PVOID Context)
{
  struct _DEVICE_OBJECT *v1; // ebx@1
  int v2; // esi@5
  struct _DEVICE_OBJECT *v3; // eax@6
  int v4; // eax@6
  struct _DEVICE_OBJECT *v5; // eax@11
  int v6; // eax@11
  struct _DEVICE_OBJECT *v7; // eax@16
  int v8; // eax@16
  int v9; // eax@21
  struct _DEVICE_OBJECT *v10; // eax@28
  int v11; // eax@34
  int v12; // eax@39
  int v14; // [sp+0h] [bp-20h]@0
  int v15; // [sp+0h] [bp-20h]@6
  int v16; // [sp+0h] [bp-20h]@11
  int v17; // [sp+4h] [bp-1Ch]@0
  int v18; // [sp+4h] [bp-1Ch]@6
  int v19; // [sp+4h] [bp-1Ch]@11
  int v20; // [sp+8h] [bp-18h]@0
  int v21; // [sp+8h] [bp-18h]@6
  int v22; // [sp+8h] [bp-18h]@11
  int OutputBuffer; // [sp+Ch] [bp-14h]@6
  int v24; // [sp+10h] [bp-10h]@6
  int v25; // [sp+14h] [bp-Ch]@28
  int v26; // [sp+18h] [bp-8h]@28
  int var1; // [sp+1Fh] [bp-1h]@34

  v1 = (struct _DEVICE_OBJECT *)&WPP_GLOBAL_Control;
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
  {
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      32,
      (int)dword_12248);
  }
  v2 = dword_133E0(WdfDriverGlobals, Context, off_1300C);
  if ( *(_DWORD *)(v2 + 320) )
  {
    v3 = (struct _DEVICE_OBJECT *)dword_13134(WdfDriverGlobals, Context, v14, v17, v20, OutputBuffer, v24);
    v4 = PoRegisterPowerSettingCallback(
           v3,
           &GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS,
           BrightnessCallback,
           Context,
           (PVOID *)v2);
    if ( v4 < 0 )
    {
      *(_DWORD *)v2 = 0;
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      {
        WPP_SF_d(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          33,
          (int)dword_12248,
          v4);
      }
    }
    v5 = (struct _DEVICE_OBJECT *)dword_13134(WdfDriverGlobals, Context, v15, v18, v21, OutputBuffer, v24);
    v6 = PoRegisterPowerSettingCallback(v5, &GUID_ACDC_POWER_SOURCE, BrightnessCallback, Context, (PVOID *)(v2 + 8));
    if ( v6 < 0 )
    {
      *(_DWORD *)(v2 + 8) = 0;
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      {
        WPP_SF_d(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          34,
          (int)dword_12248,
          v6);
      }
    }
    v7 = (struct _DEVICE_OBJECT *)dword_13134(WdfDriverGlobals, Context, v16, v19, v22, OutputBuffer, v24);
    v8 = PoRegisterPowerSettingCallback(v7, &GUID_CONSOLE_DISPLAY_STATE, BrightnessCallback, Context, (PVOID *)(v2 + 4));
    if ( v8 < 0 )
    {
      *(_DWORD *)(v2 + 4) = 0;
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      {
        WPP_SF_d(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          35,
          (int)dword_12248,
          v8);
      }
    }
    v9 = AcpiRegisterForNotification((int)Context);
    if ( v9 < 0
      && (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    {
      WPP_SF_d(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        36,
        (int)dword_12248,
        v9);
    }
    v1 = (struct _DEVICE_OBJECT *)&WPP_GLOBAL_Control;
  }
  else
  {
    *(_DWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 4) = 0;
  }
  if ( *(_BYTE *)(v2 + 336) )
  {
    OutputBuffer = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v10 = (struct _DEVICE_OBJECT *)dword_1313C(WdfDriverGlobals, Context);
    if ( v10 )
    {
      v11 = GetMonitorAdapterInfo(v10, (int)&var1, &OutputBuffer);
      if ( v11 >= 0 )
      {
        *(_DWORD *)(v2 + 364) = v26 != 1;
        v12 = dword_13170(WdfDriverGlobals, Context, v2 + 344);
        if ( v12 < 0
          && WPP_GLOBAL_Control != v1
          && WPP_GLOBAL_Control->Characteristics & 1
          && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        {
          WPP_SF_d(
            (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
            (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
            39,
            (int)dword_12248,
            v12);
        }
      }
      else if ( WPP_GLOBAL_Control != v1
             && WPP_GLOBAL_Control->Characteristics & 1
             && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      {
        WPP_SF_d(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          38,
          (int)dword_12248,
          v11);
      }
    }
    else if ( WPP_GLOBAL_Control != v1
           && WPP_GLOBAL_Control->Characteristics & 1
           && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
    {
      WPP_SF_(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        37,
        (int)dword_12248);
    }
  }
  return 0;
}
// 12248: using guessed type int dword_12248[4];
// 13134: using guessed type int (__stdcall *dword_13134)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1313C: using guessed type int (__stdcall *dword_1313C)(_DWORD, _DWORD);
// 13170: using guessed type int (__stdcall *dword_13170)(_DWORD, _DWORD, _DWORD);
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (00014D3C) --------------------------------------------------------
int __stdcall EvtDeviceSelfManagedIoCleanup(int a1)
{
  int v1; // eax@5
  int v2; // esi@5
  void *v3; // eax@5
  void *v4; // esi@9

  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
  {
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      40,
      (int)dword_12248);
  }
  v1 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  v2 = v1;
  v3 = *(void **)(v1 + 8);
  if ( v3 )
  {
    PoUnregisterPowerSettingCallback(v3);
  }
  if ( *(_DWORD *)v2 )
  {
    PoUnregisterPowerSettingCallback(*(PVOID *)v2);
  }
  v4 = *(void **)(v2 + 4);
  if ( v4 )
  {
    PoUnregisterPowerSettingCallback(v4);
  }
  ReleaseMiniportInterface(a1);
  return ReleaseAcpiInterfaces(a1);
}
// 14D3C: could not find valid save-restore pair for edi
// 14D3C: could not find valid save-restore pair for esi
// 12248: using guessed type int dword_12248[4];
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (00014DBC) --------------------------------------------------------
NTSTATUS __stdcall EvtDeviceContextCleanup(int a1)
{
  int v1; // eax@7
  int v2; // esi@7
  int v3; // eax@7
  NTSTATUS result; // eax@9
  void *v5; // esi@11
  UNICODE_STRING SymbolicLinkName; // [sp+8h] [bp-2Ch]@6
  char v7; // [sp+10h] [bp-24h]@6

  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
  {
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      42,
      (int)dword_12248);
  }
  if ( a1 == LCDDevice )
  {
    SymbolicLinkName.Length = 30;
    SymbolicLinkName.MaximumLength = 32;
    SymbolicLinkName.Buffer = (PWSTR)&v7;
    qmemcpy(&v7, L"\\DosDevices\\LCD", 0x20u);
    IoDeleteSymbolicLink(&SymbolicLinkName);
    LCDDevice = 0;
  }
  v1 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  v2 = v1;
  v3 = *(_DWORD *)(v1 + 24);
  if ( v3 )
  {
    dword_135B8(WdfDriverGlobals, v3, 1);
  }
  result = *(_DWORD *)(v2 + 20);
  if ( result )
  {
    result = dword_133F8(WdfDriverGlobals, *(_DWORD *)(v2 + 20));
  }
  v5 = *(void **)(v2 + 372);
  if ( v5 )
  {
    result = ZwClose(v5);
  }
  return result;
}
// 12248: using guessed type int dword_12248[4];
// 13098: using guessed type int LCDDevice;
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);
// 133F8: using guessed type int (__stdcall *dword_133F8)(_DWORD, _DWORD);
// 135B8: using guessed type int (__stdcall *dword_135B8)(_DWORD, _DWORD, _DWORD);
// 16F30: using guessed type wchar_t aDosdevicesLcd[16];

//----- (00014EA0) --------------------------------------------------------
NTSTATUS __stdcall GetRegistryParameters(signed int a1)
{
  int v1; // ebx@1
  NTSTATUS v2; // edi@1
  struct _RTL_QUERY_REGISTRY_TABLE QueryTable; // [sp+Ch] [bp-60h]@1
  OBJECT_ATTRIBUTES ObjectAttributes; // [sp+44h] [bp-28h]@1
  UNICODE_STRING DestinationString; // [sp+5Ch] [bp-10h]@1
  ULONG Disposition; // [sp+64h] [bp-8h]@1
  HANDLE KeyHandle; // [sp+68h] [bp-4h]@1

  QueryTable.QueryRoutine = 0;
  memset(&QueryTable.Flags, 0, 0x34u);
  v1 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  a1 = 5;
  RtlInitUnicodeString(
    &DestinationString,
    L"\\REGISTRY\\MACHINE\\SYSTEM\\CURRENTCONTROLSET\\SERVICES\\Monitor\\Parameters");
  ObjectAttributes.ObjectName = &DestinationString;
  ObjectAttributes.Length = 24;
  ObjectAttributes.RootDirectory = 0;
  ObjectAttributes.Attributes = 576;
  ObjectAttributes.SecurityDescriptor = 0;
  ObjectAttributes.SecurityQualityOfService = 0;
  v2 = ZwCreateKey(&KeyHandle, 0x20019u, &ObjectAttributes, 0, 0, 0, &Disposition);
  if ( v2 >= 0 )
  {
    QueryTable.EntryContext = &a1;
    QueryTable.DefaultData = &a1;
    QueryTable.Flags = 32;
    QueryTable.Name = L"MinimumStepPercentage";
    QueryTable.DefaultType = 4;
    QueryTable.DefaultLength = 0;
    v2 = RtlQueryRegistryValues(0x40000000u, (PCWSTR)KeyHandle, &QueryTable, 0, 0);
    ZwClose(KeyHandle);
  }
  *(_DWORD *)(v1 + 328) = a1;
  return v2;
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);
// 16F50: using guessed type wchar_t aMinimumstepper[22];

//----- (00014F80) --------------------------------------------------------
int __stdcall EvtDriverDeviceAdd(int a1, int a2)
{
  WCHAR *v2; // eax@5
  PDEVICE_OBJECT v3; // eax@11
  int v4; // ebx@16
  signed int v5; // eax@35
  int v6; // edi@46
  int v7; // eax@60
  bool v8; // zf@78
  const WCHAR *v9; // eax@83
  PDEVICE_OBJECT *v10; // edi@107
  int v11; // esi@110
  PDEVICE_OBJECT v12; // eax@113
  int v14; // [sp-Ch] [bp-11Ch]@14
  int v15; // [sp-8h] [bp-118h]@14
  int v16; // [sp-4h] [bp-114h]@14
  int v17; // [sp+Ch] [bp-104h]@15
  int (__stdcall *v18)(int); // [sp+28h] [bp-E8h]@15
  int (__stdcall *v19)(PVOID); // [sp+30h] [bp-E0h]@15
  int (__stdcall *v20)(int); // [sp+38h] [bp-D8h]@15
  int v21; // [sp+50h] [bp-C0h]@106
  int v22; // [sp+5Ch] [bp-B4h]@106
  int v23; // [sp+60h] [bp-B0h]@106
  PVOID v24; // [sp+64h] [bp-ACh]@106
  int v25; // [sp+70h] [bp-A0h]@15
  NTSTATUS (__stdcall *v26)(int); // [sp+74h] [bp-9Ch]@15
  int v27; // [sp+7Ch] [bp-94h]@15
  int v28; // [sp+80h] [bp-90h]@15
  int v29; // [sp+8Ch] [bp-84h]@15
  UNICODE_STRING DestinationString; // [sp+90h] [bp-80h]@95
  int OutputBuffer; // [sp+98h] [bp-78h]@1
  int v32; // [sp+9Ch] [bp-74h]@1
  int v33; // [sp+A0h] [bp-70h]@1
  int v34; // [sp+A4h] [bp-6Ch]@1
  int v35; // [sp+A8h] [bp-68h]@101
  int (__stdcall *v36)(int); // [sp+ACh] [bp-64h]@101
  int v37; // [sp+B0h] [bp-60h]@101
  int v38; // [sp+B4h] [bp-5Ch]@101
  int v39; // [sp+B8h] [bp-58h]@101
  int v40; // [sp+BCh] [bp-54h]@106
  int (__stdcall *v41)(int); // [sp+C0h] [bp-50h]@106
  int v42; // [sp+C4h] [bp-4Ch]@106
  PCWSTR SourceString; // [sp+C8h] [bp-48h]@1
  UNICODE_STRING SymbolicLinkName; // [sp+CCh] [bp-44h]@5
  int v45; // [sp+D4h] [bp-3Ch]@1
  SIZE_T InputBuffer; // [sp+D8h] [bp-38h]@78
  int v47; // [sp+DCh] [bp-34h]@1
  char v48; // [sp+E3h] [bp-2Dh]@1
  PVOID P; // [sp+E4h] [bp-2Ch]@15
  int v50; // [sp+E8h] [bp-28h]@1
  int v51; // [sp+ECh] [bp-24h]@95
  int v52; // [sp+F8h] [bp-18h]@101
  int v53; // [sp+FCh] [bp-14h]@101
  PVOID v54; // [sp+100h] [bp-10h]@101

  OutputBuffer = 0;
  v47 = a2;
  SourceString = 0;
  v32 = 0;
  v33 = 0;
  v50 = -1073741823;
  v48 = 0;
  LOBYTE(v45) = 0;
  v34 = 0;
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
  {
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      10,
      (int)dword_12248);
  }
  v2 = (WCHAR *)dword_132A8(WdfDriverGlobals, v47);
  SymbolicLinkName.Buffer = v2;
  if ( v2 )
  {
    v50 = GetMonitorAdapterInfo((PDEVICE_OBJECT)v2, (int)&v45, &OutputBuffer);
    if ( v50 < 0 )
    {
      v3 = WPP_GLOBAL_Control;
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      {
        v16 = v50;
        v15 = (int)dword_12248;
        v14 = 12;
LABEL_76:
        WPP_SF_d((int)&v3->AttachedDevice->Type, (int)&v3->CurrentIrp->Type, v14, v15, v16);
        goto LABEL_130;
      }
      goto LABEL_130;
    }
    dword_131B8(WdfDriverGlobals, v47);
    memset(&v17, 0, 0x44u);
    v17 = 68;
    v19 = EvtDeviceSelfManagedIoInit;
    v18 = EvtDeviceSelfManagedIoCleanup;
    v20 = EvtDeviceSelfManagedIoRestart;
    dword_13194(WdfDriverGlobals, v47, &v17);
    dword_1319C(WdfDriverGlobals, v47, v45);
    memset(&v25, 0, 0x20u);
    v29 = off_1300C;
    v25 = 32;
    v27 = 1;
    v28 = 1;
    v26 = EvtDeviceContextCleanup;
    v50 = dword_131E4(WdfDriverGlobals, &v47, &v25, &P);
    if ( v50 < 0 )
    {
      v10 = &WPP_GLOBAL_Control;
      goto LABEL_123;
    }
    v4 = dword_133E0(WdfDriverGlobals, P, off_1300C);
    *(_BYTE *)(v4 + 336) = v45;
    GetRegistryParameters((signed int)P);
    v50 = dword_131EC(WdfDriverGlobals, P, &GUID_DEVINTERFACE_MONITOR_DRIVER, 0);
    if ( v50 < 0 )
    {
      v3 = WPP_GLOBAL_Control;
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      {
        v16 = v50;
        v15 = (int)dword_12248;
        v14 = 13;
        goto LABEL_76;
      }
LABEL_130:
      if ( v50 >= 0 )
      {
        return v50;
      }
      goto LABEL_131;
    }
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    {
      WPP_SF_(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        14,
        (int)dword_12248);
    }
    v50 = QueueInitialize((int)P);
    if ( v50 < 0 )
    {
      v3 = WPP_GLOBAL_Control;
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      {
        v16 = v50;
        v15 = (int)dword_12248;
        v14 = 15;
        goto LABEL_76;
      }
      goto LABEL_130;
    }
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    {
      WPP_SF_(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        16,
        (int)dword_12248);
    }
    if ( (_BYTE)v45 )
    {
      v5 = v33;
    }
    else
    {
      v5 = -2;
    }
    *(_DWORD *)(v4 + 340) = v5;
    if ( !(_BYTE)v45 )
    {
      goto LABEL_137;
    }
    memset((void *)(v4 + 344), 0, 0x1Cu);
    *(_DWORD *)(v4 + 364) = 0;
    *(_DWORD *)(v4 + 344) = 28;
    *(_DWORD *)(v4 + 348) = 1;
    *(_DWORD *)(v4 + 352) = 4;
    *(_DWORD *)(v4 + 356) = 1;
    *(_DWORD *)(v4 + 360) = 1;
    v50 = dword_13170(WdfDriverGlobals, P, v4 + 344);
    if ( v50 < 0 )
    {
      v3 = WPP_GLOBAL_Control;
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      {
        v16 = v50;
        v15 = (int)dword_12248;
        v14 = 17;
        goto LABEL_76;
      }
      goto LABEL_130;
    }
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    {
      v6 = (int)dword_12248;
      WPP_SF_(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        18,
        (int)dword_12248);
    }
    else
    {
LABEL_137:
      v6 = (int)dword_12248;
    }
    if ( LCDDevice || *(_DWORD *)(v4 + 340) != 0x80000000 )
    {
      *(_DWORD *)(v4 + 320) = 0;
      *(_DWORD *)(v4 + 304) = 0;
      *(_BYTE *)(v4 + 36) = 0;
    }
    else
    {
      v50 = BrightnessInit((int)P);
      if ( v50 < 0 )
      {
        v3 = WPP_GLOBAL_Control;
        if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && WPP_GLOBAL_Control->Characteristics & 1
          && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        {
          v16 = v50;
          v15 = v6;
          v14 = 19;
          goto LABEL_76;
        }
        goto LABEL_130;
      }
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
      {
        WPP_SF_((int)&WPP_GLOBAL_Control->AttachedDevice->Type, (int)&WPP_GLOBAL_Control->CurrentIrp->Type, 20, v6);
      }
    }
    v7 = AcpiInit(P);
    v50 = v7;
    if ( v7 < 0 && v7 != -1073741275 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      {
        WPP_SF_d((int)&WPP_GLOBAL_Control->AttachedDevice->Type, (int)&WPP_GLOBAL_Control->CurrentIrp->Type, 21, v6, v7);
      }
      goto LABEL_130;
    }
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    {
      WPP_SF_((int)&WPP_GLOBAL_Control->AttachedDevice->Type, (int)&WPP_GLOBAL_Control->CurrentIrp->Type, 22, v6);
    }
    if ( *(_DWORD *)(v4 + 304) )
    {
      v50 = MonitorAlpcInit((int)P);
      if ( v50 < 0 )
      {
        v3 = WPP_GLOBAL_Control;
        if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && WPP_GLOBAL_Control->Characteristics & 1
          && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        {
          v16 = v50;
          v15 = v6;
          v14 = 23;
          goto LABEL_76;
        }
        goto LABEL_130;
      }
    }
    v8 = *(_DWORD *)(v4 + 320) == 0;
    *(_BYTE *)(v4 + 244) = 0;
    *(_DWORD *)(v4 + 32) = 100;
    *(_BYTE *)(v4 + 245) = 0;
    InputBuffer = 1;
    if ( !v8 )
    {
      ZwPowerInformation((POWER_INFORMATION_LEVEL)40, &InputBuffer, 4u, 0, 0);
    }
    if ( *(_BYTE *)(v4 + 36) && !LCDDevice )
    {
      v50 = IoGetDeviceProperty(
              (PDEVICE_OBJECT)SymbolicLinkName.Buffer,
              DevicePropertyPhysicalDeviceObjectName,
              0,
              0,
              &InputBuffer);
      if ( v50 == -1073741789 )
      {
        v9 = (const WCHAR *)ExAllocatePoolWithTag(PagedPool, InputBuffer, 0x44434C5Fu);
        SourceString = v9;
        if ( !v9 )
        {
          if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
            && WPP_GLOBAL_Control->Characteristics & 1
            && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
          {
            WPP_SF_((int)&WPP_GLOBAL_Control->AttachedDevice->Type, (int)&WPP_GLOBAL_Control->CurrentIrp->Type, 24, v6);
          }
          goto LABEL_128;
        }
        v50 = IoGetDeviceProperty(
                (PDEVICE_OBJECT)SymbolicLinkName.Buffer,
                DevicePropertyPhysicalDeviceObjectName,
                InputBuffer,
                (PVOID)v9,
                &InputBuffer);
      }
      if ( v50 < 0 )
      {
        if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && WPP_GLOBAL_Control->Characteristics & 1
          && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        {
          WPP_SF_d(
            (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
            (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
            25,
            v6,
            v50);
        }
        goto LABEL_128;
      }
      SymbolicLinkName.Length = 30;
      SymbolicLinkName.MaximumLength = 32;
      SymbolicLinkName.Buffer = (PWSTR)&v51;
      qmemcpy(&v51, L"\\DosDevices\\LCD", 0x20u);
      RtlInitUnicodeString(&DestinationString, SourceString);
      v50 = IoCreateSymbolicLink(&SymbolicLinkName, &DestinationString);
      if ( v50 < 0 )
      {
        if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && WPP_GLOBAL_Control->Characteristics & 1
          && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        {
          WPP_SF_d(
            (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
            (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
            26,
            (int)dword_12248,
            v50);
        }
        goto LABEL_128;
      }
      LCDDevice = (int)P;
      v48 = 1;
    }
    v38 = 0;
    v37 = 0;
    v39 = 0;
    memset(&v51, 0, 0x20u);
    v54 = P;
    v35 = 20;
    v36 = BrightnessTimer;
    LOBYTE(v38) = 0;
    v51 = 32;
    v52 = 1;
    v53 = 1;
    v50 = dword_135B0(WdfDriverGlobals, &v35, &v51, v4 + 24);
    if ( v50 < 0 )
    {
      goto LABEL_128;
    }
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    {
      WPP_SF_(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        27,
        (int)dword_12248);
    }
    memset(&v21, 0, 0x20u);
    v24 = P;
    v42 = 0;
    v21 = 32;
    v22 = 1;
    v23 = 1;
    v40 = 12;
    v41 = BrightnessTimerWorker;
    LOBYTE(v42) = 1;
    v50 = dword_136A4(WdfDriverGlobals, &v40, &v21, v4 + 20);
    if ( v50 < 0 )
    {
      goto LABEL_128;
    }
    v10 = &WPP_GLOBAL_Control;
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    {
      v11 = (int)dword_12248;
      WPP_SF_(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        28,
        (int)dword_12248);
    }
    else
    {
      v11 = (int)dword_12248;
    }
    v50 = WmiInitialize((int)P);
    if ( v50 < 0 )
    {
      v12 = WPP_GLOBAL_Control;
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
      {
        goto LABEL_128;
      }
      if ( !(WPP_GLOBAL_Control->Characteristics & 1) || BYTE1(WPP_GLOBAL_Control->Flags) < 1u )
      {
LABEL_118:
        if ( (PDEVICE_OBJECT *)v12 != &WPP_GLOBAL_Control )
        {
          if ( !(v12->Characteristics & 1) || BYTE1(v12->Flags) < 4u )
          {
LABEL_124:
            if ( (PDEVICE_OBJECT *)v12 != v10 && v12->Characteristics & 1 && BYTE1(v12->Flags) >= 4u )
            {
              WPP_SF_((int)&v12->AttachedDevice->Type, (int)&v12->CurrentIrp->Type, 31, (int)dword_12248);
            }
            goto LABEL_128;
          }
          WPP_SF_((int)&v12->AttachedDevice->Type, (int)&v12->CurrentIrp->Type, 30, v11);
LABEL_123:
          v12 = WPP_GLOBAL_Control;
          goto LABEL_124;
        }
LABEL_128:
        if ( SourceString )
        {
          ExFreePoolWithTag((PVOID)SourceString, 0);
        }
        goto LABEL_130;
      }
      WPP_SF_d((int)&WPP_GLOBAL_Control->AttachedDevice->Type, (int)&WPP_GLOBAL_Control->CurrentIrp->Type, 29, v11, v50);
    }
    v12 = WPP_GLOBAL_Control;
    goto LABEL_118;
  }
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
  {
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      11,
      (int)dword_12248);
  }
LABEL_131:
  if ( LCDDevice && v48 )
  {
    SymbolicLinkName.Length = 30;
    SymbolicLinkName.MaximumLength = 32;
    SymbolicLinkName.Buffer = (PWSTR)&v51;
    qmemcpy(&v51, L"\\DosDevices\\LCD", 0x20u);
    IoDeleteSymbolicLink(&SymbolicLinkName);
    LCDDevice = 0;
  }
  return v50;
}
// 12248: using guessed type int dword_12248[4];
// 13098: using guessed type int LCDDevice;
// 13170: using guessed type int (__stdcall *dword_13170)(_DWORD, _DWORD, _DWORD);
// 13194: using guessed type int (__stdcall *dword_13194)(_DWORD, _DWORD, _DWORD);
// 1319C: using guessed type int (__stdcall *dword_1319C)(_DWORD, _DWORD, _DWORD);
// 131B8: using guessed type int (__stdcall *dword_131B8)(_DWORD, _DWORD);
// 131E4: using guessed type int (__stdcall *dword_131E4)(_DWORD, _DWORD, _DWORD, _DWORD);
// 131EC: using guessed type int (__stdcall *dword_131EC)(_DWORD, _DWORD, _DWORD, _DWORD);
// 132A8: using guessed type int (__stdcall *dword_132A8)(_DWORD, _DWORD);
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);
// 135B0: using guessed type int (__stdcall *dword_135B0)(_DWORD, _DWORD, _DWORD, _DWORD);
// 136A4: using guessed type int (__stdcall *dword_136A4)(_DWORD, _DWORD, _DWORD, _DWORD);
// 16F30: using guessed type wchar_t aDosdevicesLcd[16];

//----- (0001581A) --------------------------------------------------------
int __stdcall WppLoadTracingSupport()
{
  int result; // eax@1
  UNICODE_STRING DestinationString; // [sp+8h] [bp-Ch]@1
  unsigned int v2; // [sp+10h] [bp-4h]@1

  v2 = 0;
  RtlInitUnicodeString(&DestinationString, L"PsGetVersion");
  pfnWppGetVersion = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD))MmGetSystemRoutineAddress(&DestinationString);
  RtlInitUnicodeString(&DestinationString, L"WmiTraceMessage");
  result = (int)MmGetSystemRoutineAddress(&DestinationString);
  pfnWppTraceMessage = (int (__cdecl *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))result;
  if ( result )
  {
    RtlInitUnicodeString(&DestinationString, L"WmiQueryTraceInformation");
    pfnWppQueryTraceInformation = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))MmGetSystemRoutineAddress(&DestinationString);
    result = (int)pfnWppGetVersion;
    WPPTraceSuite = 2;
    if ( pfnWppGetVersion )
    {
      result = pfnWppGetVersion(&v2, 0, 0, 0);
    }
    if ( v2 >= 6 )
    {
      RtlInitUnicodeString(&DestinationString, L"EtwRegisterClassicProvider");
      result = (int)MmGetSystemRoutineAddress(&DestinationString);
      pfnEtwRegisterClassicProvider = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))result;
      if ( result )
      {
        RtlInitUnicodeString(&DestinationString, L"EtwUnregister");
        result = (int)MmGetSystemRoutineAddress(&DestinationString);
        pfnEtwUnregister = (int (__fastcall *)(_DWORD, _DWORD, _DWORD, _DWORD))result;
        WPPTraceSuite = 4;
      }
    }
  }
  else
  {
    pfnWppTraceMessage = (int (__cdecl *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))W2kTraceMessage;
    WPPTraceSuite = 1;
  }
  return result;
}
// 13080: using guessed type int (__stdcall *pfnWppQueryTraceInformation)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 13084: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 13088: using guessed type int (__fastcall *pfnEtwUnregister)(_DWORD, _DWORD, _DWORD, _DWORD);
// 1308C: using guessed type int (__stdcall *pfnEtwRegisterClassicProvider)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 13090: using guessed type int (__stdcall *pfnWppGetVersion)(_DWORD, _DWORD, _DWORD, _DWORD);
// 13094: using guessed type int WPPTraceSuite;

//----- (000158F8) --------------------------------------------------------
int __stdcall WppTraceCallback(int a1, int a2, size_t a3, void *a4, int a5, int a6)
{
  int v6; // eax@1
  void *v7; // edi@1
  int v8; // edx@2
  void *v9; // ebx@2
  int v10; // esi@2
  unsigned int v11; // ecx@3
  int v12; // ecx@4
  int v13; // esi@8
  char *v14; // edi@8
  int v15; // edx@9
  int v16; // esi@14
  size_t v17; // edi@14
  int v18; // esi@18
  void *v19; // ecx@19
  int v20; // eax@19
  int v21; // ebx@20
  int v22; // esi@21
  int v23; // esi@26
  void *v24; // edi@29
  char *v25; // ebx@29
  int v26; // edx@35
  int v27; // ecx@35
  int v29; // [sp+14h] [bp-4h]@1
  int v30; // [sp+14h] [bp-4h]@9
  int v31; // [sp+20h] [bp+8h]@14

  v6 = a6;
  v7 = 0;
  v29 = 0;
  *(_DWORD *)a6 = 0;
  switch ( (unsigned __int8)a1 )
  {
    case 8u:
      v8 = a5;
      v9 = a4;
      v10 = a5;
      if ( WPPTraceSuite != 1 || (v11 = *((_DWORD *)a4 + 4), v11 <= 1) )
      {
        v15 = *(_DWORD *)(a5 + 24);
        v30 = *(_DWORD *)(a5 + 24);
        do
        {
          v10 = *(_DWORD *)(v10 + 8);
          v7 = (char *)v7 + 1;
        }
        while ( v10 );
        a4 = v7;
        if ( (unsigned int)v7 > 0x3F )
        {
          goto LABEL_12;
        }
        if ( v15 )
        {
          v16 = 28 * (_DWORD)v7 + 20;
          v31 = *(_WORD *)v15 + v16 + 2;
          v17 = *(_WORD *)v15 + v16 + 2;
        }
        else
        {
          v16 = 0;
          v17 = 28 * (_DWORD)v7 + 20;
          v31 = v17;
        }
        if ( v17 > a3 )
        {
          v29 = -1073741789;
          if ( a3 >= 4 )
          {
            *(_DWORD *)v9 = v17;
LABEL_7:
            *(_DWORD *)v6 = 4;
            return v29;
          }
        }
        else
        {
          memset(v9, 0, a3);
          *((_DWORD *)v9 + 4) = a4;
          *(_DWORD *)v9 = v17;
          *((_DWORD *)v9 + 2) = v16;
          if ( v30 )
          {
            v18 = (int)((char *)v9 + v16);
            *(_WORD *)v18 = *(_WORD *)v30;
            memcpy((void *)(v18 + 2), *(const void **)(v30 + 4), *(_WORD *)v30);
          }
          v19 = a4;
          v20 = a5;
          if ( a4 )
          {
            v21 = (int)((char *)v9 + 36);
            do
            {
              v22 = *(_DWORD *)(v20 + 4);
              *(_DWORD *)(v21 - 16) = *(_DWORD *)v22;
              v22 += 4;
              *(_DWORD *)(v21 - 16 + 4) = *(_DWORD *)v22;
              v22 += 4;
              *(_DWORD *)(v21 - 16 + 8) = *(_DWORD *)v22;
              *(_DWORD *)(v21 - 16 + 12) = *(_DWORD *)(v22 + 4);
              *(_DWORD *)v21 = 528384;
              *(_DWORD *)(v20 + 32) = 0;
              v21 += 28;
              v19 = (char *)v19 - 1;
              *(_BYTE *)(v20 + 29) = 0;
              v20 = *(_DWORD *)(v20 + 8);
            }
            while ( v19 );
            v17 = v31;
          }
          v29 = 0;
          *(_DWORD *)a6 = v17;
        }
      }
      else
      {
        v12 = 28 * v11;
        if ( v12 + 20 > a3 )
        {
          v29 = -1073741789;
          if ( a3 < 4 )
          {
            return v29;
          }
          *(_DWORD *)a4 = v12 + 20;
          goto LABEL_7;
        }
        v13 = *(_DWORD *)(a5 + 4);
        v14 = (char *)a4 + v12 - 8;
        *(_DWORD *)v14 = *(_DWORD *)v13;
        v13 += 4;
        v14 += 4;
        *(_DWORD *)v14 = *(_DWORD *)v13;
        v13 += 4;
        v14 += 4;
        *(_DWORD *)v14 = *(_DWORD *)v13;
        *((_DWORD *)v14 + 1) = *(_DWORD *)(v13 + 4);
        *((_DWORD *)v9 + 7 * *((_DWORD *)v9 + 4) + 2) = 528384;
        *(_DWORD *)(v8 + 32) = 0;
        *(_BYTE *)(v8 + 29) = 0;
      }
      return v29;
    case 4u:
    case 5u:
      v23 = a5;
      if ( !a5 )
      {
        goto LABEL_27;
      }
      if ( a3 < 0x30 )
      {
LABEL_12:
        v29 = -1073741811;
      }
      else
      {
        v24 = a4;
        v25 = (char *)a4 + 24;
        do
        {
          if ( RtlCompareMemory(*(const void **)(v23 + 4), v25, 0x10u) == 16 )
          {
            break;
          }
          v23 = *(_DWORD *)(v23 + 8);
        }
        while ( v23 );
        if ( v23 )
        {
          v29 = 0;
          if ( (_BYTE)a1 == 5 )
          {
            *(_BYTE *)(v23 + 29) = 0;
            *(_DWORD *)(v23 + 32) = 0;
            *(_DWORD *)(v23 + 16) = 0;
            *(_DWORD *)(v23 + 20) = 0;
          }
          else
          {
            v26 = *((_DWORD *)v24 + 2);
            v27 = *((_DWORD *)v24 + 3);
            *(_DWORD *)(v23 + 16) = v26;
            *(_DWORD *)(v23 + 20) = v27;
            if ( WPPTraceSuite == 2 )
            {
              if ( !pfnWppQueryTraceInformation(3, &a3, 4, &a5, v24) )
              {
                *(_BYTE *)(v23 + 29) = a3;
              }
              v29 = pfnWppQueryTraceInformation(2, v23 + 32, 4, &a5, v24);
            }
            else
            {
              *(_DWORD *)(v23 + 32) = v27;
              *(_BYTE *)(v23 + 29) = BYTE2(v26);
            }
          }
        }
        else
        {
LABEL_27:
          v29 = -1073741163;
        }
      }
      return v29;
    case 6u:
    case 7u:
      return 0;
    default:
      return -1073741808;
  }
}
// 13080: using guessed type int (__stdcall *pfnWppQueryTraceInformation)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 13094: using guessed type int WPPTraceSuite;

//----- (00015B54) --------------------------------------------------------
NTSTATUS __stdcall WppInitKm(int a1, int a2)
{
  struct _DEVICE_OBJECT *v2; // esi@1
  int v3; // eax@3
  NTSTATUS result; // eax@3

  v2 = &WPP_MAIN_CB;
  if ( WPP_GLOBAL_Control != &WPP_MAIN_CB )
  {
    WPP_GLOBAL_Control = &WPP_MAIN_CB;
    if ( WPPTraceSuite == 4 )
    {
      do
      {
        v3 = (int)&v2->DeviceExtension;
        *(_DWORD *)v3 = 0;
        *(_DWORD *)(v3 + 4) = 0;
        result = pfnEtwRegisterClassicProvider(
                   v2->ReferenceCount,
                   0,
                   WppClassicProviderCallback,
                   v2,
                   &v2->DeviceExtension);
        v2 = (struct _DEVICE_OBJECT *)v2->DriverObject;
      }
      while ( v2 );
    }
    else if ( WPPTraceSuite == 2 )
    {
      *(_DWORD *)&WPP_MAIN_CB.Type = WppTraceCallback;
      result = IoWMIRegistrationControl(&WPP_MAIN_CB, 0x80010001);
    }
    else
    {
      result = dword_1329C(WdfDriverGlobals, a1, WppTraceCallback, &WPP_MAIN_CB);
    }
  }
  return result;
}
// 1308C: using guessed type int (__stdcall *pfnEtwRegisterClassicProvider)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 13094: using guessed type int WPPTraceSuite;
// 1329C: using guessed type int (__stdcall *dword_1329C)(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00015BD8) --------------------------------------------------------
void __stdcall WppCleanupKm(int a1)
{
  PDEVICE_OBJECT v1; // esi@1

  v1 = WPP_GLOBAL_Control;
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
  {
    if ( WPPTraceSuite == 4 )
    {
      while ( v1 )
      {
        if ( *(_QWORD *)&v1->DeviceExtension )
        {
          pfnEtwUnregister(
            v1->DeviceType,
            v1->DeviceType | (unsigned int)v1->DeviceExtension,
            v1->DeviceExtension,
            v1->DeviceType);
        }
        v1 = (PDEVICE_OBJECT)v1->DriverObject;
      }
    }
    else if ( WPPTraceSuite == 2 )
    {
      IoWMIRegistrationControl(WPP_GLOBAL_Control, 0x80000002);
    }
    WPP_GLOBAL_Control = (PDEVICE_OBJECT)&WPP_GLOBAL_Control;
  }
}
// 13088: using guessed type int (__fastcall *pfnEtwUnregister)(_DWORD, _DWORD, _DWORD, _DWORD);
// 13094: using guessed type int WPPTraceSuite;

//----- (00015C34) --------------------------------------------------------
NTSTATUS __stdcall EvtDriverUnload(int a1)
{
  int v1; // eax@5

  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
  {
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      12,
      (int)dword_12258);
  }
  v1 = dword_13290(WdfDriverGlobals, a1);
  WppCleanupKm(v1);
  return EtwShutdown();
}
// 12258: using guessed type int dword_12258[8];
// 13290: using guessed type int (__stdcall *dword_13290)(_DWORD, _DWORD);

//----- (00015C86) --------------------------------------------------------
NTSTATUS __stdcall GetMonitorAdapterInfo(PDEVICE_OBJECT DeviceObject, int a2, PVOID OutputBuffer)
{
  PIRP v3; // eax@1
  NTSTATUS result; // eax@2
  struct _KEVENT Event; // [sp+4h] [bp-18h]@1
  struct _IO_STATUS_BLOCK IoStatusBlock; // [sp+14h] [bp-8h]@1

  KeInitializeEvent(&Event, 0, 0);
  v3 = IoBuildDeviceIoControlRequest(0x232407u, DeviceObject, 0, 0, OutputBuffer, 0x10u, 1u, &Event, &IoStatusBlock);
  if ( v3 )
  {
    v3->IoStatus.Status = -1073741637;
    v3->IoStatus.Information = 0;
    result = IofCallDriver(DeviceObject, v3);
    if ( result == 259 )
    {
      KeWaitForSingleObject(&Event, 0, 0, 0, 0);
      result = IoStatusBlock.Status;
    }
    if ( result < 0 )
    {
      if ( result == -1073741637 )
      {
        *(_BYTE *)a2 = 0;
        result = 0;
      }
    }
    else
    {
      *(_BYTE *)a2 = 1;
    }
  }
  else
  {
    result = -1073741670;
  }
  return result;
}

//----- (00015D18) --------------------------------------------------------
int __stdcall EvtIoDefault(int a1, int a2)
{
  int v3; // [sp+0h] [bp-1Ch]@0
  __int16 v4; // [sp+4h] [bp-18h]@1
  int v5; // [sp+8h] [bp-14h]@4

  memset(&v4, 0, 0x18u);
  v4 = 24;
  dword_134E0(WdfDriverGlobals, a2);
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 2
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
  {
    WPP_SF_qqd(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      11,
      (int)dword_12278,
      a1,
      a2,
      v5);
  }
  return dword_134DC(WdfDriverGlobals, a2, 0, 0, v3);
}
// 12278: using guessed type int dword_12278[4];
// 134DC: using guessed type int (__stdcall *dword_134DC)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 134E0: using guessed type int (__stdcall *dword_134E0)(_DWORD, _DWORD);

//----- (00015D96) --------------------------------------------------------
int __stdcall EvtIoDeviceControl(void *a1, int a2, int a3, int a4, int a5)
{
  int v5; // ebx@1
  PDEVICE_OBJECT v6; // eax@1
  int v7; // edi@9
  int v8; // esi@9
  int v10; // eax@15
  int (__stdcall *v11)(_DWORD, _DWORD); // eax@20
  unsigned __int8 v12; // al@24
  int v13; // [sp-8h] [bp-18h]@0
  size_t v14; // [sp+Ch] [bp-4h]@16

  v5 = 0;
  v6 = WPP_GLOBAL_Control;
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
  {
    if ( WPP_GLOBAL_Control->Characteristics & 4 && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
    {
      WPP_SF_qqd(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        13,
        (int)dword_12278,
        (int)a1,
        a2,
        a5);
      v6 = WPP_GLOBAL_Control;
    }
    if ( (PDEVICE_OBJECT *)v6 != &WPP_GLOBAL_Control && v6->Characteristics & 4 && BYTE1(v6->Flags) >= 5u )
    {
      WPP_SF_dd((int)&v6->AttachedDevice->Type, (int)&v6->CurrentIrp->Type, 14, (int)dword_12278, a3, a4);
    }
  }
  v7 = dword_1332C(WdfDriverGlobals, a1);
  v8 = dword_133E0(WdfDriverGlobals, v7, off_1300C);
  if ( a5 == 2294932 )
  {
    v12 = *(_BYTE *)(v8 + 36);
    if ( v12 < 3u )
    {
      v10 = -1073741275;
      return dword_134DC(WdfDriverGlobals, a2, v10, v5, v13);
    }
    v10 = dword_134F0(WdfDriverGlobals, a2, v12 - 2, &a1, &v14);
    if ( v10 < 0 )
    {
      return dword_134DC(WdfDriverGlobals, a2, v10, v5, v13);
    }
    memset(a1, 0, v14);
    memcpy(a1, (const void *)(v8 + 39), *(_BYTE *)(v8 + 36) - 2);
    v5 = *(_BYTE *)(v8 + 36) - 2;
    goto LABEL_28;
  }
  if ( a5 == 2294936 )
  {
    v10 = dword_134F0(WdfDriverGlobals, a2, 3, &a5, &v14);
    if ( v10 < 0 )
    {
      return dword_134DC(WdfDriverGlobals, a2, v10, v5, v13);
    }
    BrightnessTargetPercentageToPossible(v7, *(_BYTE *)(v8 + 16), (int)&a1);
    v11 = *(int (__stdcall **)(_DWORD, _DWORD))(v8 + 324);
    if ( v11 && v11(*(_DWORD *)(v8 + 304), &a1) >= 0 )
    {
      *(_BYTE *)(v8 + 16) = BrightnessTargetToPercentage(v7, (unsigned __int8)a1);
    }
    *(_BYTE *)a5 = 2;
    *(_BYTE *)(a5 + 1) = (_BYTE)a1;
    *(_BYTE *)(a5 + 2) = (_BYTE)a1;
    v5 = 3;
LABEL_28:
    v10 = 0;
    return dword_134DC(WdfDriverGlobals, a2, v10, v5, v13);
  }
  if ( a5 == 2294940 )
  {
    v10 = dword_134EC(WdfDriverGlobals, a2, 3, &a1, &v14);
    if ( v10 >= 0 )
    {
      LOBYTE(a5) = *((_BYTE *)a1 + 2);
      v10 = SetBrightnessOverride(v7, 0, 0, a5);
    }
    else
    {
      v5 = 3;
    }
  }
  else
  {
    if ( a5 == 3325956 && !(unsigned __int8)dword_13518(WdfDriverGlobals, a2) )
    {
      return ForwardRequestToNextDriver(v8, v7, a2);
    }
    v10 = -1073741637;
  }
  return dword_134DC(WdfDriverGlobals, a2, v10, v5, v13);
}
// 12278: using guessed type int dword_12278[4];
// 1332C: using guessed type int (__stdcall *dword_1332C)(_DWORD, _DWORD);
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);
// 134DC: using guessed type int (__stdcall *dword_134DC)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 134EC: using guessed type int (__stdcall *dword_134EC)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 134F0: using guessed type int (__stdcall *dword_134F0)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 13518: using guessed type int (__stdcall *dword_13518)(_DWORD, _DWORD);

//----- (00015F9C) --------------------------------------------------------
int __stdcall EvtIoInternalDeviceControl(int a1, int a2, int a3, char a4, int a5)
{
  int v5; // edi@1
  PDEVICE_OBJECT v6; // eax@1
  int v7; // ebx@9
  int result; // eax@10
  int v9; // esi@13
  int v10; // eax@15
  int v11; // esi@15
  int v12; // ecx@16
  int v13; // [sp-4h] [bp-10h]@0

  v5 = -1073741637;
  v6 = WPP_GLOBAL_Control;
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
  {
    if ( WPP_GLOBAL_Control->Characteristics & 4 && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
    {
      WPP_SF_qqd(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        15,
        (int)dword_12278,
        a1,
        a2,
        a5);
      v6 = WPP_GLOBAL_Control;
    }
    if ( (PDEVICE_OBJECT *)v6 != &WPP_GLOBAL_Control && v6->Characteristics & 4 && BYTE1(v6->Flags) >= 5u )
    {
      WPP_SF_dd((int)&v6->AttachedDevice->Type, (int)&v6->CurrentIrp->Type, 16, (int)dword_12278, a3, a4);
    }
  }
  v7 = dword_1332C(WdfDriverGlobals, a1);
  if ( SupportedInternalIoctl(v7, a5) )
  {
    if ( a5 == 2303023 )
    {
      v10 = dword_133E0(WdfDriverGlobals, v7, off_1300C);
      a5 = 0;
      v11 = v10;
      v5 = dword_134EC(WdfDriverGlobals, a2, 4, &a5, 0);
      if ( v5 < 0 )
      {
        if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && WPP_GLOBAL_Control->Characteristics & 4
          && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        {
          WPP_SF_d(
            (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
            (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
            18,
            (int)dword_12278,
            v5);
        }
      }
      else
      {
        v12 = *(_DWORD *)a5 != 1;
        if ( *(_DWORD *)(v11 + 364) == v12 )
        {
          v5 = 0;
        }
        else
        {
          *(_DWORD *)(v11 + 364) = v12;
          v5 = dword_13170(WdfDriverGlobals, v7, v11 + 344);
          if ( v5 < 0
            && (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
            && WPP_GLOBAL_Control->Characteristics & 4
            && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
          {
            WPP_SF_d(
              (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
              (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
              17,
              (int)dword_12278,
              v5);
          }
        }
      }
    }
    else if ( a5 == 2303027 )
    {
      v9 = dword_133E0(WdfDriverGlobals, v7, off_1300C);
      v5 = dword_134EC(WdfDriverGlobals, a2, 4, &a5, 0);
      if ( v5 >= 0 )
      {
        *(_BYTE *)(v9 + 16) = *(_BYTE *)a5;
        v5 = ProcessBrightness(v7);
      }
    }
    result = dword_134DC(WdfDriverGlobals, a2, v5, 0, v13);
  }
  else
  {
    result = ForwardRequestToNextDriver((int)&WPP_GLOBAL_Control, v7, a2);
  }
  return result;
}
// 12278: using guessed type int dword_12278[4];
// 13170: using guessed type int (__stdcall *dword_13170)(_DWORD, _DWORD, _DWORD);
// 1332C: using guessed type int (__stdcall *dword_1332C)(_DWORD, _DWORD);
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);
// 134DC: using guessed type int (__stdcall *dword_134DC)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 134EC: using guessed type int (__stdcall *dword_134EC)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (0001616E) --------------------------------------------------------
int __stdcall QueueInitialize(int a1)
{
  int result; // eax@1
  int v2; // esi@1
  int v3; // [sp+4h] [bp-34h]@1
  int v4; // [sp+8h] [bp-30h]@1
  int v5; // [sp+Ch] [bp-2Ch]@1
  char v6; // [sp+11h] [bp-27h]@1
  int (__stdcall *v7)(int, int); // [sp+14h] [bp-24h]@1
  int (__stdcall *v8)(void *, int, int, int, int); // [sp+20h] [bp-18h]@1
  int (__stdcall *v9)(int, int, int, char, int); // [sp+24h] [bp-14h]@1

  memset(&v3, 0, 0x34u);
  v5 = 0;
  v3 = 52;
  v6 = 1;
  v4 = 1;
  v7 = EvtIoDefault;
  v8 = EvtIoDeviceControl;
  v9 = EvtIoInternalDeviceControl;
  result = dword_13318(WdfDriverGlobals, a1, &v3, 0, &a1);
  v2 = result;
  if ( result < 0 )
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
    {
      WPP_SF_d(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        10,
        (int)dword_12278,
        result);
    }
    result = v2;
  }
  return result;
}
// 12278: using guessed type int dword_12278[4];
// 13318: using guessed type int (__stdcall *dword_13318)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00016206) --------------------------------------------------------
int __stdcall WmiRegisterDataBlock(int a1, int a2, int a3, int a4)
{
  int v4; // esi@1
  int v6; // [sp+Ch] [bp-48h]@1
  int *v7; // [sp+14h] [bp-40h]@1
  char v8; // [sp+19h] [bp-3Bh]@1
  int v9; // [sp+1Ch] [bp-38h]@1
  int v10; // [sp+2Ch] [bp-28h]@1
  int v11; // [sp+30h] [bp-24h]@1
  int v12; // [sp+34h] [bp-20h]@1
  int v13; // [sp+38h] [bp-1Ch]@1
  int v14; // [sp+3Ch] [bp-18h]@1
  int v15; // [sp+40h] [bp-14h]@1
  int v16; // [sp+48h] [bp-Ch]@1

  v10 = a1;
  memset(&v11, 0, 0x20u);
  v11 = 32;
  v12 = *(_DWORD *)a2;
  v13 = *(_DWORD *)(a2 + 4);
  v14 = *(_DWORD *)(a2 + 8);
  v15 = *(_DWORD *)(a2 + 12);
  v16 = a3;
  memset(&v6, 0, 0x20u);
  v7 = &v11;
  v6 = 32;
  v8 = 1;
  v9 = a4;
  v4 = dword_1368C(WdfDriverGlobals, a1, &v6, 0, 0);
  if ( v4 < 0
    && (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
  {
    WPP_SF_d(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      10,
      (int)dword_12288,
      v4);
  }
  return v4;
}
// 12288: using guessed type int dword_12288[4];
// 1368C: using guessed type int (__stdcall *dword_1368C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (000162BE) --------------------------------------------------------
int __stdcall WmiRegisterEvents(int a1)
{
  int v1; // esi@1
  int v3; // [sp+4h] [bp-50h]@2
  int *v4; // [sp+Ch] [bp-48h]@2
  char v5; // [sp+11h] [bp-43h]@2
  int v6; // [sp+24h] [bp-30h]@1
  int v7; // [sp+28h] [bp-2Ch]@2
  int v8; // [sp+2Ch] [bp-28h]@1
  int v9; // [sp+30h] [bp-24h]@2
  int v10; // [sp+34h] [bp-20h]@2
  int v11; // [sp+38h] [bp-1Ch]@2
  int v12; // [sp+3Ch] [bp-18h]@2
  int v13; // [sp+40h] [bp-14h]@2
  int v14; // [sp+44h] [bp-10h]@2

  v6 = a1;
  v1 = 0;
  v8 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  if ( *(_DWORD *)(v8 + 320) )
  {
    memset(&v9, 0, 0x20u);
    v9 = 32;
    v10 = WmiMonitorBrightnessEvent_GUID[0];
    v11 = WmiMonitorBrightnessEvent_GUID[1];
    v12 = WmiMonitorBrightnessEvent_GUID[2];
    v13 = WmiMonitorBrightnessEvent_GUID[3];
    memset(&v3, 0, 0x20u);
    v4 = &v9;
    v14 = 1;
    v3 = 32;
    v5 = 1;
    v1 = dword_1368C(WdfDriverGlobals, v6, &v3, 0, &v7);
    if ( v1 >= 0 )
    {
      *(_DWORD *)(v8 + 12) = v7;
    }
    else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
           && WPP_GLOBAL_Control->Characteristics & 1
           && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
    {
      WPP_SF_d(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        28,
        (int)dword_12288,
        v1);
    }
  }
  return v1;
}
// 12148: using guessed type int WmiMonitorBrightnessEvent_GUID[4];
// 12288: using guessed type int dword_12288[4];
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);
// 1368C: using guessed type int (__stdcall *dword_1368C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (000163A0) --------------------------------------------------------
signed int __stdcall EvtWmiBrightnessQueryBlock(int a1, unsigned int a2, int a3, int a4)
{
  int v4; // eax@1
  int v5; // edi@1
  int v6; // eax@1
  int v7; // esi@1
  unsigned __int8 v8; // al@2
  unsigned int v9; // eax@3
  signed int result; // eax@4
  int (__stdcall *v11)(_DWORD, _DWORD); // eax@5
  int v12; // eax@8

  v4 = dword_13698(WdfDriverGlobals, a1);
  v5 = v4;
  v6 = dword_133E0(WdfDriverGlobals, v4, off_1300C);
  v7 = v6;
  if ( *(_DWORD *)(v6 + 320) && (v8 = *(_BYTE *)(v6 + 140)) != 0 )
  {
    v9 = v8 + 11;
    *(_DWORD *)a4 = v9;
    if ( a2 >= v9 )
    {
      BrightnessTargetPercentageToPossible(v5, *(_BYTE *)(v7 + 16), (int)&a1);
      v11 = *(int (__stdcall **)(_DWORD, _DWORD))(v7 + 324);
      if ( v11 )
      {
        if ( v11(*(_DWORD *)(v7 + 304), &a1) >= 0 )
        {
          *(_BYTE *)(v7 + 16) = BrightnessTargetToPercentage(v5, a1);
        }
      }
      v12 = a3;
      *(_BYTE *)a3 = a1;
      *(_DWORD *)(v12 + 4) = *(_BYTE *)(v7 + 140);
      memcpy((void *)(v12 + 8), (const void *)(v7 + 141), *(_BYTE *)(v7 + 140));
      result = 0;
    }
    else
    {
      result = -1073741789;
    }
  }
  else
  {
    result = -1073741275;
  }
  return result;
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);
// 13698: using guessed type int (__stdcall *dword_13698)(_DWORD, _DWORD);

//----- (00016472) --------------------------------------------------------
signed int __stdcall EvtWmiBrightnessExecuteMethod(int a1, int a2, unsigned int a3, int a4, int a5, int a6)
{
  int v7; // eax@10
  int v8; // eax@13
  int v9; // eax@17

  if ( a6 )
  {
    *(_DWORD *)a6 = 0;
  }
  if ( a2 == 1 )
  {
    if ( a5 && a3 >= 5 )
    {
      v9 = dword_13698(WdfDriverGlobals, a1);
      return SetBrightnessOverride(v9, *(_DWORD *)a5, 0, *(_BYTE *)(a5 + 4));
    }
  }
  else
  {
    if ( a2 == 2 )
    {
      return 0;
    }
    if ( a2 == 3 )
    {
      if ( a5 && a3 >= 1 )
      {
        v8 = dword_13698(WdfDriverGlobals, a1);
        return SetALSBrightnessState(v8, *(_BYTE *)a5);
      }
    }
    else
    {
      if ( a2 != 4 )
      {
        return -1073741161;
      }
      if ( a5 && a3 >= 1 )
      {
        v7 = dword_13698(WdfDriverGlobals, a1);
        return SetALSBrightness(v7, *(_BYTE *)a5);
      }
    }
  }
  return -1073741811;
}
// 13698: using guessed type int (__stdcall *dword_13698)(_DWORD, _DWORD);

//----- (0001652C) --------------------------------------------------------
int __stdcall WmiFireBrightnessEvent(int a1)
{
  int v1; // esi@1
  int v2; // esi@1
  int result; // eax@2
  int var1; // [sp+7h] [bp-1h]@1

  v1 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  BrightnessTargetPercentageToPossible(a1, *(_BYTE *)(v1 + 16), (int)&var1);
  v2 = *(_DWORD *)(v1 + 12);
  if ( v2 )
  {
    result = dword_136A0(WdfDriverGlobals, v2, 1, &var1);
  }
  else
  {
    result = 0;
  }
  return result;
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);
// 136A0: using guessed type int (__stdcall *dword_136A0)(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00016584) --------------------------------------------------------
size_t __stdcall EvtWmiMonitorDescriptorMethods(int a1, int a2, int a3, size_t a4, void *a5, int a6)
{
  size_t result; // eax@2
  int v7; // esi@3
  size_t v8; // ST1C_4@3
  void *v9; // edi@3
  void *v10; // ST14_4@3
  size_t v11; // esi@3
  PVOID v12; // eax@9
  PVOID v13; // ebx@9
  char v14; // [sp+Fh] [bp+Fh]@3

  if ( a2 == 1 )
  {
    v7 = a6;
    v8 = a4;
    v9 = a5;
    v10 = a5;
    v14 = *(_BYTE *)a5;
    *(_DWORD *)a6 = 129;
    memset(v10, 0, v8);
    v11 = *(_DWORD *)v7;
    if ( a4 >= v11 )
    {
      a4 = dword_13698(WdfDriverGlobals, a1);
      v12 = ExAllocatePoolWithTag(PagedPool, 0x88u, 0x45306E4Du);
      v13 = v12;
      if ( v12 )
      {
        *(_BYTE *)v12 = v14;
        a4 = WmiCallPhysicalDevice(a4, 0x232417u, 0x88u, v12, 0x88u, v12, (int)&a4);
        if ( (a4 & 0x80000000) == 0 )
        {
          qmemcpy(v9, (char *)v13 + 1, 0x81u);
        }
        ExFreePoolWithTag(v13, 0);
        result = a4;
      }
      else
      {
        if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && WPP_GLOBAL_Control->Characteristics & 1
          && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        {
          WPP_SF_(
            (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
            (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
            33,
            (int)dword_12288);
        }
        result = -1073741801;
      }
    }
    else
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      {
        WPP_SF_dd(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          32,
          (int)dword_12288,
          a4,
          v11);
      }
      result = -1073741789;
    }
  }
  else
  {
    *(_DWORD *)a6 = 0;
    result = -1073741161;
  }
  return result;
}
// 12288: using guessed type int dword_12288[4];
// 13698: using guessed type int (__stdcall *dword_13698)(_DWORD, _DWORD);

//----- (0001669E) --------------------------------------------------------
NTSTATUS __stdcall EvtWmiMonitorIDQueryBlock(int a1, int a2, int a3, int a4)
{
  int v4; // eax@1
  NTSTATUS result; // eax@1
  int InputBuffer; // [sp+4h] [bp-8h]@1
  int v7; // [sp+8h] [bp-4h]@1

  v4 = dword_13698(WdfDriverGlobals, a1);
  InputBuffer = a2;
  v7 = a3;
  result = WmiCallPhysicalDevice(v4, 0x23241Bu, 8u, &InputBuffer, 8u, &InputBuffer, (int)&a1);
  *(_DWORD *)a4 = InputBuffer;
  return result;
}
// 13698: using guessed type int (__stdcall *dword_13698)(_DWORD, _DWORD);

//----- (000166F4) --------------------------------------------------------
NTSTATUS __stdcall EvtWmiMonitorBasicDisplayParamsQueryBlock(int a1, int a2, int a3, int a4)
{
  int v4; // eax@1
  NTSTATUS result; // eax@1
  int InputBuffer; // [sp+4h] [bp-8h]@1
  int v7; // [sp+8h] [bp-4h]@1

  v4 = dword_13698(WdfDriverGlobals, a1);
  InputBuffer = a2;
  v7 = a3;
  result = WmiCallPhysicalDevice(v4, 0x232423u, 8u, &InputBuffer, 8u, &InputBuffer, (int)&a1);
  *(_DWORD *)a4 = InputBuffer;
  return result;
}
// 13698: using guessed type int (__stdcall *dword_13698)(_DWORD, _DWORD);

//----- (0001674A) --------------------------------------------------------
NTSTATUS __stdcall EvtWmiMonitorAnalogVideoInputParamsQueryBlock(int a1, int a2, int a3, int a4)
{
  int v4; // eax@1
  NTSTATUS result; // eax@1
  int InputBuffer; // [sp+4h] [bp-8h]@1
  int v7; // [sp+8h] [bp-4h]@1

  v4 = dword_13698(WdfDriverGlobals, a1);
  InputBuffer = a2;
  v7 = a3;
  result = WmiCallPhysicalDevice(v4, 0x232427u, 8u, &InputBuffer, 8u, &InputBuffer, (int)&a1);
  *(_DWORD *)a4 = InputBuffer;
  return result;
}
// 13698: using guessed type int (__stdcall *dword_13698)(_DWORD, _DWORD);

//----- (000167A0) --------------------------------------------------------
NTSTATUS __stdcall EvtWmiMonitorDigitalVideoInputParamsQueryBlock(int a1, int a2, int a3, int a4)
{
  int v4; // eax@1
  NTSTATUS result; // eax@1
  int InputBuffer; // [sp+4h] [bp-8h]@1
  int v7; // [sp+8h] [bp-4h]@1

  v4 = dword_13698(WdfDriverGlobals, a1);
  InputBuffer = a2;
  v7 = a3;
  result = WmiCallPhysicalDevice(v4, 0x23242Bu, 8u, &InputBuffer, 8u, &InputBuffer, (int)&a1);
  *(_DWORD *)a4 = InputBuffer;
  return result;
}
// 13698: using guessed type int (__stdcall *dword_13698)(_DWORD, _DWORD);

//----- (000167F6) --------------------------------------------------------
NTSTATUS __stdcall EvtWmiMonitorColorCharacteristicsQueryBlock(int a1, int a2, int a3, int a4)
{
  int v4; // eax@1
  NTSTATUS result; // eax@1
  int InputBuffer; // [sp+4h] [bp-8h]@1
  int v7; // [sp+8h] [bp-4h]@1

  v4 = dword_13698(WdfDriverGlobals, a1);
  InputBuffer = a2;
  v7 = a3;
  result = WmiCallPhysicalDevice(v4, 0x23241Fu, 8u, &InputBuffer, 8u, &InputBuffer, (int)&a1);
  *(_DWORD *)a4 = InputBuffer;
  return result;
}
// 13698: using guessed type int (__stdcall *dword_13698)(_DWORD, _DWORD);

//----- (0001684C) --------------------------------------------------------
NTSTATUS __stdcall EvtWmiMonitorSupportedSourceModesQueryBlock(int a1, int a2, int a3, int a4)
{
  int v4; // eax@1
  NTSTATUS result; // eax@1
  int InputBuffer; // [sp+4h] [bp-8h]@1
  int v7; // [sp+8h] [bp-4h]@1

  v4 = dword_13698(WdfDriverGlobals, a1);
  InputBuffer = a2;
  v7 = a3;
  result = WmiCallPhysicalDevice(v4, 0x23240Fu, 8u, &InputBuffer, 8u, &InputBuffer, (int)&a1);
  *(_DWORD *)a4 = InputBuffer;
  return result;
}
// 13698: using guessed type int (__stdcall *dword_13698)(_DWORD, _DWORD);

//----- (000168A2) --------------------------------------------------------
signed int __stdcall EvtWmiMonitorConnectionParamsQueryBlock(int a1, unsigned int a2, int a3, int a4)
{
  int v4; // eax@1
  int v5; // eax@1
  signed int result; // eax@2

  v4 = dword_13698(WdfDriverGlobals, a1);
  v5 = *(_DWORD *)(dword_133E0(WdfDriverGlobals, v4, off_1300C) + 340);
  *(_DWORD *)a4 = 4;
  if ( a2 >= 4 )
  {
    *(_DWORD *)a3 = v5;
    result = 0;
  }
  else
  {
    result = -1073741789;
  }
  return result;
}
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);
// 13698: using guessed type int (__stdcall *dword_13698)(_DWORD, _DWORD);

//----- (000168F4) --------------------------------------------------------
signed int __stdcall WmiRegisterDataBlocks(int a1)
{
  int v1; // eax@1
  unsigned __int8 v2; // al@2
  int v3; // eax@3
  int v4; // eax@10
  int v5; // eax@21
  int v6; // eax@30
  int v7; // eax@37
  int v8; // eax@48
  int v9; // eax@59
  signed int result; // eax@70
  int InputBuffer; // [sp+4h] [bp-Ch]@8
  int v12; // [sp+8h] [bp-8h]@8
  int v13; // [sp+Ch] [bp-4h]@8

  v1 = dword_133E0(WdfDriverGlobals, a1, off_1300C);
  if ( *(_DWORD *)(v1 + 320) )
  {
    v2 = *(_BYTE *)(v1 + 140);
    if ( v2 )
    {
      v3 = WmiRegisterDataBlock(a1, (int)WmiMonitorBrightness_GUID, v2 + 11, (int)EvtWmiBrightnessQueryBlock);
      if ( v3 < 0
        && (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 1u )
      {
        WPP_SF_d(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          12,
          (int)dword_12288,
          v3);
      }
    }
  }
  InputBuffer = 0;
  v12 = 0;
  if ( WmiCallPhysicalDevice(a1, 0x23241Bu, 8u, &InputBuffer, 8u, &InputBuffer, (int)&v13) == -2147483643 && InputBuffer )
  {
    v4 = WmiRegisterDataBlock(a1, (int)WmiMonitorID_GUID, InputBuffer, (int)EvtWmiMonitorIDQueryBlock);
    if ( v4 < 0
      && (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 1u )
    {
      WPP_SF_d(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        13,
        (int)dword_12288,
        v4);
    }
  }
  else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
         && WPP_GLOBAL_Control->Characteristics & 1
         && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
  {
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      14,
      (int)dword_12288);
  }
  InputBuffer = 0;
  v12 = 0;
  if ( WmiCallPhysicalDevice(a1, 0x232423u, 8u, &InputBuffer, 8u, &InputBuffer, (int)&v13) == -2147483643 && InputBuffer )
  {
    v5 = WmiRegisterDataBlock(
           a1,
           (int)WmiMonitorBasicDisplayParams_GUID,
           11,
           (int)EvtWmiMonitorBasicDisplayParamsQueryBlock);
    if ( v5 < 0
      && (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 1u )
    {
      WPP_SF_d(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        15,
        (int)dword_12288,
        v5);
    }
  }
  else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
         && WPP_GLOBAL_Control->Characteristics & 1
         && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
  {
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      16,
      (int)dword_12288);
  }
  v6 = WmiRegisterDataBlock(a1, (int)WmiMonitorConnectionParams_GUID, 4, (int)EvtWmiMonitorConnectionParamsQueryBlock);
  if ( v6 < 0
    && (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 1u )
  {
    WPP_SF_d(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      17,
      (int)dword_12288,
      v6);
  }
  InputBuffer = 0;
  v12 = 0;
  if ( WmiCallPhysicalDevice(a1, 0x232427u, 8u, &InputBuffer, 8u, &InputBuffer, (int)&v13) == -2147483643 && InputBuffer )
  {
    v7 = WmiRegisterDataBlock(
           a1,
           (int)WmiMonitorAnalogVideoInputParams_GUID,
           6,
           (int)EvtWmiMonitorAnalogVideoInputParamsQueryBlock);
    if ( v7 < 0
      && (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 1u )
    {
      WPP_SF_d(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        18,
        (int)dword_12288,
        v7);
    }
  }
  else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
         && WPP_GLOBAL_Control->Characteristics & 1
         && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
  {
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      19,
      (int)dword_12288);
  }
  InputBuffer = 0;
  v12 = 0;
  if ( WmiCallPhysicalDevice(a1, 0x23242Bu, 8u, &InputBuffer, 8u, &InputBuffer, (int)&v13) == -2147483643 && InputBuffer )
  {
    v8 = WmiRegisterDataBlock(
           a1,
           (int)WmiMonitorDigitalVideoInputParams_GUID,
           1,
           (int)EvtWmiMonitorDigitalVideoInputParamsQueryBlock);
    if ( v8 < 0
      && (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 1u )
    {
      WPP_SF_d(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        20,
        (int)dword_12288,
        v8);
    }
  }
  else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
         && WPP_GLOBAL_Control->Characteristics & 1
         && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
  {
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      21,
      (int)dword_12288);
  }
  InputBuffer = 0;
  v12 = 0;
  if ( WmiCallPhysicalDevice(a1, 0x23241Fu, 8u, &InputBuffer, 8u, &InputBuffer, (int)&v13) == -2147483643 && InputBuffer )
  {
    v9 = WmiRegisterDataBlock(
           a1,
           (int)WmiMonitorColorCharacteristics_GUID,
           16,
           (int)EvtWmiMonitorColorCharacteristicsQueryBlock);
    if ( v9 < 0
      && (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 1u )
    {
      WPP_SF_d(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        22,
        (int)dword_12288,
        v9);
    }
  }
  else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
         && WPP_GLOBAL_Control->Characteristics & 1
         && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
  {
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      23,
      (int)dword_12288);
  }
  InputBuffer = 0;
  v12 = 0;
  if ( WmiCallPhysicalDevice(a1, 0x23240Fu, 8u, &InputBuffer, 8u, &InputBuffer, (int)&v13) == -2147483643 && InputBuffer )
  {
    result = WmiRegisterDataBlock(
               a1,
               (int)WmiMonitorListedSupportedSourceModes_GUID,
               InputBuffer,
               (int)EvtWmiMonitorSupportedSourceModesQueryBlock);
    if ( result < 0 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 1u )
      {
        WPP_SF_d(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          24,
          (int)dword_12288,
          result);
      }
      result = -1071841275;
    }
  }
  else
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
    {
      WPP_SF_(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        25,
        (int)dword_12288);
    }
    result = 0;
  }
  return result;
}
// 12128: using guessed type int WmiMonitorBrightness_GUID[4];
// 12168: using guessed type int WmiMonitorID_GUID[4];
// 12178: using guessed type int WmiMonitorBasicDisplayParams_GUID[4];
// 12188: using guessed type int WmiMonitorConnectionParams_GUID[4];
// 12198: using guessed type int WmiMonitorAnalogVideoInputParams_GUID[4];
// 121A8: using guessed type int WmiMonitorDigitalVideoInputParams_GUID[4];
// 121B8: using guessed type int WmiMonitorColorCharacteristics_GUID[4];
// 121C8: using guessed type int WmiMonitorListedSupportedSourceModes_GUID[4];
// 12288: using guessed type int dword_12288[4];
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (00016D58) --------------------------------------------------------
int __stdcall WmiRegisterMethods(int a1)
{
  int v1; // esi@1
  int v2; // eax@2
  int v3; // esi@8

  v1 = a1;
  if ( *(_DWORD *)(dword_133E0(WdfDriverGlobals, a1, off_1300C) + 320) )
  {
    v2 = WmiRegisterMethod(v1, (int)WmiMonitorBrightnessMethods_GUID, 5, (int)EvtWmiBrightnessExecuteMethod);
    if ( v2 < 0
      && (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
    {
      WPP_SF_d(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        26,
        (int)dword_12288,
        v2);
    }
  }
  if ( WmiCallPhysicalDevice(v1, 0x232417u, 0, 0, 0, 0, (int)&a1) == -1073741789 )
  {
    v3 = WmiRegisterMethod(v1, (int)WmiMonitorDescriptorMethods_GUID, 129, (int)EvtWmiMonitorDescriptorMethods);
    if ( v3 < 0
      && (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
    {
      WPP_SF_d(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        27,
        (int)dword_12288,
        v3);
    }
  }
  else
  {
    v3 = 0;
  }
  return v3;
}
// 12138: using guessed type int WmiMonitorBrightnessMethods_GUID[4];
// 12158: using guessed type int WmiMonitorDescriptorMethods_GUID[4];
// 12288: using guessed type int dword_12288[4];
// 133E0: using guessed type int (__fastcall *dword_133E0)(_DWORD, _DWORD, _DWORD);

//----- (00016E34) --------------------------------------------------------
signed int __stdcall WmiInitialize(int a1)
{
  signed int result; // eax@1
  int v2; // [sp+Ch] [bp-24h]@1
  char *v3; // [sp+10h] [bp-20h]@1
  char v4; // [sp+14h] [bp-1Ch]@1
  wchar_t v5; // [sp+28h] [bp-8h]@1

  LOWORD(v2) = 20;
  qmemcpy(&v4, L"MonitorWMI", 0x14u);
  HIWORD(v2) = 22;
  v3 = &v4;
  v5 = aMonitorwmi[10];
  result = dword_1315C(WdfDriverGlobals, a1, &v2);
  if ( result >= 0 )
  {
    result = WmiRegisterDataBlocks(a1);
    if ( result >= 0 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
      {
        WPP_SF_(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          29,
          (int)dword_12288);
      }
      result = WmiRegisterMethods(a1);
      if ( result >= 0 )
      {
        if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && WPP_GLOBAL_Control->Characteristics & 1
          && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
        {
          WPP_SF_(
            (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
            (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
            30,
            (int)dword_12288);
        }
        result = WmiRegisterEvents(a1);
        if ( result >= 0 )
        {
          if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
            && WPP_GLOBAL_Control->Characteristics & 1
            && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
          {
            WPP_SF_(
              (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
              (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
              31,
              (int)dword_12288);
          }
          result = 0;
        }
      }
    }
  }
  return result;
}
// 12288: using guessed type int dword_12288[4];
// 1315C: using guessed type int (__stdcall *dword_1315C)(_DWORD, _DWORD, _DWORD);
// 170C8: using guessed type wchar_t aMonitorwmi[11];

//----- (00018006) --------------------------------------------------------
NTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath)
{
  NTSTATUS result; // eax@6
  NTSTATUS v3; // edi@7
  int v4; // eax@7
  int v5; // [sp+4h] [bp-18h]@7
  int (__stdcall *v6)(int, int); // [sp+8h] [bp-14h]@7
  NTSTATUS (__stdcall *v7)(int); // [sp+Ch] [bp-10h]@7
  int v8; // [sp+10h] [bp-Ch]@7
  int v9; // [sp+14h] [bp-8h]@7
  int v10; // [sp+18h] [bp-4h]@7

  WPP_INIT_CONTROL_ARRAY((int)&WPP_MAIN_CB);
  WppLoadTracingSupport();
  WPP_MAIN_CB.Timer = 0;
  WppInitKm((int)DriverObject, (int)RegistryPath);
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
  {
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      10,
      (int)dword_12258);
  }
  if ( G_FailDriverEntry )
  {
    result = -1073741823;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v5 = 20;
    v6 = EvtDriverDeviceAdd;
    v7 = EvtDriverUnload;
    v3 = dword_13288(WdfDriverGlobals, DriverObject, RegistryPath, 0, &v5, &v10);
    v4 = EtwInit();
    if ( v4 < 0
      && (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 3u )
    {
      WPP_SF_d(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        11,
        (int)dword_12258,
        v4);
    }
    result = v3;
  }
  return result;
}
// 12258: using guessed type int dword_12258[8];
// 1309C: using guessed type char G_FailDriverEntry;
// 13288: using guessed type int (__stdcall *dword_13288)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (000180E9) --------------------------------------------------------
void __cdecl __security_init_cookie()
{
  ULONG v0; // eax@1

  v0 = __security_cookie;
  if ( !__security_cookie || __security_cookie == -1153374642 )
  {
    v0 = (unsigned int)&__security_cookie ^ _KeTickCount.LowPart;
    __security_cookie = (unsigned int)&__security_cookie ^ _KeTickCount.LowPart;
    if ( &__security_cookie == (ULONG_PTR *)_KeTickCount.LowPart )
    {
      v0 = -1153374642;
      __security_cookie = -1153374642;
    }
  }
  __security_cookie_complement = ~v0;
}

// ALL OK, 82 function(s) have been successfully decompiled
