/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: Visual C++
*/

#include <windows.h>
#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int __stdcall WPP_SF_(int a1, int a2, int a3, int a4);
int __stdcall WPP_SF_Sq(int a1, int a2, int a3, int a4, int a5, char a6);
int __stdcall WPP_SF_Z(int a1, int a2, int a3, int a4, int a5);
int __stdcall WPP_SF_q(int a1, int a2, int a3, int a4, int a5);
int __stdcall WPP_SF_qD(int a1, int a2, int a3, int a4, int a5, char a6);
int __stdcall WPP_SF_qS(int a1, int a2, int a3, int a4, int a5, int a6);
int __stdcall WPP_SF_qZ(int a1, int a2, int a3, int a4, int a5, int a6);
int __stdcall WPP_SF_qqD(int a1, int a2, int a3, int a4, int a5, char a6, char a7);
char __stdcall IrClassDeviceSupportsInput(int a1);
NTSTATUS RtlStringCchPrintfW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszFormat, ...);
NTSTATUS __stdcall IrClassEvtFdoDestroy(int a1);
NTSTATUS __stdcall IrClassGetPortReferenceString(int a1, PDEVICE_OBJECT DeviceObject, wchar_t *pszDest, int a4);
signed int __stdcall IrClassBuildHidChildren(int a1, int a2, int a3);
int __stdcall IrClassTargetQueryRemove(int a1);
int __stdcall IrClassUsbIrEvtIoQueueStop(int a1, int a2, char a3);
int __stdcall IrClassEvtIoTargetCleanupCallback(int a1);
int __stdcall IrClassIrPortNotification(PVOID NotificationStructure, PVOID Context);
signed int __stdcall IrClassEvtDeviceAdd(int a1, int a2);
int __stdcall WPP_INIT_CONTROL_ARRAY(int a1);
NTSTATUS __cdecl W2kTraceMessage(int a1, int a2, int a3, int a4, char a5, void *a6);
int __stdcall WppClassicProviderCallback(int a1, char a2, int a3, int a4);
void __stdcall IrClassEvtDriverUnload(int a1);
int __stdcall DriverEntry(int, PCUNICODE_STRING SourceString); // idb
int __stdcall WPP_SF_dXd(int a1, int a2, int a3, int a4, int a5, char a6, int a7, char a8);
int __stdcall WPP_SF_dddd(int a1, int a2, int a3, int a4, int a5, char a6, char a7, char a8);
int __stdcall WPP_SF_dsd(int a1, int a2, int a3, int a4, int a5, int a6, char a7);
bool __stdcall IsStateValid(int a1);
int __stdcall NextState(int a1);
int __stdcall NextSubState(int a1);
int __stdcall GoToInitialState(int a1);
int __stdcall Clear(int a1);
size_t __stdcall SendIrCode(int a1);
int __stdcall BitPatternToString(int a1);
char __stdcall BitPatternToBit(int a1);
int __stdcall RecordBit(int a1, int a2);
int __stdcall EndKeypress(int a1);
int __stdcall RecordTime(int a1, int a2);
int __stdcall DecoderReset(int a1);
int __stdcall Keypress(int a1);
char __stdcall MatchFixedPattern(int a1, int a2, int a3, int a4, int a5);
int __stdcall MatchData(int a1, int *a2);
int __stdcall ProcessRLCPiece(int a1, int a2);
int __stdcall WPP_SF_S(int a1, int a2, int a3, int a4, int a5);
size_t __stdcall IrClassEnqueueHIDReport(int a1, void *a2, size_t a3);
int __stdcall IrClassDequeueHIDReport(int, void *, size_t); // idb
int __stdcall IrClassProcessRLCPiece(int a1, int a2);
int __stdcall IrClassEvtPdoDestroy(int a1);
void __stdcall IrClassEvtPdoRead(int a1, int a2, int NewIrql);
void __stdcall IrClassDecodeRlc(int a1, int NewIrql, int a3, int a4);
int __stdcall IrClassEvtPdoGenericComplete(int a1, int a2, int a3, int a4);
int __stdcall IrClassEvtPdoDeviceControl(int a1, int a2, int a3, int a4, int a5);
int __stdcall IrClassEvtPdoPingPongIoctlComplete(int a1, int a2, int a3, int a4);
int __stdcall IrClassResubmitPingPongIoctlRequest(int a1, int a2, int a3, int a4);
int __stdcall IrClassPingPongRequestResubmitWorker(int a1);
int __stdcall IrClassBackoffTimerFunc(int a1);
int __stdcall IrClassInitPDO(int, PVOID, int, int); // idb
int __stdcall IrClassEvtDeviceListCreatePdo(int a1, int a2, int a3);
int __stdcall IrClassEvtFdoCreate(int a1, int a2, unsigned int a3);
int __stdcall IrClassEvtFdoClose(int a1);
int __stdcall IrClassEvtFdoGenericComplete(int a1, int a2, int a3, int a4);
int __stdcall IrClassEvtFdoDeviceControl(int a1, int a2, int a3, int a4, char a5);
NTSTATUS __stdcall IrClassQueryDeviceKey(HANDLE KeyHandle, PCWSTR SourceString, int a3, int a4);
NTSTATUS __stdcall IrClassQueryKeyInfo(HANDLE KeyHandle, int a2);
NTSTATUS __stdcall IrClassEnumKeyInfo(HANDLE KeyHandle, __int16 a2, int a3);
char __stdcall IrClassCfgParseLongs(int a1, int a2, int a3);
bool __stdcall IrClassCfgGetLongArray(HANDLE KeyHandle, PCWSTR a2, int a3, int a4);
char __stdcall IrClassCfgValidatePatterns(int a1, int a2, unsigned int a3, int a4);
// NTSTATUS __userpurge IrClassCfgGetULong@<eax>(int a1@<ebp>, void *a2, const WCHAR *a3, int a4);
NTSTATUS __stdcall IrClassCfgSetULong(HANDLE KeyHandle, PCWSTR SourceString, char Data);
NTSTATUS __stdcall IrClassOpenGlobalParameters(int a1, PHANDLE KeyHandle);
NTSTATUS __stdcall IrClassReadGlobalParameters(int a1);
NTSTATUS __stdcall IrClassReadDecoderConfig(HANDLE KeyHandle, HANDLE a2, PVOID P);
// _DWORD __stdcall Free_Ptr(_DWORD); weak
void __stdcall IrClassCleanupDecoder(PVOID P);
int __stdcall IrClassCleanupDecoders(int a1);
NTSTATUS __stdcall IrClassReadAllDecoderConfigs(PVOID a1);
// void *__cdecl memset(void *, int, size_t);
// void *__cdecl memcpy(void *, const void *, size_t);
NTSTATUS __stdcall RtlStringValidateDestW(STRSAFE_PCNZWCH pszDest, size_t cchDest, const size_t cchMax);
NTSTATUS __stdcall RtlStringVPrintfWorkerW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszFormat, va_list argList);
int __cdecl _vsnwprintf_l(wchar_t *DstBuf, size_t MaxCount, const wchar_t *Format, _locale_t Locale, va_list ArgList);
// int __cdecl _vsnwprintf(wchar_t *, size_t, const wchar_t *, va_list);
// int __cdecl _flsbuf(int, FILE *);
int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
// void __usercall sub_166BA(int a1@<edi>, int a2@<esi>, wchar_t a3);
// void __usercall sub_166F4(int a1@<eax>, wchar_t a2, int a3, int a4);
// void __usercall sub_16726(int a1@<eax>, wchar_t *a2@<edx>, int a3@<ecx>, int a4);
int __cdecl _woutput_l(int a1, wchar_t *a2, int a3, int a4);
// int __cdecl _get_printf_count_output();
wint_t __cdecl _fputwc_nolock(wchar_t Ch, FILE *File);
int __cdecl mbtowc(int, CHAR AnsiChar, int); // idb
// _DWORD __cdecl _flswbuf(_DWORD, _DWORD); weak
// WCHAR __stdcall RtlAnsiCharToUnicodeChar(CHAR AnsiChar);
void __stdcall FxStubDriverUnloadCommon(); // idb
void __stdcall FxStubDriverUnload(int a1);
void __stdcall FxStubDriverMiniportUnload(int a1, int a2);
int __stdcall FxDriverEntryWorker(int, PCUNICODE_STRING SourceString); // idb
int __stdcall FxStubBindClasses(struct _WDF_BIND_INFO *a1);
void __stdcall FxStubUnbindClasses(struct _WDF_BIND_INFO *); // idb
void __stdcall FxStubInitTypes(); // idb
// int __stdcall WdfVersionUnbind(_DWORD, _DWORD, _DWORD); weak
// int __stdcall WdfVersionBind(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall WdfVersionBindClass(_DWORD, _DWORD, _DWORD); weak
// int __stdcall WdfVersionUnbindClass(_DWORD, _DWORD, _DWORD); weak
// KIRQL __fastcall KfAcquireSpinLock(PKSPIN_LOCK SpinLock);
// void __fastcall KfReleaseSpinLock(PKSPIN_LOCK SpinLock, KIRQL NewIrql);
// NTSTATUS __stdcall IoOpenDeviceRegistryKey(PDEVICE_OBJECT DeviceObject, ULONG DevInstKeyType, ACCESS_MASK DesiredAccess, PHANDLE DevInstRegKey);
// LONG __stdcall RtlCompareUnicodeString(PCUNICODE_STRING String1, PCUNICODE_STRING String2, BOOLEAN CaseInSensitive);
// void __stdcall RtlInitUnicodeString(PUNICODE_STRING DestinationString, PCWSTR SourceString);
// LONG_PTR __fastcall ObfDereferenceObject(PVOID Object);
// PDEVICE_OBJECT __stdcall IoGetAttachedDeviceReference(PDEVICE_OBJECT DeviceObject);
// void __stdcall RtlCopyUnicodeString(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString);
// NTSTATUS __stdcall IoRegisterPlugPlayNotification(IO_NOTIFICATION_EVENT_CATEGORY EventCategory, ULONG EventCategoryFlags, PVOID EventCategoryData, PDRIVER_OBJECT DriverObject, PDRIVER_NOTIFICATION_CALLBACK_ROUTINE CallbackRoutine, PVOID Context, PVOID *NotificationEntry);
// NTSTATUS __stdcall IoWMIWriteEvent(PVOID WnodeEventItem);
// PVOID __stdcall MmGetSystemRoutineAddress(PUNICODE_STRING SystemRoutineName);
// SIZE_T __stdcall RtlCompareMemory(const void *Source1, const void *Source2, SIZE_T Length);
// NTSTATUS __stdcall IoWMIRegistrationControl(PDEVICE_OBJECT DeviceObject, ULONG Action);
// NTSTATUS __stdcall ZwQueryValueKey(HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);
// void __stdcall KeInitializeSpinLock(PKSPIN_LOCK SpinLock);
// LONG __fastcall InterlockedDecrement(volatile LONG *Addend);
// NTSTATUS __stdcall ZwQueryKey(HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);
// NTSTATUS __stdcall ZwEnumerateKey(HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);
// int __cdecl _isdigit(int);
// __int32 __cdecl _atol(const char *);
// void __stdcall RtlFreeAnsiString(PANSI_STRING AnsiString);
// NTSTATUS __stdcall RtlUnicodeStringToAnsiString(PANSI_STRING DestinationString, PCUNICODE_STRING SourceString, BOOLEAN AllocateDestinationString);
// NTSTATUS __stdcall ZwOpenKey(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
// NTSTATUS __stdcall RtlAppendUnicodeToString(PUNICODE_STRING Destination, PCWSTR Source);
// int __cdecl __wcsicmp(const wchar_t *, const wchar_t *);
// LONG __fastcall InterlockedIncrement(volatile LONG *Addend);
// NTSTATUS __stdcall ZwClose(HANDLE Handle);
// NTSTATUS __stdcall ZwSetValueKey(HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID Data, ULONG DataSize);
// PVOID __stdcall ExAllocatePoolWithTag(POOL_TYPE PoolType, SIZE_T NumberOfBytes, ULONG Tag);
// void __stdcall ExFreePool(PVOID P);
// NTSTATUS __stdcall IoUnregisterPlugPlayNotification(PVOID NotificationEntry);
int __stdcall WppLoadTracingSupport();
int __stdcall WppTraceCallback(int, int, size_t, void *, int, int); // idb
void __stdcall WppCleanupKm(int a1);
NTSTATUS __stdcall WppInitKm(int a1, int a2);
void __cdecl __security_init_cookie();

//-------------------------------------------------------------------------
// Data declarations

__int16 word_174E6 = 5; // weak
int dword_17534 = 0; // weak
// extern int InitSafeBootMode; weak
// extern volatile KSYSTEM_TIME _KeTickCount;
GUID GUID_DEVICE_INTERFACE_ARRIVAL = { 3409592324u, 18160u, 4560u, { 176u, 143u, 0u, 96u, 151u, 19u, 5u, 63u } };
GUID GUID_DEVICE_INTERFACE_REMOVAL = { 3409592325u, 18160u, 4560u, { 176u, 143u, 0u, 96u, 151u, 19u, 5u, 63u } };
GUID GUID_BUS_TYPE_IRDA = { 2061598145u, 51524u, 17622u, { 136u, 31u, 76u, 46u, 97u, 5u, 59u, 193u } };
GUID GUID_DEVINTERFACE_IRPORT = { 105876610u, 30642u, 17502u, { 184u, 93u, 196u, 226u, 15u, 148u, 47u, 225u } };
GUID GUID_DEVINTERFACE_IRBUS = { 2035382061u, 52560u, 18871u, { 177u, 3u, 43u, 170u, 196u, 148u, 252u, 87u } };
int WPP_ThisDir_CTLGUID_IRCLASSTRACE[4] = { 1714403847, 1245233813, 1408986299, 1157422488 }; // weak
int dword_181D4[4] = { 2116403773, 2928504174, 1456591384, 3793625060 }; // weak
int dword_181E4[4] = { 2669701995, 2816484188, 2140026926, 4091679275 }; // weak
int dword_181F4[4] = { 3030759852, 3189151407, 1905628023, 2110532174 }; // weak
int dword_18204[4] = { 1513827900, 1112686273, 3651476948, 1879755192 }; // weak
int dword_18214[4] = { 2267925926, 273988509, 3260288942, 1846299813 }; // weak
int dword_18224[3] = { 78917313, 985158260, 3437932604 }; // weak
char byte_18230[] = { 'h' }; // weak
char __lookuptable[] = { '\x06' }; // weak
_DWORD off_1900C = 102400; // idb
_DWORD off_19020 = 102420; // idb
_DWORD off_19034 = 102440; // idb
_DWORD off_19048 = 102460; // idb
_DWORD off_1905C = 102480; // idb
_DWORD off_19070 = 102500; // idb
_DWORD off_19084 = 102520; // idb
PDEVICE_OBJECT WPP_GLOBAL_Control = &WPP_GLOBAL_Control; // idb
ULONG_PTR __security_cookie = 3141592654u; // idb
ULONG_PTR __security_cookie_complement = 1153374641u; // idb
char *__nullstring = "(null)"; // weak
wchar_t *__wnullstring = L"(null)"; // weak
int __mb_cur_max = 1; // idb
int dword_190BC = 32; // weak
_UNKNOWN __KMDF_CLASS_BIND_START; // weak
void *__KMDF_CLASS_BIND_END = NULL; // weak
struct _MARKER_TYPE *off_190EC = &__KMDF_CLASS_BIND_START; // weak
void *__KMDF_TYPE_INIT_END = NULL; // weak
int (__stdcall *pfnWppQueryTraceInformation)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__fastcall *pfnEtwUnregister)(_DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *pfnEtwRegisterClassicProvider)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *pfnWppGetVersion)(_DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int WPPTraceSuite = 0; // weak
int (__stdcall *dword_19124)(_DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_19144)(_DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_19148)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_19154)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_19158)(_DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_1915C)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_19164)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_19168)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_1919C)(_DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_191A4)(_DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_19214)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19228)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_1923C)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_1924C)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19254)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19258)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_1926C)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19270)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19274)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19290)(_DWORD, _DWORD); // weak
int (__stdcall *dword_192F0)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_192F8)(_DWORD, _DWORD); // weak
int (__stdcall *dword_19304)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19328)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19330)(_DWORD, _DWORD); // weak
int (__stdcall *dword_19344)(_DWORD, _DWORD); // weak
int (__stdcall *dword_19380)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19394)(_DWORD, _DWORD); // weak
int (__stdcall *dword_19398)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_193B0)(_DWORD, _DWORD); // weak
int (__fastcall *dword_193BC)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_193C0)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_193C4)(_DWORD, _DWORD); // weak
int (__stdcall *dword_193D4)(_DWORD, _DWORD); // weak
int (__stdcall *dword_193E8)(_DWORD, _DWORD); // weak
int (__stdcall *dword_193EC)(_DWORD, _DWORD); // weak
int (__stdcall *dword_193F0)(_DWORD, _DWORD); // weak
int (__stdcall *dword_193F4)(_DWORD, _DWORD); // weak
int (__stdcall *dword_19408)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_1940C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19424)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int dword_19444; // weak
int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19454)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19458)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19460)(_DWORD, _DWORD); // weak
int (__stdcall *dword_19470)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19474)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19478)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_1947C)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_194FC)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19504)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_1950C)(_DWORD, _DWORD); // weak
int (__stdcall *dword_19514)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19518)(_DWORD, _DWORD); // weak
int (__stdcall *dword_19530)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_1953C)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19544)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19558)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19574)(_DWORD, _DWORD); // weak
int (__stdcall *dword_19584)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_1958C)(_DWORD, _DWORD); // weak
int (__stdcall *dword_19590)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19594)(_DWORD, _DWORD); // weak
int (__stdcall *dword_19600)(_DWORD, _DWORD, _DWORD); // weak
int (__fastcall *dword_19604)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19608)(_DWORD, _DWORD); // weak
int (__stdcall *dword_19618)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_1961C)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_1970C)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *dword_19710)(_DWORD, _DWORD); // weak
UNICODE_STRING DestinationString; // idb
int (__stdcall *dword_1975C)(_DWORD); // weak
int dword_19760; // weak
_DWORD WdfDriverGlobals; // idb
int dword_19768; // weak
int dword_19770[130]; // weak
UNICODE_STRING IrClassRegistryPath; // idb
struct _DEVICE_OBJECT WPP_MAIN_CB; // idb
int dword_19998[6]; // weak
int errno;


//----- (00011006) --------------------------------------------------------
int __stdcall WPP_SF_(int a1, int a2, int a3, int a4)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, 0);
}
// 19104: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (0001102E) --------------------------------------------------------
int __stdcall WPP_SF_Sq(int a1, int a2, int a3, int a4, int a5, char a6)
{
  int v6; // edx@1

  v6 = a5;
  if ( a5 )
  {
    if ( !*(_WORD *)a5 )
      v6 = (int)L"<NULL>";
  }
  else
  {
    v6 = (int)L"NULL";
  }
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, v6);
}
// 174CE: using guessed type wchar_t aNull_0[5];
// 174D8: using guessed type wchar_t aNull[7];
// 19104: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (000110A2) --------------------------------------------------------
int __stdcall WPP_SF_Z(int a1, int a2, int a3, int a4, int a5)
{
  __int16 *v5; // eax@1
  int v6; // esi@3

  v5 = (__int16 *)a5;
  if ( a5 && *(_DWORD *)(a5 + 4) )
    v6 = *(_WORD *)a5;
  if ( a5 )
    *(_DWORD *)(a5 + 4);
  if ( !a5 || !*(_WORD *)a5 )
    v5 = &word_174E6;
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, v5);
}
// 174E6: using guessed type __int16 word_174E6;
// 19104: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00011104) --------------------------------------------------------
int __stdcall WPP_SF_q(int a1, int a2, int a3, int a4, int a5)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 19104: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00011132) --------------------------------------------------------
int __stdcall WPP_SF_qD(int a1, int a2, int a3, int a4, int a5, char a6)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 19104: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00011166) --------------------------------------------------------
int __stdcall WPP_SF_qS(int a1, int a2, int a3, int a4, int a5, int a6)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 19104: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (000111DA) --------------------------------------------------------
int __stdcall WPP_SF_qZ(int a1, int a2, int a3, int a4, int a5, int a6)
{
  int v6; // esi@3

  if ( a6 && *(_DWORD *)(a6 + 4) )
    v6 = *(_WORD *)a6;
  if ( a6 )
    *(_DWORD *)(a6 + 4);
  if ( a6 )
    *(_WORD *)a6;
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 19104: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00011242) --------------------------------------------------------
int __stdcall WPP_SF_qqD(int a1, int a2, int a3, int a4, int a5, char a6, char a7)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 19104: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (0001127C) --------------------------------------------------------
char __stdcall IrClassDeviceSupportsInput(int a1)
{
  char result; // al@1

  result = 1;
  if ( *(_DWORD *)(a1 + 24) == 512 && (!*(_DWORD *)(a1 + 32) || *(_DWORD *)(a1 + 40) & 0x500) )
    result = 0;
  return result;
}

//----- (000112AA) --------------------------------------------------------
NTSTATUS RtlStringCchPrintfW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszFormat, ...)
{
  NTSTATUS result; // eax@1

  result = RtlStringValidateDestW(pszDest, cchDest, 0x7FFFFFFFu);
  if ( result >= 0 )
    result = RtlStringVPrintfWorkerW(pszDest, cchDest, 0, (va_list)pszFormat);
  return result;
}

//----- (000112DE) --------------------------------------------------------
NTSTATUS __stdcall IrClassEvtFdoDestroy(int a1)
{
  NTSTATUS result; // eax@5

  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      18,
      (int)dword_181D4);
  result = *(_DWORD *)(dword_19448(WdfDriverGlobals, a1, off_19020) + 12);
  if ( result )
    result = IoUnregisterPlugPlayNotification((PVOID)result);
  return result;
}
// 181D4: using guessed type int dword_181D4[4];
// 19020: using guessed type int *off_19020;
// 19448: using guessed type int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD);

//----- (0001133A) --------------------------------------------------------
NTSTATUS __stdcall IrClassGetPortReferenceString(int a1, PDEVICE_OBJECT DeviceObject, wchar_t *pszDest, int a4)
{
  NTSTATUS v4; // esi@1
  NTSTATUS result; // eax@6
  int v6; // eax@7
  int v7; // edi@7
  LONG v8; // eax@8
  int v9; // ebx@31
  PVOID v10; // edi@39
  int v11; // esi@45
  int v12; // eax@51
  UNICODE_STRING ValueName; // [sp+8h] [bp-14h]@1
  HANDLE Handle; // [sp+10h] [bp-Ch]@18
  ULONG ResultLength; // [sp+14h] [bp-8h]@7
  HANDLE DevInstRegKey; // [sp+18h] [bp-4h]@1
  int DeviceObjecta; // [sp+28h] [bp+Ch]@18

  ValueName.Length = 38;
  ValueName.MaximumLength = 40;
  ValueName.Buffer = L"PortReferenceString";
  v4 = IoOpenDeviceRegistryKey(DeviceObject, 1u, 0xF003Fu, &DevInstRegKey);
  if ( v4 < 0 )
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_qD(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        35,
        (int)dword_181D4,
        (int)DeviceObject,
        v4);
    return v4;
  }
  v6 = ZwQueryValueKey(DevInstRegKey, &ValueName, KeyValuePartialInformation, 0, 0, &ResultLength);
  v7 = v6;
  if ( v6 == -1073741772 )
  {
    v8 = InterlockedIncrement((volatile LONG *)(a1 + 560));
    v7 = RtlStringCchPrintfW(pszDest, (unsigned int)a4 >> 1, L"PORT%d", v8);
    if ( v7 < 0 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          36,
          (int)dword_181D4,
          v7);
      ZwClose(DevInstRegKey);
      return v7;
    }
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
      WPP_SF_Sq(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        37,
        (int)dword_181D4,
        (int)pszDest,
        (char)DeviceObject);
    DeviceObjecta = IrClassOpenGlobalParameters(a1, &Handle);
    if ( DeviceObjecta < 0 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          38,
          (int)dword_181D4,
          DeviceObjecta);
      ZwClose(DevInstRegKey);
      return DeviceObjecta;
    }
    DeviceObjecta = IrClassCfgSetULong(Handle, L"PortCount", *(_DWORD *)(a1 + 560));
    ZwClose(Handle);
    if ( DeviceObjecta < 0 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          39,
          (int)dword_181D4,
          DeviceObjecta);
      ZwClose(DevInstRegKey);
      return DeviceObjecta;
    }
    v9 = ZwSetValueKey(DevInstRegKey, &ValueName, 0, 1u, pszDest, 2 * wcslen(pszDest));
    ZwClose(DevInstRegKey);
    if ( v9 >= 0 )
    {
      result = 0;
    }
    else
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          40,
          (int)dword_181D4,
          v9);
      result = v9;
    }
  }
  else if ( v6 == -1073741789 )
  {
    v10 = ExAllocatePoolWithTag(0, ResultLength, 0x494B7249u);
    if ( v10 )
    {
      v11 = ZwQueryValueKey(DevInstRegKey, &ValueName, KeyValuePartialInformation, v10, ResultLength, &ResultLength);
      if ( v11 >= 0 )
      {
        v12 = *((_DWORD *)v10 + 2);
        if ( v12 > (unsigned int)a4 )
          v12 = a4;
        memcpy(pszDest, (char *)v10 + 12, v12);
        if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && WPP_GLOBAL_Control->Characteristics & 1
          && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
          WPP_SF_qS(
            (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
            (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
            43,
            (int)dword_181D4,
            (int)DeviceObject,
            (int)pszDest);
        v11 = 0;
      }
      else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
             && WPP_GLOBAL_Control->Characteristics & 1
             && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      {
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          42,
          (int)dword_181D4,
          v11);
      }
      ZwClose(DevInstRegKey);
      ExFreePool(v10);
      result = v11;
    }
    else
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          41,
          (int)dword_181D4);
      ZwClose(DevInstRegKey);
      result = -1073741670;
    }
  }
  else
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        44,
        (int)dword_181D4,
        v6);
    result = -1073741823;
    if ( v7 < 0 )
      return v7;
  }
  return result;
}
// 1750C: using guessed type wchar_t aPortreferences[20];
// 181D4: using guessed type int dword_181D4[4];

//----- (000116BA) --------------------------------------------------------
signed int __stdcall IrClassBuildHidChildren(int a1, int a2, int a3)
{
  int v3; // eax@1
  int v4; // edi@1
  SIZE_T v5; // esi@1
  PVOID v6; // eax@1
  unsigned int v8; // eax@7
  PVOID v9; // esi@7
  PVOID v10; // eax@7
  PVOID v11; // eax@13
  void *v12; // ebx@13
  PVOID v13; // esi@19
  PVOID v14; // edi@19
  int v15; // eax@19
  int v16; // [sp+Ch] [bp-20h]@19
  PVOID v17; // [sp+10h] [bp-1Ch]@19
  PVOID v18; // [sp+14h] [bp-18h]@19
  PVOID v19; // [sp+18h] [bp-14h]@19
  int v20; // [sp+1Ch] [bp-10h]@19
  int v21; // [sp+20h] [bp-Ch]@19
  PVOID v22; // [sp+24h] [bp-8h]@7
  PVOID P; // [sp+28h] [bp-4h]@1
  int v24; // [sp+3Ch] [bp+10h]@19

  v3 = dword_19448(WdfDriverGlobals, a3, off_19034);
  v4 = v3;
  v5 = *(_WORD *)(v3 + 16) + 2;
  v6 = ExAllocatePoolWithTag(0, v5, 0x49497249u);
  P = v6;
  if ( !v6 )
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        45,
        (int)dword_181D4);
    return -1073741670;
  }
  memcpy(v6, *(const void **)(v4 + 20), *(_WORD *)(v4 + 16));
  v8 = v5 - 1;
  v9 = P;
  *((_WORD *)P + (v8 >> 1)) = 0;
  v10 = ExAllocatePoolWithTag(0, 0x2Cu, 0x49437249u);
  v22 = v10;
  if ( !v10 )
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        46,
        (int)dword_181D4);
    ExFreePool(v9);
    return -1073741670;
  }
  qmemcpy(v10, L"CIRCLASS\\IrDeviceV2", 0x2Cu);
  v11 = ExAllocatePoolWithTag(0, 6u, 0x49437249u);
  v12 = v11;
  if ( !v11 )
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        47,
        (int)dword_181D4);
    ExFreePool(v22);
    ExFreePool(P);
    return -1073741670;
  }
  *(_DWORD *)v11 = 0;
  *((_WORD *)v11 + 2) = *((_WORD *)&dword_17534 + 2);
  v13 = v22;
  v14 = P;
  v20 = a3;
  v16 = 24;
  v17 = P;
  v18 = v22;
  v19 = v11;
  v21 = a2;
  v15 = dword_19330(WdfDriverGlobals, a1);
  v24 = dword_19144(WdfDriverGlobals, v15, &v16, 0);
  if ( v24 < 0 )
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        48,
        (int)dword_181D4,
        v24);
    ExFreePool(v13);
    ExFreePool(v14);
    ExFreePool(v12);
  }
  return v24;
}
// 17534: using guessed type int dword_17534;
// 1753A: using guessed type wchar_t aCirclassIrdevi[20];
// 181D4: using guessed type int dword_181D4[4];
// 19144: using guessed type int (__stdcall *dword_19144)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19330: using guessed type int (__stdcall *dword_19330)(_DWORD, _DWORD);
// 19448: using guessed type int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD);

//----- (00011896) --------------------------------------------------------
int __stdcall IrClassTargetQueryRemove(int a1)
{
  int v1; // eax@5

  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    WPP_SF_q(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      49,
      (int)dword_181D4,
      a1);
  v1 = dword_19448(WdfDriverGlobals, a1, off_19034);
  if ( *(_DWORD *)(v1 + 4) )
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        51,
        (int)dword_181D4,
        *(_DWORD *)(v1 + 4));
  }
  else
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
      WPP_SF_(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        50,
        (int)dword_181D4);
    dword_193C4(WdfDriverGlobals, a1);
  }
  return 0;
}
// 181D4: using guessed type int dword_181D4[4];
// 193C4: using guessed type int (__stdcall *dword_193C4)(_DWORD, _DWORD);
// 19448: using guessed type int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD);

//----- (00011956) --------------------------------------------------------
int __stdcall IrClassUsbIrEvtIoQueueStop(int a1, int a2, char a3)
{
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    WPP_SF_qqD(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      52,
      (int)dword_181D4,
      a1,
      a2,
      a3);
  return dword_19590(WdfDriverGlobals, a2, 0);
}
// 181D4: using guessed type int dword_181D4[4];
// 19590: using guessed type int (__stdcall *dword_19590)(_DWORD, _DWORD, _DWORD);

//----- (000119A8) --------------------------------------------------------
int __stdcall IrClassEvtIoTargetCleanupCallback(int a1)
{
  int v1; // esi@1
  int result; // eax@5

  v1 = dword_19448(WdfDriverGlobals, a1, off_19034);
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    WPP_SF_q(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      53,
      (int)dword_181D4,
      a1);
  result = *(_DWORD *)v1;
  if ( *(_DWORD *)v1 )
    *(_BYTE *)(result + 8248) = 0;
  return result;
}
// 181D4: using guessed type int dword_181D4[4];
// 19448: using guessed type int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD);

//----- (00011A0A) --------------------------------------------------------
int __stdcall IrClassIrPortNotification(PVOID NotificationStructure, PVOID Context)
{
  PVOID v2; // ebx@1
  int v3; // edx@1
  int v4; // edi@6
  int v6; // eax@12
  int v7; // edi@12
  int v8; // eax@12
  int v9; // edi@12
  int v10; // esi@17
  PVOID v11; // eax@19
  unsigned int v12; // ecx@19
  char v13; // si@28
  char v14; // di@28
  char v15; // bl@28
  int v16; // eax@28
  int v17; // ebx@35
  int v18; // esi@35
  int v19; // eax@35
  int v20; // eax@41
  int v21; // edi@41
  int v22; // esi@41
  char v23; // al@41
  PDEVICE_OBJECT v24; // eax@43
  CCHAR v25; // dl@44
  struct _DEVICE_OBJECT *v26; // eax@46
  unsigned int v27; // edi@46
  const WCHAR *v28; // esi@46
  int v29; // edi@53
  int v30; // edx@57
  int v31; // ecx@57
  char *v32; // esi@74
  signed int v33; // ecx@74
  GUID *v34; // edi@74
  bool v35; // zf@74
  int v36; // esi@82
  int v37; // edi@87
  int v38; // eax@98
  int v39; // eax@99
  int v40; // eax@101
  int v41; // eax@101
  int v42; // [sp+Ch] [bp-90h]@12
  int v43; // [sp+10h] [bp-8Ch]@12
  int (__stdcall *v44)(int); // [sp+14h] [bp-88h]@12
  int v45; // [sp+28h] [bp-74h]@12
  int v46; // [sp+2Ch] [bp-70h]@12
  int v47; // [sp+30h] [bp-6Ch]@12
  int v48; // [sp+34h] [bp-68h]@12
  int v49; // [sp+3Ch] [bp-60h]@12
  int v50; // [sp+40h] [bp-5Ch]@12
  int v51; // [sp+54h] [bp-48h]@6
  int (__stdcall *v52)(int); // [sp+58h] [bp-44h]@6
  int v53; // [sp+60h] [bp-3Ch]@6
  int v54; // [sp+64h] [bp-38h]@6
  int v55; // [sp+70h] [bp-2Ch]@6
  int v56; // [sp+74h] [bp-28h]@35
  int v57; // [sp+78h] [bp-24h]@35
  int v58; // [sp+7Ch] [bp-20h]@35
  int v59; // [sp+80h] [bp-1Ch]@29
  int v60; // [sp+84h] [bp-18h]@29
  int v61; // [sp+88h] [bp-14h]@29
  int v62; // [sp+8Ch] [bp-10h]@29
  int v63; // [sp+90h] [bp-Ch]@1
  unsigned int v64; // [sp+94h] [bp-8h]@12
  int v65; // [sp+98h] [bp-4h]@6
  int NotificationStructurea; // [sp+A4h] [bp+8h]@46
  char NotificationStructure_3; // [sp+A7h] [bp+Bh]@78

  v2 = NotificationStructure;
  v63 = dword_19448(WdfDriverGlobals, Context, off_19020);
  v3 = 0;
  if ( memcmp((char *)NotificationStructure + 4, &GUID_DEVICE_INTERFACE_ARRIVAL, 0x10u) )
  {
    v32 = (char *)NotificationStructure + 4;
    v33 = 4;
    v34 = &GUID_DEVICE_INTERFACE_REMOVAL;
    v35 = 1;
    do
    {
      if ( !v33 )
        break;
      v35 = *(_DWORD *)v32 == v34->Data1;
      v32 += 4;
      v34 = (GUID *)((char *)v34 + 4);
      --v33;
    }
    while ( v35 );
    if ( v35 )
    {
      NotificationStructure_3 = 0;
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
        WPP_SF_Z(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          31,
          (int)dword_181D4,
          *((_DWORD *)v2 + 9));
      v36 = v63;
      dword_19604(v33, v3, WdfDriverGlobals, *(_DWORD *)(v63 + 20), 0);
      v63 = dword_19158(WdfDriverGlobals, *(_DWORD *)(v63 + 16));
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          32,
          (int)dword_181D4,
          v63);
      v64 = 0;
      if ( v63 )
      {
        while ( 1 )
        {
          v65 = dword_19168(WdfDriverGlobals, *(_DWORD *)(v36 + 16), v64);
          v37 = dword_19448(WdfDriverGlobals, v65, off_19034);
          if ( !RtlCompareUnicodeString((PCUNICODE_STRING)(v37 + 536), *((PCUNICODE_STRING *)v2 + 9), 1u) )
            break;
          ++v64;
          if ( v64 >= v63 )
            goto LABEL_92;
        }
        dword_19164(WdfDriverGlobals, *(_DWORD *)(v36 + 16), v64);
        NotificationStructure_3 = 1;
      }
      else
      {
        v37 = v64;
      }
LABEL_92:
      dword_19608(WdfDriverGlobals, *(_DWORD *)(v36 + 20));
      if ( NotificationStructure_3 )
      {
        dword_19258(WdfDriverGlobals, Context, &GUID_DEVINTERFACE_IRBUS, v37 + 16, 0);
        if ( *(_DWORD *)v37 )
        {
          v38 = *(_DWORD *)(*(_DWORD *)v37 + 8232);
          if ( v38 )
          {
            v39 = dword_19290(WdfDriverGlobals, v38);
            if ( v39 )
              dword_193B0(WdfDriverGlobals, v39);
          }
          v40 = dword_19330(WdfDriverGlobals, Context);
          v41 = dword_19148(WdfDriverGlobals, v40, *(_DWORD *)v37 + 8252);
          if ( v41 < 0
            && (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
            && WPP_GLOBAL_Control->Characteristics & 1
            && BYTE1(WPP_GLOBAL_Control->Flags) >= 3u )
            WPP_SF_q(
              (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
              (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
              34,
              (int)dword_181D4,
              v41);
        }
        ExFreePool(*(PVOID *)(v37 + 540));
        dword_19460(WdfDriverGlobals, v65);
      }
      else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
             && WPP_GLOBAL_Control->Characteristics & 1
             && BYTE1(WPP_GLOBAL_Control->Flags) >= 3u )
      {
        WPP_SF_(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          33,
          (int)dword_181D4);
      }
    }
    return 0;
  }
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    WPP_SF_Z(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      19,
      (int)dword_181D4,
      *((_DWORD *)NotificationStructure + 9));
  memset(&v51, 0, 0x20u);
  v55 = off_19034;
  v51 = 32;
  v53 = 1;
  v54 = 1;
  v52 = IrClassEvtIoTargetCleanupCallback;
  v4 = dword_193BC(0, v3, WdfDriverGlobals, Context, &v51, &v65);
  if ( v4 >= 0 )
  {
    v6 = dword_19448(WdfDriverGlobals, v65, off_19034);
    v7 = *((_DWORD *)NotificationStructure + 9);
    v64 = v6;
    memset(&v42, 0, 0x48u);
    v42 = 72;
    v43 = 2;
    v45 = *(_DWORD *)v7;
    v8 = *(_DWORD *)(v7 + 4);
    v48 = 0;
    v46 = v8;
    v47 = 2031616;
    v50 = 64;
    v49 = 1;
    v44 = IrClassTargetQueryRemove;
    v9 = dword_193C0(WdfDriverGlobals, v65, &v42);
    if ( v9 < 0 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          21,
          (int)dword_181D4,
          v9);
      v10 = v9;
      goto LABEL_18;
    }
    dword_19454(WdfDriverGlobals, v65, 0, 492, "d:\\w7rtm\\drivers\\wdm\\ir\\circlass\\ircpnp.c");
    v11 = ExAllocatePoolWithTag(PagedPool, *(_WORD *)(*((_DWORD *)NotificationStructure + 9) + 2), 0x4C537249u);
    v12 = v64;
    *(_DWORD *)(v64 + 540) = v11;
    if ( !v11 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          22,
          (int)dword_181D4);
      v10 = -1073741670;
      goto LABEL_18;
    }
    *(_WORD *)(v12 + 538) = *(_WORD *)(*((_DWORD *)NotificationStructure + 9) + 2);
    RtlCopyUnicodeString((PUNICODE_STRING)(v12 + 536), *((PCUNICODE_STRING *)NotificationStructure + 9));
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    {
      v13 = dword_193F4(WdfDriverGlobals, v65);
      v14 = dword_193F0(WdfDriverGlobals, v65);
      v15 = dword_193EC(WdfDriverGlobals, v65);
      v16 = dword_193E8(WdfDriverGlobals, v65);
      WPP_SF_dddd(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        23,
        (int)dword_181D4,
        v16,
        v15,
        v14,
        v13);
    }
    v62 = -1;
    v59 = 16;
    v60 = 3;
    v61 = -20000000;
    v10 = dword_19408(WdfDriverGlobals, v65, 0, 257949732, 0, 0, &v59, 0);
    if ( v10 < 0 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          24,
          (int)dword_181D4,
          v10);
LABEL_34:
      ExFreePool(*(PVOID *)(v64 + 540));
LABEL_18:
      dword_19460(WdfDriverGlobals, v65);
      return v10;
    }
    v17 = v63;
    v18 = v63 + 24;
    memset((void *)(v63 + 24), 0, 0x218u);
    v56 = 1;
    v57 = v18;
    v58 = 536;
    v19 = dword_19408(WdfDriverGlobals, v65, 0, 257966084, 0, &v56, &v59, 0);
    if ( v19 < 0 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          25,
          (int)dword_181D4,
          v19);
      *(_DWORD *)(v17 + 28) = 0;
      *(_DWORD *)(v17 + 36) = 0;
      *(_DWORD *)v18 = 256;
      *(_DWORD *)(v17 + 32) = 1;
    }
    v20 = dword_193E8(WdfDriverGlobals, v65);
    v21 = v20;
    v63 = v20;
    v22 = dword_1919C(WdfDriverGlobals, Context);
    v23 = *(_BYTE *)(v21 + 48);
    if ( v23 >= *(_BYTE *)(v22 + 48) )
      *(_BYTE *)(v22 + 48) = v23 + 1;
    v24 = IoGetAttachedDeviceReference((PDEVICE_OBJECT)v22);
    if ( v24 != (PDEVICE_OBJECT)v22 )
    {
      v25 = *(_BYTE *)(v22 + 48);
      if ( v25 >= v24->StackSize )
        v24->StackSize = v25 + 1;
    }
    ObfDereferenceObject(v24);
    v26 = (struct _DEVICE_OBJECT *)dword_193EC(WdfDriverGlobals, v65);
    v27 = v64;
    v28 = (const WCHAR *)(v64 + 24);
    NotificationStructurea = IrClassGetPortReferenceString(v17, v26, (wchar_t *)(v64 + 24), 512);
    if ( NotificationStructurea < 0 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          26,
          (int)dword_181D4,
          NotificationStructurea);
      ExFreePool(*(PVOID *)(v27 + 540));
LABEL_52:
      v10 = NotificationStructurea;
      goto LABEL_18;
    }
    v29 = v64 + 16;
    RtlInitUnicodeString((PUNICODE_STRING)(v64 + 16), v28);
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
      WPP_SF_qZ(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        27,
        (int)dword_181D4,
        v65,
        v29);
    NotificationStructurea = dword_19254(WdfDriverGlobals, Context, &GUID_DEVINTERFACE_IRBUS, v29);
    if ( NotificationStructurea < 0 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          28,
          (int)dword_181D4,
          NotificationStructurea);
      goto LABEL_52;
    }
    dword_19604(v31, v30, WdfDriverGlobals, *(_DWORD *)(v17 + 20), 0);
    NotificationStructurea = dword_1915C(WdfDriverGlobals, *(_DWORD *)(v17 + 16), v65);
    dword_19608(WdfDriverGlobals, *(_DWORD *)(v17 + 20));
    if ( NotificationStructurea < 0 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          29,
          (int)dword_181D4,
          NotificationStructurea);
      ExFreePool(*(PVOID *)(v64 + 540));
      goto LABEL_52;
    }
    dword_19258(WdfDriverGlobals, Context, &GUID_DEVINTERFACE_IRBUS, v29, 1);
    if ( IrClassDeviceSupportsInput(v17) )
    {
      v10 = IrClassBuildHidChildren((int)Context, v63, v65);
      if ( v10 < 0 )
      {
        if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && WPP_GLOBAL_Control->Characteristics & 1
          && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
          WPP_SF_q(
            (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
            (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
            30,
            (int)dword_181D4,
            v10);
        goto LABEL_34;
      }
    }
    return 0;
  }
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
    WPP_SF_q(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      20,
      (int)dword_181D4,
      v4);
  return v4;
}
// 181D4: using guessed type int dword_181D4[4];
// 19148: using guessed type int (__stdcall *dword_19148)(_DWORD, _DWORD, _DWORD);
// 19158: using guessed type int (__stdcall *dword_19158)(_DWORD, _DWORD);
// 1915C: using guessed type int (__stdcall *dword_1915C)(_DWORD, _DWORD, _DWORD);
// 19164: using guessed type int (__stdcall *dword_19164)(_DWORD, _DWORD, _DWORD);
// 19168: using guessed type int (__stdcall *dword_19168)(_DWORD, _DWORD, _DWORD);
// 1919C: using guessed type int (__stdcall *dword_1919C)(_DWORD, _DWORD);
// 19254: using guessed type int (__stdcall *dword_19254)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19258: using guessed type int (__stdcall *dword_19258)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19290: using guessed type int (__stdcall *dword_19290)(_DWORD, _DWORD);
// 19330: using guessed type int (__stdcall *dword_19330)(_DWORD, _DWORD);
// 193B0: using guessed type int (__stdcall *dword_193B0)(_DWORD, _DWORD);
// 193BC: using guessed type int (__fastcall *dword_193BC)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 193C0: using guessed type int (__stdcall *dword_193C0)(_DWORD, _DWORD, _DWORD);
// 193E8: using guessed type int (__stdcall *dword_193E8)(_DWORD, _DWORD);
// 193EC: using guessed type int (__stdcall *dword_193EC)(_DWORD, _DWORD);
// 193F0: using guessed type int (__stdcall *dword_193F0)(_DWORD, _DWORD);
// 193F4: using guessed type int (__stdcall *dword_193F4)(_DWORD, _DWORD);
// 19408: using guessed type int (__stdcall *dword_19408)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19448: using guessed type int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD);
// 19454: using guessed type int (__stdcall *dword_19454)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19460: using guessed type int (__stdcall *dword_19460)(_DWORD, _DWORD);
// 19604: using guessed type int (__fastcall *dword_19604)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19608: using guessed type int (__stdcall *dword_19608)(_DWORD, _DWORD);

//----- (00012222) --------------------------------------------------------
signed int __stdcall IrClassEvtDeviceAdd(int a1, int a2)
{
  PDEVICE_OBJECT v2; // eax@1
  int v4; // esi@11
  int v5; // esi@21
  int v6; // eax@32
  struct _DRIVER_OBJECT *v7; // eax@37
  int v8; // [sp+Ch] [bp-ECh]@11
  int v9; // [sp+10h] [bp-E8h]@11
  int (__stdcall *v10)(int, int, int); // [sp+18h] [bp-E0h]@11
  int v11; // [sp+40h] [bp-B8h]@16
  int v12; // [sp+44h] [bp-B4h]@16
  int v13; // [sp+48h] [bp-B0h]@16
  char v14; // [sp+4Dh] [bp-ABh]@16
  int (__stdcall *v15)(int, int, int, int, char); // [sp+5Ch] [bp-9Ch]@16
  int (__stdcall *v16)(int, int, char); // [sp+64h] [bp-94h]@16
  int v17; // [sp+70h] [bp-88h]@16
  int v18; // [sp+74h] [bp-84h]@11
  int v19; // [sp+80h] [bp-78h]@11
  int v20; // [sp+84h] [bp-74h]@11
  int v21; // [sp+90h] [bp-68h]@11
  int v22; // [sp+94h] [bp-64h]@11
  NTSTATUS (__stdcall *v23)(int); // [sp+9Ch] [bp-5Ch]@11
  int v24; // [sp+A0h] [bp-58h]@11
  int v25; // [sp+A4h] [bp-54h]@11
  int v26; // [sp+B0h] [bp-48h]@11
  int v27; // [sp+B4h] [bp-44h]@11
  int (__stdcall *v28)(int, int, unsigned int); // [sp+B8h] [bp-40h]@11
  int (__stdcall *v29)(int); // [sp+BCh] [bp-3Ch]@11
  int v30; // [sp+C0h] [bp-38h]@11
  int v31; // [sp+C4h] [bp-34h]@11
  int v32; // [sp+C8h] [bp-30h]@11
  int v33; // [sp+CCh] [bp-2Ch]@1
  int v34; // [sp+D0h] [bp-28h]@1
  int v35; // [sp+D4h] [bp-24h]@21
  PVOID Context; // [sp+D8h] [bp-20h]@11
  DWORD v37; // [sp+DCh] [bp-1Ch]@21
  int v38; // [sp+E0h] [bp-18h]@21
  int v39; // [sp+E4h] [bp-14h]@21
  int v40; // [sp+E8h] [bp-10h]@21
  int v41; // [sp+ECh] [bp-Ch]@21
  int v42; // [sp+F0h] [bp-8h]@21

  v33 = a1;
  v34 = a2;
  v2 = WPP_GLOBAL_Control;
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
  {
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      10,
      (int)dword_181D4);
    v2 = WPP_GLOBAL_Control;
  }
  if ( !InitSafeBootMode )
  {
    dword_19228(WdfDriverGlobals, v34, 42);
    dword_19214(WdfDriverGlobals, v34, 3);
    memset(&v8, 0, 0x34u);
    v8 = 52;
    v9 = 24;
    v10 = IrClassEvtDeviceListCreatePdo;
    dword_19328(WdfDriverGlobals, v34, &v8, 0);
    v30 = 0;
    memset(&v18, 0, 0x20u);
    v21 = off_19048;
    v27 = 24;
    v28 = IrClassEvtFdoCreate;
    v29 = IrClassEvtFdoClose;
    v32 = 4;
    v31 = 2;
    v18 = 32;
    v19 = 1;
    v20 = 1;
    dword_1923C(WdfDriverGlobals, v34, &v27, &v18);
    memset(&v22, 0, 0x20u);
    v26 = off_19020;
    v22 = 32;
    v24 = 1;
    v25 = 1;
    v23 = IrClassEvtFdoDestroy;
    v4 = dword_1924C(WdfDriverGlobals, &v34, &v22, &Context);
    if ( v4 >= 0 )
    {
      memset(&v11, 0, 0x34u);
      v17 = -1;
      v13 = 2;
      v12 = 2;
      v11 = 52;
      v14 = 1;
      v15 = IrClassEvtFdoDeviceControl;
      v16 = IrClassUsbIrEvtIoQueueStop;
      v4 = dword_19380(WdfDriverGlobals, Context, &v11, 0, 0);
      if ( v4 >= 0 )
      {
        v37 = GUID_BUS_TYPE_IRDA.Data1;
        v38 = *(_DWORD *)&GUID_BUS_TYPE_IRDA.Data2;
        v39 = *(_DWORD *)&GUID_BUS_TYPE_IRDA.Data4[0];
        v40 = *(_DWORD *)&GUID_BUS_TYPE_IRDA.Data4[4];
        v41 = 15;
        v42 = 1;
        dword_19274(WdfDriverGlobals, Context, &v37);
        v5 = dword_19448(WdfDriverGlobals, Context, off_19020);
        v35 = dword_19600(WdfDriverGlobals, 0, v5 + 20);
        if ( v35 >= 0 )
        {
          v35 = dword_19154(WdfDriverGlobals, 0, v5 + 16);
          if ( v35 >= 0 )
          {
            *(_BYTE *)(v5 + 4) = 1;
            *(_DWORD *)v5 = dword_1919C(WdfDriverGlobals, Context);
            *(_DWORD *)(v5 + 8) = dword_191A4(WdfDriverGlobals, Context);
            v6 = IrClassReadGlobalParameters(v5);
            if ( v6 < 0
              && (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
              && WPP_GLOBAL_Control->Characteristics & 1
              && BYTE1(WPP_GLOBAL_Control->Flags) >= 3u )
              WPP_SF_q(
                (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
                (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
                16,
                (int)dword_181D4,
                v6);
            v7 = (struct _DRIVER_OBJECT *)dword_192F8(WdfDriverGlobals, v33);
            v4 = IoRegisterPlugPlayNotification(
                   EventCategoryDeviceInterfaceChange,
                   1u,
                   &GUID_DEVINTERFACE_IRPORT,
                   v7,
                   (PDRIVER_NOTIFICATION_CALLBACK_ROUTINE)IrClassIrPortNotification,
                   Context,
                   (PVOID *)(v5 + 12));
            if ( v4 < 0
              && (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
              && WPP_GLOBAL_Control->Characteristics & 1
              && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
              WPP_SF_q(
                (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
                (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
                17,
                (int)dword_181D4,
                v4);
            return v4;
          }
          if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
            && WPP_GLOBAL_Control->Characteristics & 1
            && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
            WPP_SF_q(
              (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
              (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
              15,
              (int)dword_181D4,
              v35);
        }
        else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
               && WPP_GLOBAL_Control->Characteristics & 1
               && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        {
          WPP_SF_q(
            (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
            (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
            14,
            (int)dword_181D4,
            v35);
        }
        return v35;
      }
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          13,
          (int)dword_181D4,
          v4);
    }
    else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
           && WPP_GLOBAL_Control->Characteristics & 1
           && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
    {
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        12,
        (int)dword_181D4,
        v4);
    }
    return v4;
  }
  if ( (PDEVICE_OBJECT *)v2 != &WPP_GLOBAL_Control && v2->Characteristics & 1 && BYTE1(v2->Flags) >= 3u )
    WPP_SF_((int)&v2->AttachedDevice->Type, (int)&v2->CurrentIrp->Type, 11, (int)dword_181D4);
  return -1073741823;
}
// 18040: using guessed type int InitSafeBootMode;
// 181D4: using guessed type int dword_181D4[4];
// 19154: using guessed type int (__stdcall *dword_19154)(_DWORD, _DWORD, _DWORD);
// 1919C: using guessed type int (__stdcall *dword_1919C)(_DWORD, _DWORD);
// 191A4: using guessed type int (__stdcall *dword_191A4)(_DWORD, _DWORD);
// 19214: using guessed type int (__stdcall *dword_19214)(_DWORD, _DWORD, _DWORD);
// 19228: using guessed type int (__stdcall *dword_19228)(_DWORD, _DWORD, _DWORD);
// 1923C: using guessed type int (__stdcall *dword_1923C)(_DWORD, _DWORD, _DWORD, _DWORD);
// 1924C: using guessed type int (__stdcall *dword_1924C)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19274: using guessed type int (__stdcall *dword_19274)(_DWORD, _DWORD, _DWORD);
// 192F8: using guessed type int (__stdcall *dword_192F8)(_DWORD, _DWORD);
// 19328: using guessed type int (__stdcall *dword_19328)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19380: using guessed type int (__stdcall *dword_19380)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19448: using guessed type int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD);
// 19600: using guessed type int (__stdcall *dword_19600)(_DWORD, _DWORD, _DWORD);

//----- (00012616) --------------------------------------------------------
int __stdcall WPP_INIT_CONTROL_ARRAY(int a1)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = WPP_ThisDir_CTLGUID_IRCLASSTRACE;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 1;
  *(_BYTE *)(a1 + 29) = 0;
  *(_WORD *)(a1 + 30) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}
// 181C4: using guessed type int WPP_ThisDir_CTLGUID_IRCLASSTRACE[4];

//----- (00012648) --------------------------------------------------------
NTSTATUS __cdecl W2kTraceMessage(int a1, int a2, int a3, int a4, char a5, void *a6)
{
  SIZE_T v6; // edi@1
  void *v7; // esi@1
  unsigned int v8; // ebx@1
  void **v9; // eax@2
  int *v10; // ecx@2
  int v11; // eax@3
  int v12; // edx@3
  PVOID v14; // ecx@9
  int v15; // ebx@9
  const void *v16; // eax@11
  void **v17; // esi@12
  size_t *v18; // esi@14
  size_t v19; // edi@14
  NTSTATUS v20; // esi@17
  __int16 WnodeEventItem; // [sp+Ch] [bp-B4h]@1
  char v22; // [sp+10h] [bp-B0h]@1
  int v23; // [sp+14h] [bp-ACh]@1
  int v24; // [sp+18h] [bp-A8h]@1
  int v25; // [sp+24h] [bp-9Ch]@1
  int v26; // [sp+28h] [bp-98h]@1
  int v27; // [sp+38h] [bp-88h]@1
  char *v28; // [sp+3Ch] [bp-84h]@1
  int v29; // [sp+40h] [bp-80h]@1
  int v30; // [sp+44h] [bp-7Ch]@1
  PVOID v31; // [sp+4Ch] [bp-74h]@11
  int v32; // [sp+50h] [bp-70h]@11
  SIZE_T v33; // [sp+54h] [bp-6Ch]@11
  PVOID P; // [sp+BCh] [bp-4h]@1

  v6 = 0;
  P = 0;
  memset(&WnodeEventItem, 0, 0x30u);
  v7 = a6;
  v23 = a1;
  v24 = a2;
  v25 = a4;
  v8 = 0;
  v26 = 0;
  v27 = 1703936;
  v22 = -1;
  v28 = &a5;
  v29 = 0;
  v30 = 2;
  if ( !a6 )
    goto LABEL_22;
  v9 = &a6;
  v10 = &v30;
  do
  {
    v11 = (int)(v9 + 1);
    v12 = *(_DWORD *)v11;
    v6 += *(_DWORD *)v11;
    ++v8;
    v10 += 4;
    if ( v8 <= 7 )
    {
      *(v10 - 1) = 0;
      *(v10 - 2) = (int)v7;
      *v10 = v12;
    }
    v9 = (void **)(v11 + 4);
    v7 = *v9;
  }
  while ( *v9 );
  if ( v6 > 0x2000 )
    return -1073741823;
  if ( v8 > 7 )
  {
    v14 = ExAllocatePoolWithTag(PagedPool, v6, 0x45435453u);
    v15 = 0;
    P = v14;
    if ( !v14 )
      return -1073741801;
    v16 = a6;
    v31 = v14;
    v32 = 0;
    v33 = v6;
    if ( a6 )
    {
      v17 = &a6;
      while ( 1 )
      {
        v18 = (size_t *)(v17 + 1);
        v19 = *v18;
        memcpy((char *)v14 + v15, v16, *v18);
        v17 = (void **)(v18 + 1);
        v16 = *v17;
        v15 += v19;
        if ( !*v17 )
          break;
        v14 = P;
      }
    }
    WnodeEventItem = 80;
  }
  else
  {
LABEL_22:
    WnodeEventItem = 16 * (v8 + 4);
  }
  v20 = IoWMIWriteEvent(&WnodeEventItem);
  if ( P )
    ExFreePool(P);
  return v20;
}

//----- (00012798) --------------------------------------------------------
int __stdcall WppClassicProviderCallback(int a1, char a2, int a3, int a4)
{
  int result; // eax@4

  if ( a2 == 1 || !a2 )
  {
    if ( a2 )
    {
      *(_DWORD *)(a4 + 32) = *(_DWORD *)(a3 + 4);
      *(_BYTE *)(a4 + 29) = *(_BYTE *)(a3 + 2);
      *(_DWORD *)(a4 + 16) = *(_DWORD *)a3;
      result = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a4 + 20) = result;
    }
    else
    {
      result = a4;
      *(_BYTE *)(a4 + 29) = 0;
      *(_DWORD *)(a4 + 32) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      *(_DWORD *)(a4 + 20) = 0;
    }
  }
  return result;
}

//----- (000127E6) --------------------------------------------------------
void __stdcall IrClassEvtDriverUnload(int a1)
{
  int v1; // eax@3

  if ( IrClassRegistryPath.Buffer )
    ExFreePool(IrClassRegistryPath.Buffer);
  v1 = dword_192F8(WdfDriverGlobals, a1);
  WppCleanupKm(v1);
}
// 192F8: using guessed type int (__stdcall *dword_192F8)(_DWORD, _DWORD);

//----- (0001281A) --------------------------------------------------------
int __stdcall DriverEntry(int a1, PCUNICODE_STRING SourceString)
{
  PDEVICE_OBJECT v2; // eax@1
  int v3; // edi@9
  int v5; // [sp+Ch] [bp-18h]@9
  signed int (__stdcall *v6)(int, int); // [sp+10h] [bp-14h]@9
  void (__stdcall *v7)(int); // [sp+14h] [bp-10h]@9
  int v8; // [sp+18h] [bp-Ch]@9
  int v9; // [sp+1Ch] [bp-8h]@9
  char v10; // [sp+20h] [bp-4h]@9

  WPP_INIT_CONTROL_ARRAY((int)&WPP_MAIN_CB);
  WppLoadTracingSupport();
  dword_19998[0] = 0;
  WppInitKm(a1, (int)SourceString);
  v2 = WPP_GLOBAL_Control;
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
  {
    if ( WPP_GLOBAL_Control->Characteristics & 1 && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    {
      WPP_SF_(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        10,
        (int)dword_181E4);
      v2 = WPP_GLOBAL_Control;
    }
    if ( (PDEVICE_OBJECT *)v2 != &WPP_GLOBAL_Control && v2->Characteristics & 1 && BYTE1(v2->Flags) >= 4u )
      WPP_SF_Z((int)&v2->AttachedDevice->Type, (int)&v2->CurrentIrp->Type, 11, (int)dword_181E4, (int)SourceString);
  }
  v8 = 0;
  v9 = 0;
  v5 = 20;
  v6 = IrClassEvtDeviceAdd;
  v7 = IrClassEvtDriverUnload;
  v3 = dword_192F0(WdfDriverGlobals, a1, SourceString, 0, &v5, &v10);
  if ( v3 < 0 )
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        12,
        (int)dword_181E4,
        v3);
LABEL_14:
    WppCleanupKm(a1);
    return v3;
  }
  IrClassRegistryPath.MaximumLength = SourceString->Length + 2;
  IrClassRegistryPath.Buffer = (PWSTR)ExAllocatePoolWithTag(PagedPool, IrClassRegistryPath.MaximumLength, 0x5052534Fu);
  if ( !IrClassRegistryPath.Buffer )
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        13,
        (int)dword_181E4);
    v3 = -1073741670;
    goto LABEL_14;
  }
  RtlCopyUnicodeString(&IrClassRegistryPath, SourceString);
  return 0;
}
// 181E4: using guessed type int dword_181E4[4];
// 192F0: using guessed type int (__stdcall *dword_192F0)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19998: using guessed type int dword_19998[6];

//----- (0001297E) --------------------------------------------------------
int __stdcall WPP_SF_dXd(int a1, int a2, int a3, int a4, int a5, char a6, int a7, char a8)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 19104: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (000129B8) --------------------------------------------------------
int __stdcall WPP_SF_dddd(int a1, int a2, int a3, int a4, int a5, char a6, char a7, char a8)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 19104: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (000129F6) --------------------------------------------------------
int __stdcall WPP_SF_dsd(int a1, int a2, int a3, int a4, int a5, int a6, char a7)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 19104: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00012A54) --------------------------------------------------------
bool __stdcall IsStateValid(int a1)
{
  bool v1; // cf@2
  bool result; // al@3

  switch ( *(_DWORD *)(a1 + 168) )
  {
    case 0:
      v1 = *(_DWORD *)(a1 + 80) > 0u;
      goto LABEL_3;
    case 1:
      return *(_BYTE *)(a1 + 84);
    case 2:
      v1 = *(_DWORD *)(a1 + 96) > 0u;
      goto LABEL_3;
    case 3:
      v1 = *(_DWORD *)(a1 + 108) > 0u;
      goto LABEL_3;
    case 4:
      return *(_BYTE *)(a1 + 112);
    case 5:
      v1 = *(_DWORD *)(a1 + 124) > 0u;
      goto LABEL_3;
    case 6:
      v1 = *(_DWORD *)(a1 + 136) > 0u;
      goto LABEL_3;
    case 7:
      result = *(_BYTE *)(a1 + 140);
      break;
    case 8:
      v1 = *(_DWORD *)(a1 + 152) > 0u;
LABEL_3:
      result = v1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

//----- (00012AE6) --------------------------------------------------------
int __stdcall NextState(int a1)
{
  unsigned int v1; // edx@5
  int v2; // eax@6
  int result; // eax@15

  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 8
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
    WPP_SF_q(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      10,
      (int)dword_181F4,
      *(_DWORD *)(a1 + 8));
  v1 = 0;
  do
  {
    v2 = *(_DWORD *)(a1 + 168);
    if ( v2 != 5 || *(_DWORD *)(a1 + 108) <= v1 && *(_DWORD *)(a1 + 124) <= v1 && *(_BYTE *)(a1 + 112) == (_BYTE)v1 )
      *(_DWORD *)(a1 + 168) = v2 + 1;
    else
      *(_DWORD *)(a1 + 168) = 3;
    if ( *(_DWORD *)(a1 + 168) >= 9 )
      *(_DWORD *)(a1 + 168) = v1;
  }
  while ( !IsStateValid(a1) );
  *(_DWORD *)(a1 + 172) = v1;
  result = (int)WPP_GLOBAL_Control;
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 8
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
    result = WPP_SF_qqD(
               (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
               (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
               11,
               (int)dword_181F4,
               *(_DWORD *)(a1 + 8),
               *(_DWORD *)(a1 + 168),
               v1);
  return result;
}
// 181F4: using guessed type int dword_181F4[4];

//----- (00012BA8) --------------------------------------------------------
int __stdcall NextSubState(int a1)
{
  int result; // eax@5

  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 8
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
    WPP_SF_q(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      12,
      (int)dword_181F4,
      *(_DWORD *)(a1 + 8));
  ++*(_DWORD *)(a1 + 172);
  result = (int)WPP_GLOBAL_Control;
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 8
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
    result = WPP_SF_qqD(
               (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
               (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
               13,
               (int)dword_181F4,
               *(_DWORD *)(a1 + 8),
               *(_DWORD *)(a1 + 168),
               *(_DWORD *)(a1 + 172));
  *(_DWORD *)(a1 + 204) = 0;
  return result;
}
// 181F4: using guessed type int dword_181F4[4];

//----- (00012C2E) --------------------------------------------------------
int __stdcall GoToInitialState(int a1)
{
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 8
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
    WPP_SF_q(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      14,
      (int)dword_181F4,
      *(_DWORD *)(a1 + 8));
  *(_DWORD *)(a1 + 168) = 8;
  return NextState(a1);
}
// 181F4: using guessed type int dword_181F4[4];

//----- (00012C7E) --------------------------------------------------------
int __stdcall Clear(int a1)
{
  int result; // eax@5

  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 8
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
    WPP_SF_q(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      15,
      (int)dword_181F4,
      *(_DWORD *)(a1 + 8));
  result = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  return result;
}
// 181F4: using guessed type int dword_181F4[4];

//----- (00012CD8) --------------------------------------------------------
size_t __stdcall SendIrCode(int a1)
{
  char v1; // al@1
  int v2; // ecx@3
  int v3; // edx@3
  int v4; // edi@3
  int v6; // [sp+8h] [bp-18h]@3
  int v7; // [sp+10h] [bp-10h]@3
  int v8; // [sp+14h] [bp-Ch]@3
  int v9; // [sp+18h] [bp-8h]@4

  v1 = *(_BYTE *)(a1 + 200);
  if ( v1 )
  {
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 188) = *(_DWORD *)(a1 + 180);
  }
  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 176);
  v4 = *(_DWORD *)(a1 + 180);
  v6 = *(_DWORD *)(a1 + 8);
  v7 = v3;
  v8 = v4;
  if ( v1 )
    v9 = *(_DWORD *)(a1 + 192);
  else
    v9 = 0;
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 8
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    WPP_SF_dXd(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      17,
      (int)dword_181F4,
      v2,
      v3,
      v4,
      v9);
  return IrClassEnqueueHIDReport(*(_DWORD *)a1 + 8, &v6, 0x18u);
}
// 181F4: using guessed type int dword_181F4[4];

//----- (00012D7E) --------------------------------------------------------
int __stdcall BitPatternToString(int a1)
{
  int result; // eax@8

  if ( a1 )
  {
    switch ( a1 )
    {
      case 1:
        result = (int)"BitOne";
        break;
      case 2:
        result = (int)"BitZero";
        break;
      case 3:
        result = (int)"BitZeroZero";
        break;
      case 4:
        result = (int)"BitZeroOne";
        break;
      case 5:
        result = (int)"BitOneZero";
        break;
      case 6:
        result = (int)"BitOneOne";
        break;
      default:
        result = (int)"default";
        break;
    }
  }
  else
  {
    result = (int)"BitUndefined";
  }
  return result;
}

//----- (00012DDC) --------------------------------------------------------
char __stdcall BitPatternToBit(int a1)
{
  if ( a1 )
  {
    if ( a1 == 1 )
      return 1;
    if ( a1 != 2 && a1 != 3 )
    {
      if ( a1 != 4 )
      {
        if ( a1 == 5 )
          return 2;
        if ( a1 == 6 )
          return 3;
        return 0;
      }
      return 1;
    }
  }
  return 0;
}

//----- (00012E12) --------------------------------------------------------
int __stdcall RecordBit(int a1, int a2)
{
  int v2; // esi@1
  bool v3; // zf@1
  unsigned int v4; // edi@2
  char v5; // cl@2
  int v6; // ST18_4@7
  int v7; // eax@7
  int v8; // ecx@7
  int v10; // [sp+Ch] [bp+8h]@1

  v2 = a1;
  v3 = *(_DWORD *)(a1 + 20) == 0;
  v10 = (*(_DWORD *)(a1 + 4) == 3) + 1;
  if ( v3 )
  {
    v4 = (unsigned __int8)BitPatternToBit(a2);
    *(_QWORD *)(v2 + 176) = (*(_QWORD *)(v2 + 176) << v5) + v4;
  }
  else
  {
    *(_QWORD *)(v2 + 176) |= (unsigned __int64)(unsigned __int8)BitPatternToBit(a2) << *(_DWORD *)(v2 + 192);
  }
  *(_DWORD *)(v2 + 192) += v10;
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 8
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
  {
    v6 = *(_DWORD *)(v2 + 192);
    v7 = BitPatternToString(a2);
    WPP_SF_dsd(*(_DWORD *)(v8 + 16), *(_DWORD *)(v8 + 20), 18, (int)dword_181F4, *(_DWORD *)(v2 + 8), v7, v6);
  }
  return NextSubState(v2);
}
// 181F4: using guessed type int dword_181F4[4];

//----- (00012EDE) --------------------------------------------------------
int __stdcall EndKeypress(int a1)
{
  if ( *(_BYTE *)(a1 + 200) == 1 )
  {
    *(_BYTE *)(a1 + 200) = 0;
    SendIrCode(a1);
  }
  return Clear(a1);
}

//----- (00012F0C) --------------------------------------------------------
int __stdcall RecordTime(int a1, int a2)
{
  int result; // eax@2
  unsigned int v3; // ecx@2

  if ( *(_BYTE *)(a1 + 200) == 1 )
  {
    result = abs(a2);
    *(_DWORD *)(a1 + 204) += result;
    v3 = *(_DWORD *)(a1 + 204);
    if ( v3 >= *(_DWORD *)(a1 + 160) || v3 >= *(_DWORD *)(a1 + 156) && !*(_DWORD *)(a1 + 172) )
      result = EndKeypress(a1);
  }
  return result;
}

//----- (00012F5A) --------------------------------------------------------
int __stdcall DecoderReset(int a1)
{
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 8
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
    WPP_SF_q(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      16,
      (int)dword_181F4,
      *(_DWORD *)(a1 + 8));
  if ( !*(_BYTE *)(a1 + 165) )
    EndKeypress(a1);
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 196) = 0;
  return GoToInitialState(a1);
}
// 181F4: using guessed type int dword_181F4[4];

//----- (00012FC4) --------------------------------------------------------
int __stdcall Keypress(int a1)
{
  unsigned int v1; // eax@1

  v1 = *(_DWORD *)(a1 + 192);
  if ( v1 >= *(_DWORD *)(a1 + 12) && v1 <= *(_DWORD *)(a1 + 16) )
  {
    if ( *(_BYTE *)(a1 + 200) == 1 )
    {
      if ( !*(_BYTE *)(a1 + 164)
        && *(_DWORD *)(a1 + 184) == *(_DWORD *)(a1 + 176)
        && *(_DWORD *)(a1 + 188) == *(_DWORD *)(a1 + 180) )
        goto LABEL_10;
      if ( !*(_BYTE *)(a1 + 165) )
      {
        *(_BYTE *)(a1 + 200) = 0;
        SendIrCode(a1);
      }
    }
    *(_BYTE *)(a1 + 200) = 1;
    SendIrCode(a1);
LABEL_10:
    Clear(a1);
    return NextState(a1);
  }
  return DecoderReset(a1);
}

//----- (0001304C) --------------------------------------------------------
char __stdcall MatchFixedPattern(int a1, int a2, int a3, int a4, int a5)
{
  int v6; // ecx@3
  int v7; // edx@3
  int v8; // eax@3
  int v9; // ebx@13
  __int64 v10; // rax@20
  int v11; // [sp-10h] [bp-10h]@6

  if ( !a5 )
    return 0;
  v6 = *(_DWORD *)a2;
  v7 = *(_DWORD *)(a1 + 172);
  v8 = 4 * *(_DWORD *)(a1 + 172);
  if ( *(_DWORD *)a2 < *(_DWORD *)(v8 + a3) || v6 > *(_DWORD *)(v8 + a4) )
  {
    if ( !v7 && v6 < 0 && *(_DWORD *)a3 > 0 )
      goto LABEL_15;
    v11 = a1;
    if ( v7 == a5 - 1 )
    {
      if ( v6 <= 0 )
      {
        if ( v6 >= *(_DWORD *)(v8 + a3) )
          goto LABEL_14;
        v9 = a4;
      }
      else
      {
        v9 = a4;
        if ( v6 <= *(_DWORD *)(v8 + a4) )
          goto LABEL_14;
      }
      v10 = *(_DWORD *)(4 * v7 + v9) + *(_DWORD *)(4 * v7 + a3);
      *(_DWORD *)a2 = v6 - (((signed int)v10 - HIDWORD(v10)) >> 1);
      goto LABEL_7;
    }
LABEL_14:
    DecoderReset(a1);
LABEL_15:
    *(_DWORD *)a2 = 0;
    return 1;
  }
  NextSubState(a1);
  *(_DWORD *)a2 = 0;
  if ( *(_DWORD *)(a1 + 172) == a5 )
  {
    v11 = a1;
LABEL_7:
    NextState(v11);
  }
  return 1;
}

//----- (000130FC) --------------------------------------------------------
int __stdcall MatchData(int a1, int *a2)
{
  int v2; // eax@1
  int v3; // eax@2
  int v4; // eax@3
  int result; // eax@4
  int *v6; // edi@5
  int v7; // ecx@23
  int v8; // edx@28
  int v9; // ecx@34
  bool v10; // zf@39
  bool v11; // sf@39
  int v12; // eax@46
  int v13; // ecx@46
  int v14; // ecx@47
  bool v15; // zf@52
  bool v16; // sf@52
  char v17; // of@52
  __int64 v18; // rax@60
  int v19; // edx@71
  int v20; // eax@75
  int v21; // ecx@75
  __int64 v22; // rax@75

  v2 = *(_DWORD *)(a1 + 4);
  if ( !v2 )
  {
    v6 = a2;
    result = *a2;
    if ( *a2 < 0 )
    {
      if ( !*(_DWORD *)(a1 + 196) )
        goto LABEL_26;
      v19 = *(_DWORD *)(*(_DWORD *)(a1 + 24) + 4);
      if ( result < v19 )
        goto LABEL_84;
      if ( result <= *(_DWORD *)(*(_DWORD *)(a1 + 28) + 4) )
      {
        RecordBit(a1, *(_DWORD *)(a1 + 196));
        *(_DWORD *)(a1 + 196) = 0;
        *a2 = 0;
LABEL_20:
        result = *(_DWORD *)(a1 + 192);
        if ( result != *(_DWORD *)(a1 + 16) )
          return result;
        return Keypress(a1);
      }
      if ( result < v19 )
      {
LABEL_84:
        RecordBit(a1, *(_DWORD *)(a1 + 196));
        v20 = *(_DWORD *)(a1 + 28);
        v21 = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 196) = 0;
        v22 = *(_DWORD *)(v21 + 4) + *(_DWORD *)(v20 + 4);
        *a2 -= ((signed int)v22 - HIDWORD(v22)) >> 1;
        return Keypress(a1);
      }
      goto LABEL_25;
    }
    if ( result >= **(_DWORD **)(a1 + 32) && result <= **(_DWORD **)(a1 + 36) )
      goto LABEL_78;
    if ( result < **(_DWORD **)(a1 + 24) || result > **(_DWORD **)(a1 + 28) )
      goto LABEL_25;
    goto LABEL_81;
  }
  v3 = v2 - 1;
  if ( !v3 )
  {
    v6 = a2;
    result = *a2;
    if ( *a2 < 0 )
    {
      if ( !*(_DWORD *)(a1 + 196) )
        goto LABEL_26;
      if ( result >= *(_DWORD *)(*(_DWORD *)(a1 + 32) + 4) && result <= *(_DWORD *)(*(_DWORD *)(a1 + 36) + 4) )
      {
        RecordBit(a1, 2);
        goto LABEL_19;
      }
      if ( result >= *(_DWORD *)(*(_DWORD *)(a1 + 24) + 4) && result <= *(_DWORD *)(*(_DWORD *)(a1 + 28) + 4) )
      {
        RecordBit(a1, 1);
        goto LABEL_19;
      }
      goto LABEL_25;
    }
    goto LABEL_31;
  }
  v4 = v3 - 1;
  if ( v4 )
  {
    result = v4 - 1;
    if ( result )
      return result;
    v6 = a2;
    result = *a2;
    if ( *a2 < 0 )
    {
      if ( !*(_DWORD *)(a1 + 196) )
      {
LABEL_26:
        *v6 = 0;
        return result;
      }
      if ( result >= *(_DWORD *)(*(_DWORD *)(a1 + 40) + 4) && result <= *(_DWORD *)(*(_DWORD *)(a1 + 44) + 4) )
      {
        RecordBit(a1, 3);
LABEL_19:
        *(_DWORD *)(a1 + 196) = 0;
        *v6 = 0;
        goto LABEL_20;
      }
      if ( result >= *(_DWORD *)(*(_DWORD *)(a1 + 48) + 4) && result <= *(_DWORD *)(*(_DWORD *)(a1 + 52) + 4) )
      {
        RecordBit(a1, 4);
        goto LABEL_19;
      }
      if ( result >= *(_DWORD *)(*(_DWORD *)(a1 + 56) + 4) && result <= *(_DWORD *)(*(_DWORD *)(a1 + 60) + 4) )
      {
        RecordBit(a1, 5);
        goto LABEL_19;
      }
      if ( result >= *(_DWORD *)(*(_DWORD *)(a1 + 64) + 4) && result <= *(_DWORD *)(*(_DWORD *)(a1 + 68) + 4) )
      {
        RecordBit(a1, 6);
        goto LABEL_19;
      }
LABEL_25:
      result = DecoderReset(a1);
      goto LABEL_26;
    }
    if ( result < **(_DWORD **)(a1 + 40) )
      goto LABEL_25;
    v7 = *(_DWORD *)(a1 + 44);
    goto LABEL_24;
  }
  v8 = *(_DWORD *)(a1 + 196);
  v6 = a2;
  result = *a2;
  if ( !v8 )
  {
    if ( result < **(_DWORD **)(a1 + 24) || result > **(_DWORD **)(a1 + 28) )
    {
LABEL_31:
      if ( result < **(_DWORD **)(a1 + 32) )
        goto LABEL_25;
      v7 = *(_DWORD *)(a1 + 36);
LABEL_24:
      if ( result > *(_DWORD *)v7 )
        goto LABEL_25;
LABEL_78:
      *(_DWORD *)(a1 + 196) = 2;
      goto LABEL_26;
    }
LABEL_81:
    *(_DWORD *)(a1 + 196) = 1;
    goto LABEL_26;
  }
  if ( v8 == 2 )
  {
    v9 = *(_DWORD *)(*(_DWORD *)(a1 + 32) + 4);
    if ( result >= v9 && result <= *(_DWORD *)(*(_DWORD *)(a1 + 36) + 4) )
    {
      RecordBit(a1, 2);
      result = *(_DWORD *)(a1 + 192);
      if ( result == *(_DWORD *)(a1 + 16) )
        result = Keypress(a1);
      *(_DWORD *)(a1 + 196) = 0;
      goto LABEL_26;
    }
    v10 = result == 0;
    v11 = result < 0;
    if ( result < 0 )
    {
      if ( result < v9 )
      {
LABEL_44:
        RecordBit(a1, 2);
        if ( *(_DWORD *)(a1 + 192) == *(_DWORD *)(a1 + 16) )
          Keypress(a1);
        v12 = *(_DWORD *)(a1 + 36);
        v13 = *(_DWORD *)(a1 + 32);
LABEL_60:
        *(_DWORD *)(a1 + 196) = 0;
        v18 = *(_DWORD *)(v13 + 4) + *(_DWORD *)(v12 + 4);
        result = -(((signed int)v18 - HIDWORD(v18)) >> 1);
        *a2 += result;
        return result;
      }
      v10 = result == 0;
      v11 = result < 0;
    }
    if ( v11 || v10 || result <= *(_DWORD *)(*(_DWORD *)(a1 + 36) + 4) )
      goto LABEL_25;
    goto LABEL_44;
  }
  v14 = *(_DWORD *)(*(_DWORD *)(a1 + 24) + 4);
  if ( result < v14 || result > *(_DWORD *)(*(_DWORD *)(a1 + 28) + 4) )
  {
    v17 = 0;
    v15 = result == 0;
    v16 = result < 0;
    if ( result < 0 )
    {
      if ( result < v14 )
      {
LABEL_57:
        RecordBit(a1, *(_DWORD *)(a1 + 196));
        if ( *(_DWORD *)(a1 + 192) == *(_DWORD *)(a1 + 16) )
          Keypress(a1);
        v12 = *(_DWORD *)(a1 + 28);
        v13 = *(_DWORD *)(a1 + 24);
        goto LABEL_60;
      }
      v17 = 0;
      v15 = result == 0;
      v16 = result < 0;
    }
    if ( (unsigned __int8)(v16 ^ v17) | v15 || result <= *(_DWORD *)(*(_DWORD *)(a1 + 28) + 4) )
      goto LABEL_25;
    goto LABEL_57;
  }
  RecordBit(a1, *(_DWORD *)(a1 + 196));
  result = *(_DWORD *)(a1 + 192);
  if ( result == *(_DWORD *)(a1 + 16) )
    result = Keypress(a1);
  *(_DWORD *)(a1 + 196) = 0;
  *a2 = 0;
  return result;
}

//----- (00013402) --------------------------------------------------------
int __stdcall ProcessRLCPiece(int a1, int a2)
{
  int result; // eax@1
  int v3; // edi@6

  result = (int)WPP_GLOBAL_Control;
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 8
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 5u )
    result = WPP_SF_dddd(
               (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
               (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
               19,
               (int)dword_181F4,
               *(_DWORD *)(a1 + 8),
               a2,
               *(_DWORD *)(a1 + 168),
               *(_DWORD *)(a1 + 172));
  for ( ; a2; result = RecordTime(a1, v3 - a2) )
  {
    v3 = a2;
    switch ( *(_DWORD *)(a1 + 168) )
    {
      case 0:
        MatchFixedPattern(a1, (int)&a2, *(_DWORD *)(a1 + 72), *(_DWORD *)(a1 + 76), *(_DWORD *)(a1 + 80));
        break;
      case 1:
      case 4:
      case 7:
        MatchData(a1, &a2);
        break;
      case 2:
        MatchFixedPattern(a1, (int)&a2, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), *(_DWORD *)(a1 + 96));
        break;
      case 3:
        MatchFixedPattern(a1, (int)&a2, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), *(_DWORD *)(a1 + 108));
        break;
      case 5:
        MatchFixedPattern(a1, (int)&a2, *(_DWORD *)(a1 + 116), *(_DWORD *)(a1 + 120), *(_DWORD *)(a1 + 124));
        break;
      case 6:
        MatchFixedPattern(a1, (int)&a2, *(_DWORD *)(a1 + 128), *(_DWORD *)(a1 + 132), *(_DWORD *)(a1 + 136));
        break;
      case 8:
        MatchFixedPattern(a1, (int)&a2, *(_DWORD *)(a1 + 144), *(_DWORD *)(a1 + 148), *(_DWORD *)(a1 + 152));
        break;
      default:
        continue;
    }
  }
  return result;
}
// 181F4: using guessed type int dword_181F4[4];

//----- (00013514) --------------------------------------------------------
int __stdcall WPP_SF_S(int a1, int a2, int a3, int a4, int a5)
{
  int v5; // edx@1

  v5 = a5;
  if ( a5 )
  {
    if ( !*(_WORD *)a5 )
      v5 = (int)L"<NULL>";
  }
  else
  {
    v5 = (int)L"NULL";
  }
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, v5);
}
// 174CE: using guessed type wchar_t aNull_0[5];
// 174D8: using guessed type wchar_t aNull[7];
// 19104: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00013582) --------------------------------------------------------
size_t __stdcall IrClassEnqueueHIDReport(int a1, void *a2, size_t a3)
{
  int v3; // eax@1
  size_t result; // eax@2
  int v5; // eax@5

  v3 = *(_DWORD *)(a1 + 8200);
  *(_DWORD *)(a1 + 8196) += a3;
  if ( v3 + a3 <= 0x2000 )
  {
    memcpy((void *)(v3 + a1 + 4), a2, a3);
    result = a3 + *(_DWORD *)(a1 + 8200) != 0x2000 ? a3 + *(_DWORD *)(a1 + 8200) : 0;
    *(_DWORD *)(a1 + 8200) = result;
  }
  else
  {
    memcpy((void *)(v3 + a1 + 4), a2, 0x2000 - v3);
    result = (size_t)memcpy(
                       (void *)(a1 + 4),
                       (char *)a2 + -*(_DWORD *)(a1 + 8200) + 0x2000,
                       *(_DWORD *)(a1 + 8200) + a3 - 0x2000);
    *(_DWORD *)(a1 + 8200) += a3 - 0x2000;
  }
  if ( *(_DWORD *)(a1 + 8196) > 0x2000u )
  {
    v5 = *(_DWORD *)(a1 + 8200);
    *(_DWORD *)(a1 + 8196) = 0x2000;
    if ( v5 )
      result = v5 - 1;
    else
      result = 0x1FFF;
    *(_DWORD *)(a1 + 8204) = result;
  }
  return result;
}

//----- (00013646) --------------------------------------------------------
int __stdcall IrClassDequeueHIDReport(int a1, void *a2, size_t a3)
{
  int v3; // ebx@1
  int v4; // eax@4
  int v5; // edi@5
  int v6; // eax@5
  int result; // eax@7

  v3 = *(_DWORD *)(a1 + 8196);
  if ( v3 )
  {
    if ( v3 >= a3 )
      v3 = a3;
    v4 = *(_DWORD *)(a1 + 8204);
    if ( (unsigned int)(v4 + v3) <= 0x2000 )
    {
      memcpy(a2, (const void *)(v4 + a1 + 4), v3);
      v6 = *(_DWORD *)(a1 + 8204) + v3 != 0x2000 ? *(_DWORD *)(a1 + 8204) + v3 : 0;
    }
    else
    {
      v5 = 0x2000 - v4;
      memcpy(a2, (const void *)(v4 + a1 + 4), 0x2000 - v4);
      memcpy((char *)a2 + v5, (const void *)(a1 + 4), v3 - v5);
      v6 = v3 - v5;
    }
    *(_DWORD *)(a1 + 8196) -= v3;
    *(_DWORD *)(a1 + 8204) = v6;
    result = v3;
  }
  else
  {
    result = 0;
  }
  return result;
}

//----- (000136F0) --------------------------------------------------------
int __stdcall IrClassProcessRLCPiece(int a1, int a2)
{
  int result; // eax@1
  int v3; // edi@1
  int *v4; // eax@2

  result = 0;
  v3 = 0;
  if ( *(_WORD *)(a1 + 8292) > 0u )
  {
    do
    {
      v4 = (int *)(*(_DWORD *)(a1 + 8288) + 4 * v3);
      if ( *v4 )
        ProcessRLCPiece(*v4, a2);
      result = *(_WORD *)(a1 + 8292);
      ++v3;
    }
    while ( v3 < result );
  }
  return result;
}

//----- (00013736) --------------------------------------------------------
int __stdcall IrClassEvtPdoDestroy(int a1)
{
  int v1; // esi@1

  v1 = dword_19448(WdfDriverGlobals, a1, off_1900C);
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    WPP_SF_q(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      30,
      (int)dword_18204,
      a1);
  if ( *(_DWORD *)(v1 + 8260) )
    ExFreePool(*(PVOID *)(v1 + 8260));
  if ( *(_DWORD *)(v1 + 8264) )
    ExFreePool(*(PVOID *)(v1 + 8264));
  if ( *(_DWORD *)(v1 + 8256) )
    ExFreePool(*(PVOID *)(v1 + 8256));
  return IrClassCleanupDecoders(v1);
}
// 18204: using guessed type int dword_18204[4];
// 19448: using guessed type int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD);

//----- (000137C0) --------------------------------------------------------
void __stdcall IrClassEvtPdoRead(int a1, int a2, int NewIrql)
{
  int v3; // eax@1
  int v4; // esi@1
  int v5; // edi@7
  KSPIN_LOCK *v6; // edi@13
  KIRQL v7; // al@13
  int v8; // esi@13
  int v9; // ebx@13
  int v10; // esi@15
  void *v11; // [sp+8h] [bp-4h]@7
  KIRQL v12; // [sp+1Fh] [bp+13h]@13

  *(_DWORD *)(dword_19594(WdfDriverGlobals, a2) + 28) = 0;
  v3 = dword_19394(WdfDriverGlobals, a1);
  v4 = dword_19448(WdfDriverGlobals, v3, off_1900C);
  if ( (unsigned int)NewIrql >= 0x18 )
  {
    v5 = dword_19558(WdfDriverGlobals, a2, NewIrql, &v11, 0);
    if ( v5 >= 0 )
    {
      v6 = (KSPIN_LOCK *)(v4 + 8216);
      v7 = KfAcquireSpinLock((PKSPIN_LOCK)(v4 + 8216));
      v8 = v4 + 8;
      v12 = v7;
      v9 = IrClassDequeueHIDReport(v8, v11, 0x18u);
      if ( v9 )
      {
        KfReleaseSpinLock(v6, v12);
        dword_19544(WdfDriverGlobals, a2, 0, v9);
      }
      else
      {
        v10 = dword_19584(WdfDriverGlobals, a2, *(_DWORD *)v8);
        KfReleaseSpinLock(v6, v12);
        if ( v10 < 0 )
        {
          if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
            && WPP_GLOBAL_Control->Characteristics & 2
            && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
            WPP_SF_q(
              (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
              (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
              33,
              (int)dword_18204,
              v10);
          dword_1953C(WdfDriverGlobals, a2, v10);
        }
      }
    }
    else
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 2
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          32,
          (int)dword_18204,
          v5);
      dword_1953C(WdfDriverGlobals, a2, v5);
    }
  }
  else
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 2
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        31,
        (int)dword_18204,
        24);
    dword_19544(WdfDriverGlobals, a2, -1073741789, 24);
  }
}
// 18204: using guessed type int dword_18204[4];
// 19394: using guessed type int (__stdcall *dword_19394)(_DWORD, _DWORD);
// 19448: using guessed type int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD);
// 1953C: using guessed type int (__stdcall *dword_1953C)(_DWORD, _DWORD, _DWORD);
// 19544: using guessed type int (__stdcall *dword_19544)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19558: using guessed type int (__stdcall *dword_19558)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19584: using guessed type int (__stdcall *dword_19584)(_DWORD, _DWORD, _DWORD);
// 19594: using guessed type int (__stdcall *dword_19594)(_DWORD, _DWORD);

//----- (0001394A) --------------------------------------------------------
void __stdcall IrClassDecodeRlc(int a1, int NewIrql, int a3, int a4)
{
  int v4; // edi@1
  int v5; // ST0C_4@1
  unsigned int v6; // ebx@1
  unsigned int v7; // esi@1
  unsigned int v8; // esi@8
  int *v9; // eax@9
  char v10; // bl@14
  int v11; // esi@20
  void *v12; // [sp+10h] [bp-8h]@1
  int v13; // [sp+14h] [bp-4h]@1
  int v14; // [sp+20h] [bp+8h]@1
  KIRQL v15; // [sp+27h] [bp+Fh]@4

  v4 = a1;
  v14 = a1 + 8;
  v5 = *(_DWORD *)v14;
  v6 = 0;
  v13 = 0;
  v12 = 0;
  v7 = (unsigned int)NewIrql >> 2;
  if ( dword_19398(WdfDriverGlobals, v5, &v13) < 0 || dword_19558(WdfDriverGlobals, v13, 24, &v12, 0) >= 0 )
  {
    v15 = KfAcquireSpinLock((PKSPIN_LOCK)(v4 + 8280));
    if ( v7 )
    {
      if ( v7 )
      {
        do
          IrClassProcessRLCPiece(v4, *(_DWORD *)(a3 + 4 * v6++));
        while ( v6 < v7 );
      }
      if ( a4 )
      {
        v8 = 0;
        IrClassProcessRLCPiece(v4, 0);
        if ( *(_WORD *)(v4 + 8292) > 0u )
        {
          do
          {
            v9 = (int *)(*(_DWORD *)(v4 + 8288) + 4 * v8);
            if ( *v9 )
              DecoderReset(*v9);
            ++v8;
          }
          while ( v8 < *(_WORD *)(v4 + 8292) );
        }
      }
    }
    else
    {
      IrClassProcessRLCPiece(v4, 0);
    }
    v10 = 0;
    if ( v12 && IrClassDequeueHIDReport(v14, v12, 0x18u) )
      v10 = 1;
    KfReleaseSpinLock((PKSPIN_LOCK)(v4 + 8280), v15);
    if ( v10 )
    {
      dword_19544(WdfDriverGlobals, v13, 0, 24);
    }
    else if ( v13 )
    {
      v11 = dword_1958C(WdfDriverGlobals, v13);
      if ( v11 < 0 )
      {
        if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && WPP_GLOBAL_Control->Characteristics & 2
          && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
          WPP_SF_q(
            (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
            (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
            37,
            (int)dword_18204,
            v11);
        dword_1953C(WdfDriverGlobals, v13, v11);
      }
    }
  }
  else
  {
    dword_1953C(WdfDriverGlobals, v13, -1073741592);
  }
}
// 18204: using guessed type int dword_18204[4];
// 19398: using guessed type int (__stdcall *dword_19398)(_DWORD, _DWORD, _DWORD);
// 1953C: using guessed type int (__stdcall *dword_1953C)(_DWORD, _DWORD, _DWORD);
// 19544: using guessed type int (__stdcall *dword_19544)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19558: using guessed type int (__stdcall *dword_19558)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1958C: using guessed type int (__stdcall *dword_1958C)(_DWORD, _DWORD);

//----- (00013AB8) --------------------------------------------------------
int __stdcall IrClassEvtPdoGenericComplete(int a1, int a2, int a3, int a4)
{
  return dword_19544(WdfDriverGlobals, a1, *(_DWORD *)(a3 + 8), *(_DWORD *)(a3 + 12));
}
// 19544: using guessed type int (__stdcall *dword_19544)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19764: using guessed type int WdfDriverGlobals;

//----- (00013ADE) --------------------------------------------------------
int __stdcall IrClassEvtPdoDeviceControl(int a1, int a2, int a3, int a4, int a5)
{
  int v5; // eax@2
  int v6; // edi@2
  int result; // eax@6
  int v8; // edi@7

  if ( a5 == 257982520 )
  {
    v5 = dword_19394(WdfDriverGlobals, a1);
    v6 = dword_19448(WdfDriverGlobals, v5, off_1900C);
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 2
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
      WPP_SF_qqD(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        42,
        (int)dword_18204,
        a2,
        56,
        *(_DWORD *)(v6 + 8244));
    dword_1950C(WdfDriverGlobals, a2);
    dword_19530(WdfDriverGlobals, a2, IrClassEvtPdoGenericComplete, 0);
    result = dword_19514(WdfDriverGlobals, a2, *(_DWORD *)(v6 + 8244), 0);
    if ( !(_BYTE)result )
    {
      v8 = dword_19518(WdfDriverGlobals, a2);
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 2
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          43,
          (int)dword_18204,
          v8);
      result = dword_1953C(WdfDriverGlobals, a2, v8);
    }
  }
  else
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 2
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        44,
        (int)dword_18204,
        a5);
    result = dword_1953C(WdfDriverGlobals, a2, -1073741808);
  }
  return result;
}
// 18204: using guessed type int dword_18204[4];
// 19394: using guessed type int (__stdcall *dword_19394)(_DWORD, _DWORD);
// 19448: using guessed type int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD);
// 1950C: using guessed type int (__stdcall *dword_1950C)(_DWORD, _DWORD);
// 19514: using guessed type int (__stdcall *dword_19514)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19518: using guessed type int (__stdcall *dword_19518)(_DWORD, _DWORD);
// 19530: using guessed type int (__stdcall *dword_19530)(_DWORD, _DWORD, _DWORD, _DWORD);
// 1953C: using guessed type int (__stdcall *dword_1953C)(_DWORD, _DWORD, _DWORD);

//----- (00013C16) --------------------------------------------------------
int __stdcall IrClassEvtPdoPingPongIoctlComplete(int a1, int a2, int a3, int a4)
{
  int v4; // esi@1
  int result; // eax@2
  int v6; // ST10_4@10
  int v7; // eax@17
  int v8; // [sp+Ch] [bp-38h]@12
  int v9; // [sp+18h] [bp-2Ch]@12
  int v10; // [sp+1Ch] [bp-28h]@12
  int v11; // [sp+20h] [bp-24h]@12
  int v12; // [sp+28h] [bp-1Ch]@12
  int v13; // [sp+2Ch] [bp-18h]@12
  int (__stdcall *v14)(int); // [sp+30h] [bp-14h]@12
  int v15; // [sp+34h] [bp-10h]@12
  int v16; // [sp+38h] [bp-Ch]@12
  int v17; // [sp+3Ch] [bp-8h]@12
  int v18; // [sp+40h] [bp-4h]@12

  v4 = dword_19448(WdfDriverGlobals, a1, off_19070);
  if ( *(_DWORD *)(a3 + 8) >= 0 )
  {
    IrClassDecodeRlc(a4, *(_DWORD *)(a3 + 12) - 8, v4 + 12, *(_DWORD *)(v4 + 4));
    result = dword_19710(WdfDriverGlobals, *(_DWORD *)v4);
  }
  else
  {
    result = (int)WPP_GLOBAL_Control;
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 2
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
    {
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        34,
        (int)dword_18204,
        *(_DWORD *)(a3 + 8));
      result = (int)WPP_GLOBAL_Control;
    }
    if ( *(_BYTE *)(a4 + 8248) )
    {
      memset(&v8, 0, 0x20u);
      v11 = *(_DWORD *)(a4 + 8232);
      v12 = off_1905C;
      v16 = 0;
      v15 = 0;
      v17 = 0;
      v8 = 32;
      v9 = 1;
      v10 = 1;
      v13 = 20;
      v14 = IrClassBackoffTimerFunc;
      LOBYTE(v16) = 1;
      result = dword_19618(WdfDriverGlobals, &v13, &v8, &v18);
      if ( result >= 0 )
      {
        v7 = dword_19448(WdfDriverGlobals, v18, off_1905C);
        *(_DWORD *)(v7 + 8) = *(_DWORD *)(a3 + 28);
        *(_DWORD *)v7 = *(_DWORD *)(a4 + 8244);
        *(_DWORD *)(v7 + 4) = a1;
        *(_DWORD *)(v7 + 12) = a4;
        result = dword_1961C(WdfDriverGlobals, v18, -10000000, -1);
      }
      else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
             && WPP_GLOBAL_Control->Characteristics & 2
             && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      {
        result = WPP_SF_q(
                   (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
                   (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
                   36,
                   (int)dword_18204,
                   result);
      }
    }
    else if ( (PDEVICE_OBJECT *)result != &WPP_GLOBAL_Control
           && *(_BYTE *)(result + 32) & 2
           && *(_BYTE *)(result + 29) >= 2u )
    {
      v6 = dword_193D4(WdfDriverGlobals, *(_DWORD *)(a4 + 8244));
      result = WPP_SF_q(
                 (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
                 (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
                 35,
                 (int)dword_18204,
                 v6);
    }
  }
  return result;
}
// 18204: using guessed type int dword_18204[4];
// 193D4: using guessed type int (__stdcall *dword_193D4)(_DWORD, _DWORD);
// 19448: using guessed type int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD);
// 19618: using guessed type int (__stdcall *dword_19618)(_DWORD, _DWORD, _DWORD, _DWORD);
// 1961C: using guessed type int (__stdcall *dword_1961C)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19710: using guessed type int (__stdcall *dword_19710)(_DWORD, _DWORD);

//----- (00013DDE) --------------------------------------------------------
int __stdcall IrClassResubmitPingPongIoctlRequest(int a1, int a2, int a3, int a4)
{
  int result; // eax@1
  PDEVICE_OBJECT v5; // ecx@2
  int v6; // ST1C_4@16
  int v7; // [sp-Ch] [bp-24h]@5
  int v8; // [sp-8h] [bp-20h]@5
  int v9; // [sp-4h] [bp-1Ch]@5
  int v10; // [sp+8h] [bp-10h]@1
  int v11; // [sp+Ch] [bp-Ch]@1
  int v12; // [sp+10h] [bp-8h]@1
  int v13; // [sp+14h] [bp-4h]@1

  v13 = 0;
  v10 = 16;
  v11 = 0;
  v12 = 0;
  result = dword_19504(WdfDriverGlobals, a2, &v10);
  if ( result >= 0 )
  {
    result = dword_1940C(WdfDriverGlobals, a1, a2, 257966106, 0, 0, a3, 0);
    if ( result >= 0 )
    {
      dword_19530(WdfDriverGlobals, a2, IrClassEvtPdoPingPongIoctlComplete, a4);
      result = dword_19514(WdfDriverGlobals, a2, a1, 0);
      if ( !(_BYTE)result )
      {
        result = (int)WPP_GLOBAL_Control;
        if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && WPP_GLOBAL_Control->Characteristics & 2
          && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        {
          v6 = dword_19518(WdfDriverGlobals, a2);
          result = WPP_SF_q(
                     (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
                     (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
                     40,
                     (int)dword_18204,
                     v6);
        }
      }
    }
    else
    {
      v5 = WPP_GLOBAL_Control;
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 2
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      {
        v9 = result;
        v8 = (int)dword_18204;
        v7 = 39;
        return WPP_SF_q((int)&v5->AttachedDevice->Type, (int)&v5->CurrentIrp->Type, v7, v8, v9);
      }
    }
  }
  else
  {
    v5 = WPP_GLOBAL_Control;
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 2
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
    {
      v9 = result;
      v8 = (int)dword_18204;
      v7 = 38;
      return WPP_SF_q((int)&v5->AttachedDevice->Type, (int)&v5->CurrentIrp->Type, v7, v8, v9);
    }
  }
  return result;
}
// 18204: using guessed type int dword_18204[4];
// 1940C: using guessed type int (__stdcall *dword_1940C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19504: using guessed type int (__stdcall *dword_19504)(_DWORD, _DWORD, _DWORD);
// 19514: using guessed type int (__stdcall *dword_19514)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19518: using guessed type int (__stdcall *dword_19518)(_DWORD, _DWORD);
// 19530: using guessed type int (__stdcall *dword_19530)(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00013F06) --------------------------------------------------------
int __stdcall IrClassPingPongRequestResubmitWorker(int a1)
{
  int v1; // eax@1
  int *v2; // esi@1
  int v3; // eax@1

  v1 = dword_19448(WdfDriverGlobals, a1, off_19084);
  v2 = (int *)v1;
  v3 = dword_19448(WdfDriverGlobals, *(_DWORD *)v1, off_19070);
  return IrClassResubmitPingPongIoctlRequest(
           *(_DWORD *)(*(_DWORD *)(v3 + 84) + 8244),
           *v2,
           *(_DWORD *)(v3 + 80),
           *(_DWORD *)(v3 + 84));
}
// 19448: using guessed type int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD);

//----- (00013F56) --------------------------------------------------------
int __stdcall IrClassBackoffTimerFunc(int a1)
{
  int v1; // eax@1

  v1 = dword_19448(WdfDriverGlobals, a1, off_1905C);
  if ( *(_BYTE *)(*(_DWORD *)(v1 + 12) + 8248) )
  {
    IrClassResubmitPingPongIoctlRequest(*(_DWORD *)v1, *(_DWORD *)(v1 + 4), *(_DWORD *)(v1 + 8), *(_DWORD *)(v1 + 12));
  }
  else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
         && WPP_GLOBAL_Control->Characteristics & 2
         && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
  {
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      41,
      (int)dword_18204);
  }
  return dword_19460(WdfDriverGlobals, a1);
}
// 18204: using guessed type int dword_18204[4];
// 19448: using guessed type int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD);
// 19460: using guessed type int (__stdcall *dword_19460)(_DWORD, _DWORD);

//----- (00013FCE) --------------------------------------------------------
int __stdcall IrClassInitPDO(int a1, PVOID a2, int a3, int a4)
{
  PVOID v4; // ebx@1
  int v5; // esi@1
  int v6; // eax@1
  int v7; // edi@1
  int v9; // esi@18
  int v10; // ST18_4@25
  int v11; // esi@26
  int v12; // edx@29
  int v13; // eax@29
  PVOID v14; // ecx@29
  int v15; // edx@29
  int v16; // ST1C_4@62
  int v17; // [sp+Ch] [bp-84h]@12
  int v18; // [sp+10h] [bp-80h]@12
  int v19; // [sp+14h] [bp-7Ch]@12
  int v20; // [sp+40h] [bp-50h]@25
  int v21; // [sp+4Ch] [bp-44h]@25
  int v22; // [sp+50h] [bp-40h]@25
  int v23; // [sp+5Ch] [bp-34h]@25
  int v24; // [sp+60h] [bp-30h]@26
  int v25; // [sp+6Ch] [bp-24h]@26
  int v26; // [sp+70h] [bp-20h]@26
  int v27; // [sp+74h] [bp-1Ch]@26
  int v28; // [sp+7Ch] [bp-14h]@26
  int v29; // [sp+80h] [bp-10h]@26
  int (__stdcall *v30)(int); // [sp+84h] [bp-Ch]@26
  int v31; // [sp+88h] [bp-8h]@26
  int v32; // [sp+8Ch] [bp-4h]@26
  int v33; // [sp+98h] [bp+8h]@12
  int v34; // [sp+98h] [bp+8h]@29

  v4 = a2;
  v5 = a3;
  *((_BYTE *)a2 + 4) = 0;
  *((_DWORD *)v4 + 2061) = *(_DWORD *)(v5 + 16);
  v6 = a4;
  *((_DWORD *)v4 + 2060) = a4;
  *((_DWORD *)v4 + 2059) = *(_DWORD *)v6;
  *((_DWORD *)v4 + 2058) = a1;
  *(_DWORD *)v4 = dword_1919C(WdfDriverGlobals, a1);
  KeInitializeSpinLock((PKSPIN_LOCK)v4 + 2054);
  *((_DWORD *)v4 + 2051) = 0;
  *((_DWORD *)v4 + 2053) = 0;
  *((_DWORD *)v4 + 2052) = 0;
  *((_DWORD *)v4 + 2056) = 1;
  *((_DWORD *)v4 + 2057) = 1162244681;
  KeInitializeSpinLock((PKSPIN_LOCK)v4 + 2070);
  qmemcpy((char *)v4 + 8252, (const void *)v5, 0x18u);
  v7 = dword_19600(WdfDriverGlobals, 0, (char *)v4 + 8296);
  if ( v7 < 0 )
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        20,
        (int)dword_18204,
        v7);
    return v7;
  }
  v7 = dword_19154(WdfDriverGlobals, 0, (char *)v4 + 8300);
  if ( v7 < 0 )
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        21,
        (int)dword_18204,
        v7);
    return v7;
  }
  memset(&v17, 0, 0x34u);
  v17 = 52;
  v19 = 2;
  v18 = 3;
  v33 = dword_19380(WdfDriverGlobals, a1, &v17, 0, (char *)v4 + 8);
  if ( v33 < 0 )
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        22,
        (int)dword_18204,
        v33);
    return v33;
  }
  memset(&v17, 0, 0x34u);
  v17 = 52;
  v19 = 2;
  v18 = 3;
  v9 = IrClassReadAllDecoderConfigs(v4);
  if ( v9 < 0 )
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        23,
        (int)dword_18204,
        v9);
    return v9;
  }
  a4 = 0;
  while ( 1 )
  {
    memset(&v20, 0, 0x20u);
    v21 = 1;
    v22 = 1;
    v23 = off_19070;
    v10 = *((_DWORD *)v4 + 2061);
    v20 = 32;
    v9 = dword_194FC(WdfDriverGlobals, &v20, v10, &a2);
    if ( v9 < 0 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 2
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          24,
          (int)dword_18204,
          v9);
      return v9;
    }
    v11 = dword_19448(WdfDriverGlobals, a2, off_19070);
    memset((void *)v11, 0, 0x58u);
    memset(&v24, 0, 0x20u);
    v25 = 1;
    v26 = 1;
    v27 = *((_DWORD *)v4 + 2058);
    v28 = off_19084;
    v31 = 0;
    v24 = 32;
    v29 = 12;
    v30 = IrClassPingPongRequestResubmitWorker;
    LOBYTE(v31) = 0;
    v33 = dword_1970C(WdfDriverGlobals, &v29, &v24, &v32);
    if ( v33 < 0 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          25,
          (int)dword_18204,
          v33);
      goto LABEL_42;
    }
    v33 = dword_19424(WdfDriverGlobals, 0, v11 + 4, 76, &a3);
    if ( v33 < 0 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          26,
          (int)dword_18204,
          v33);
      dword_19460(WdfDriverGlobals, *(_DWORD *)v11);
      goto LABEL_42;
    }
    *(_DWORD *)(v11 + 8) = 64;
    v33 = dword_1940C(WdfDriverGlobals, *((_DWORD *)v4 + 2061), a2, 257966106, 0, 0, a3, 0);
    if ( v33 < 0 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 2
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          27,
          (int)dword_18204,
          v33);
      dword_19460(WdfDriverGlobals, *(_DWORD *)v11);
      dword_19460(WdfDriverGlobals, a3);
LABEL_42:
      dword_19460(WdfDriverGlobals, a2);
      return v33;
    }
    *(_DWORD *)(v11 + 84) = v4;
    *(_DWORD *)v11 = v32;
    v12 = *(_DWORD *)v11;
    *(_DWORD *)(v11 + 80) = a3;
    v13 = dword_19448(WdfDriverGlobals, v12, off_19084);
    v14 = a2;
    *(_DWORD *)v13 = a2;
    dword_19604(v14, v15, WdfDriverGlobals, *((_DWORD *)v4 + 2074), 0);
    v34 = dword_1915C(WdfDriverGlobals, *((_DWORD *)v4 + 2075), a2);
    dword_19608(WdfDriverGlobals, *((_DWORD *)v4 + 2074));
    v7 = v34;
    if ( v34 < 0 )
      break;
    dword_19530(WdfDriverGlobals, a2, IrClassEvtPdoPingPongIoctlComplete, v4);
    if ( !(unsigned __int8)dword_19514(WdfDriverGlobals, a2, *((_DWORD *)v4 + 2061), 0) )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      {
        v16 = dword_19518(WdfDriverGlobals, a2);
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          29,
          (int)dword_18204,
          v16);
      }
      goto LABEL_58;
    }
    ++a4;
    if ( (unsigned int)a4 >= 2 )
      return 0;
  }
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 2
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
    WPP_SF_q(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      28,
      (int)dword_18204,
      v34);
LABEL_58:
  dword_19460(WdfDriverGlobals, *(_DWORD *)v11);
  dword_19460(WdfDriverGlobals, a3);
  dword_19460(WdfDriverGlobals, a2);
  return v7;
}
// 18204: using guessed type int dword_18204[4];
// 19154: using guessed type int (__stdcall *dword_19154)(_DWORD, _DWORD, _DWORD);
// 1915C: using guessed type int (__stdcall *dword_1915C)(_DWORD, _DWORD, _DWORD);
// 1919C: using guessed type int (__stdcall *dword_1919C)(_DWORD, _DWORD);
// 19380: using guessed type int (__stdcall *dword_19380)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1940C: using guessed type int (__stdcall *dword_1940C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19424: using guessed type int (__stdcall *dword_19424)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19448: using guessed type int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD);
// 19460: using guessed type int (__stdcall *dword_19460)(_DWORD, _DWORD);
// 194FC: using guessed type int (__stdcall *dword_194FC)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19514: using guessed type int (__stdcall *dword_19514)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19518: using guessed type int (__stdcall *dword_19518)(_DWORD, _DWORD);
// 19530: using guessed type int (__stdcall *dword_19530)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19600: using guessed type int (__stdcall *dword_19600)(_DWORD, _DWORD, _DWORD);
// 19604: using guessed type int (__fastcall *dword_19604)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19608: using guessed type int (__stdcall *dword_19608)(_DWORD, _DWORD);
// 1970C: using guessed type int (__stdcall *dword_1970C)(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00014536) --------------------------------------------------------
int __stdcall IrClassEvtDeviceListCreatePdo(int a1, int a2, int a3)
{
  int i; // edi@11
  int j; // edi@19
  int v5; // esi@31
  int v7; // eax@46
  char v8; // cl@46
  int v9; // esi@48
  int v10; // eax@48
  int v11; // [sp+Ch] [bp-FCh]@53
  int v12; // [sp+10h] [bp-F8h]@53
  int v13; // [sp+14h] [bp-F4h]@53
  char v14; // [sp+19h] [bp-EFh]@53
  void (__stdcall *v15)(int, int, int); // [sp+20h] [bp-E8h]@53
  int (__stdcall *v16)(int, int, int, int, int); // [sp+28h] [bp-E0h]@53
  int v17; // [sp+3Ch] [bp-CCh]@53
  int v18; // [sp+40h] [bp-C8h]@41
  int (__stdcall *v19)(int); // [sp+48h] [bp-C0h]@41
  int v20; // [sp+4Ch] [bp-BCh]@41
  int v21; // [sp+50h] [bp-B8h]@41
  int v22; // [sp+5Ch] [bp-ACh]@41
  UNICODE_STRING DestinationString; // [sp+60h] [bp-A8h]@5
  UNICODE_STRING v24; // [sp+68h] [bp-A0h]@31
  UNICODE_STRING v25; // [sp+70h] [bp-98h]@16
  UNICODE_STRING v26; // [sp+78h] [bp-90h]@28
  int v27; // [sp+80h] [bp-88h]@58
  int v28; // [sp+84h] [bp-84h]@58
  int v29; // [sp+88h] [bp-80h]@58
  int v30; // [sp+8Ch] [bp-7Ch]@58
  int v31; // [sp+90h] [bp-78h]@58
  int v32; // [sp+94h] [bp-74h]@58
  int v33; // [sp+98h] [bp-70h]@58
  char v34; // [sp+9Ch] [bp-6Ch]@58
  int v35; // [sp+A0h] [bp-68h]@58
  int v36; // [sp+A4h] [bp-64h]@58
  int v37; // [sp+A8h] [bp-60h]@58
  int v38; // [sp+ACh] [bp-5Ch]@58
  int v39; // [sp+B0h] [bp-58h]@58
  int v40; // [sp+B4h] [bp-54h]@58
  int v41; // [sp+B8h] [bp-50h]@58
  int v42; // [sp+BCh] [bp-4Ch]@58
  int v43; // [sp+C0h] [bp-48h]@58
  int v44; // [sp+C4h] [bp-44h]@58
  int v45; // [sp+C8h] [bp-40h]@58
  int v46; // [sp+CCh] [bp-3Ch]@58
  int v47; // [sp+D0h] [bp-38h]@58
  int v48; // [sp+D4h] [bp-34h]@58
  int v49; // [sp+D8h] [bp-30h]@58
  int v50; // [sp+DCh] [bp-2Ch]@58
  int v51; // [sp+E0h] [bp-28h]@58
  int v52; // [sp+E4h] [bp-24h]@58
  int v53; // [sp+E8h] [bp-20h]@58
  int v54; // [sp+ECh] [bp-1Ch]@58
  int v55; // [sp+F0h] [bp-18h]@58
  int v56; // [sp+F4h] [bp-14h]@58
  int v57; // [sp+F8h] [bp-10h]@58
  int v58; // [sp+FCh] [bp-Ch]@58
  int v59; // [sp+100h] [bp-8h]@1
  int v60; // [sp+104h] [bp-4h]@1
  int v61; // [sp+110h] [bp+8h]@5

  v60 = 0;
  v59 = dword_19124(WdfDriverGlobals, a1);
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      10,
      (int)dword_18204);
  dword_19228(WdfDriverGlobals, a3, 34);
  dword_19214(WdfDriverGlobals, a3, 3);
  RtlInitUnicodeString(&DestinationString, *(PCWSTR *)(a2 + 8));
  v61 = dword_19470(WdfDriverGlobals, a3, &DestinationString);
  if ( v61 >= 0 )
  {
    for ( i = *(_DWORD *)(a2 + 8); *(_WORD *)i; i += 2 * wcslen((const unsigned __int16 *)i) + 2 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
        WPP_SF_S(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          12,
          (int)dword_18204,
          i);
      RtlInitUnicodeString(&v25, (PCWSTR)i);
      v61 = dword_19478(WdfDriverGlobals, a3, &v25);
      if ( v61 < 0 )
      {
        if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && WPP_GLOBAL_Control->Characteristics & 1
          && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
          WPP_SF_q(
            (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
            (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
            13,
            (int)dword_18204,
            v61);
        return v61;
      }
    }
    for ( j = *(_DWORD *)(a2 + 12); *(_WORD *)j; j += 2 * wcslen((const unsigned __int16 *)j) + 2 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
        WPP_SF_S(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          14,
          (int)dword_18204,
          j);
      RtlInitUnicodeString(&v26, (PCWSTR)j);
      v61 = dword_1947C(WdfDriverGlobals, a3, &v26);
      if ( v61 < 0 )
      {
        if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && WPP_GLOBAL_Control->Characteristics & 1
          && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
          WPP_SF_q(
            (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
            (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
            15,
            (int)dword_18204,
            v61);
        return v61;
      }
    }
    RtlInitUnicodeString(&v24, *(PCWSTR *)(a2 + 4));
    v5 = dword_19474(WdfDriverGlobals, a3, &v24);
    if ( v5 >= 0 )
    {
      memset(&v18, 0, 0x20u);
      v22 = off_1900C;
      v18 = 32;
      v20 = 1;
      v21 = 1;
      v19 = IrClassEvtPdoDestroy;
      v5 = dword_1924C(WdfDriverGlobals, &a3, &v18, &v60);
      if ( v5 >= 0 )
      {
        v7 = dword_1919C(WdfDriverGlobals, v60);
        v8 = *(_BYTE *)(*(_DWORD *)(a2 + 20) + 48);
        if ( v8 >= *(_BYTE *)(v7 + 48) )
          *(_BYTE *)(v7 + 48) = v8 + 1;
        v9 = dword_19448(WdfDriverGlobals, v60, off_1900C);
        v10 = dword_19448(WdfDriverGlobals, v59, off_19020);
        v61 = IrClassInitPDO(v60, (PVOID)v9, a2, v10);
        if ( v61 >= 0 )
        {
          *(_DWORD *)dword_19448(WdfDriverGlobals, *(_DWORD *)(v9 + 8244), off_19034) = v9;
          *(_BYTE *)(v9 + 8248) = 1;
          memset(&v11, 0, 0x34u);
          v11 = 52;
          v13 = 2;
          v14 = 1;
          v12 = 2;
          v17 = -1;
          v15 = IrClassEvtPdoRead;
          v16 = IrClassEvtPdoDeviceControl;
          v61 = dword_19380(WdfDriverGlobals, v60, &v11, 0, 0);
          if ( v61 >= 0 )
          {
            v47 = 48;
            v48 = 2;
            v51 = 2;
            v52 = 2;
            v53 = 2;
            v55 = 2;
            v56 = 2;
            v57 = -1;
            v58 = -1;
            v50 = 1;
            v49 = 1;
            v54 = 1;
            dword_1926C(WdfDriverGlobals, v60, &v47);
            v27 = 80;
            v28 = 2;
            v29 = 2;
            v30 = 2;
            v31 = 2;
            v32 = 2;
            v33 = 2;
            memset32(&v34, 5, 7u);
            v41 = 5;
            v46 = 5;
            v37 = 3;
            v38 = 3;
            v39 = 4;
            v40 = 4;
            v42 = 7;
            v43 = -1;
            v44 = -1;
            v45 = -1;
            v35 = 2;
            v36 = 2;
            dword_19270(WdfDriverGlobals, v60, &v27);
            dword_19458(
              WdfDriverGlobals,
              *(_DWORD *)(a2 + 16),
              0,
              352,
              "d:\\w7rtm\\drivers\\wdm\\ir\\circlass\\ircpdo.c");
          }
          else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                 && WPP_GLOBAL_Control->Characteristics & 1
                 && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
          {
            WPP_SF_q(
              (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
              (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
              19,
              (int)dword_18204,
              v61);
          }
        }
        else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
               && WPP_GLOBAL_Control->Characteristics & 1
               && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        {
          WPP_SF_q(
            (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
            (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
            18,
            (int)dword_18204,
            v61);
        }
        return v61;
      }
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
        WPP_SF_S(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          17,
          (int)dword_18204,
          0);
    }
    else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
           && WPP_GLOBAL_Control->Characteristics & 1
           && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
    {
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        16,
        (int)dword_18204,
        v5);
    }
    return v5;
  }
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
    WPP_SF_q(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      11,
      (int)dword_18204,
      v61);
  return v61;
}
// 18204: using guessed type int dword_18204[4];
// 19124: using guessed type int (__stdcall *dword_19124)(_DWORD, _DWORD);
// 1919C: using guessed type int (__stdcall *dword_1919C)(_DWORD, _DWORD);
// 19214: using guessed type int (__stdcall *dword_19214)(_DWORD, _DWORD, _DWORD);
// 19228: using guessed type int (__stdcall *dword_19228)(_DWORD, _DWORD, _DWORD);
// 1924C: using guessed type int (__stdcall *dword_1924C)(_DWORD, _DWORD, _DWORD, _DWORD);
// 1926C: using guessed type int (__stdcall *dword_1926C)(_DWORD, _DWORD, _DWORD);
// 19270: using guessed type int (__stdcall *dword_19270)(_DWORD, _DWORD, _DWORD);
// 19380: using guessed type int (__stdcall *dword_19380)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19448: using guessed type int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD);
// 19458: using guessed type int (__stdcall *dword_19458)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19470: using guessed type int (__stdcall *dword_19470)(_DWORD, _DWORD, _DWORD);
// 19474: using guessed type int (__stdcall *dword_19474)(_DWORD, _DWORD, _DWORD);
// 19478: using guessed type int (__stdcall *dword_19478)(_DWORD, _DWORD, _DWORD);
// 1947C: using guessed type int (__stdcall *dword_1947C)(_DWORD, _DWORD, _DWORD);

//----- (00014AA8) --------------------------------------------------------
int __stdcall IrClassEvtFdoCreate(int a1, int a2, unsigned int a3)
{
  int v3; // edi@1
  int v4; // eax@1
  int *v5; // ebx@1
  int v6; // eax@1
  int v7; // edx@1
  int v8; // ecx@1
  int v9; // esi@1
  int v10; // eax@8
  int v11; // ebx@9
  int v12; // ST10_4@12
  int v13; // esi@23
  int v14; // eax@30
  int v15; // ebx@37
  int result; // eax@19
  int v17; // [sp+Ch] [bp-34h]@25
  int v18; // [sp+18h] [bp-28h]@25
  int v19; // [sp+1Ch] [bp-24h]@25
  UNICODE_STRING String2; // [sp+2Ch] [bp-14h]@9
  int v21; // [sp+34h] [bp-Ch]@9
  unsigned int v22; // [sp+38h] [bp-8h]@8
  int *v23; // [sp+3Ch] [bp-4h]@1

  v3 = dword_19448(WdfDriverGlobals, a1, off_19020);
  v4 = dword_19448(WdfDriverGlobals, a3, off_19048);
  v5 = (int *)v4;
  v23 = (int *)v4;
  v6 = dword_19344(WdfDriverGlobals, a3);
  v9 = v6;
  if ( v6 && *(_WORD *)v6 >= 4u && **(_WORD **)(v6 + 4) == 92 )
  {
    *v5 = 0;
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
      WPP_SF_Z(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        11,
        (int)dword_18214,
        v6);
    dword_19604(v8, v7, WdfDriverGlobals, *(_DWORD *)(v3 + 20), 0);
    v10 = dword_19158(WdfDriverGlobals, *(_DWORD *)(v3 + 16));
    a3 = 0;
    v22 = v10;
    if ( v10 )
    {
      while ( 1 )
      {
        v21 = dword_19168(WdfDriverGlobals, *(_DWORD *)(v3 + 16), a3);
        v11 = dword_19448(WdfDriverGlobals, v21, off_19034);
        String2.Length = *(_WORD *)v9 - 2;
        String2.MaximumLength = String2.Length;
        String2.Buffer = (PWSTR)(*(_DWORD *)(v9 + 4) + 2);
        if ( !RtlCompareUnicodeString((PCUNICODE_STRING)(v11 + 16), &String2, 1u) )
          break;
        ++a3;
        if ( a3 >= v22 )
          goto LABEL_13;
      }
      v12 = v21;
      *v23 = v21;
      dword_19454(WdfDriverGlobals, v12, 0, 121, "d:\\w7rtm\\drivers\\wdm\\ir\\circlass\\ircfdo.c");
      InterlockedIncrement((volatile LONG *)(v11 + 4));
LABEL_13:
      v5 = v23;
    }
    dword_19608(WdfDriverGlobals, *(_DWORD *)(v3 + 20));
    if ( *v5 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
      {
        v13 = (int)dword_18214;
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          13,
          (int)dword_18214,
          *v5);
      }
      else
      {
        v13 = (int)dword_18214;
      }
      memset(&v17, 0, 0x20u);
      v18 = 1;
      v19 = 1;
      v17 = 32;
      result = dword_194FC(WdfDriverGlobals, &v17, *v5, &a1);
      if ( result >= 0 )
      {
        v14 = dword_1940C(WdfDriverGlobals, *v5, a1, 257982512, 0, 0, 0, 0);
        if ( v14 >= 0 )
        {
          if ( !(unsigned __int8)dword_19514(WdfDriverGlobals, a1, *v5, 0) )
          {
            v15 = dword_19518(WdfDriverGlobals, a1);
            dword_19460(WdfDriverGlobals, a1);
            if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
              && WPP_GLOBAL_Control->Characteristics & 1
              && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
              WPP_SF_q(
                (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
                (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
                16,
                v13,
                v15);
          }
          result = dword_1953C(WdfDriverGlobals, a2, 0);
        }
        else
        {
          if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
            && WPP_GLOBAL_Control->Characteristics & 1
            && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
            WPP_SF_q(
              (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
              (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
              15,
              v13,
              v14);
          result = dword_19460(WdfDriverGlobals, a1);
        }
      }
      else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
             && WPP_GLOBAL_Control->Characteristics & 1
             && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      {
        result = WPP_SF_q(
                   (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
                   (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
                   14,
                   v13,
                   result);
      }
    }
    else
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          12,
          (int)dword_18214);
      result = dword_1953C(WdfDriverGlobals, a2, -1073741772);
    }
  }
  else
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        10,
        (int)dword_18214);
    result = dword_1953C(WdfDriverGlobals, a2, -1073741773);
  }
  return result;
}
// 18214: using guessed type int dword_18214[4];
// 19158: using guessed type int (__stdcall *dword_19158)(_DWORD, _DWORD);
// 19168: using guessed type int (__stdcall *dword_19168)(_DWORD, _DWORD, _DWORD);
// 19344: using guessed type int (__stdcall *dword_19344)(_DWORD, _DWORD);
// 1940C: using guessed type int (__stdcall *dword_1940C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19448: using guessed type int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD);
// 19454: using guessed type int (__stdcall *dword_19454)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19460: using guessed type int (__stdcall *dword_19460)(_DWORD, _DWORD);
// 194FC: using guessed type int (__stdcall *dword_194FC)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19514: using guessed type int (__stdcall *dword_19514)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19518: using guessed type int (__stdcall *dword_19518)(_DWORD, _DWORD);
// 1953C: using guessed type int (__stdcall *dword_1953C)(_DWORD, _DWORD, _DWORD);
// 19604: using guessed type int (__fastcall *dword_19604)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19608: using guessed type int (__stdcall *dword_19608)(_DWORD, _DWORD);

//----- (00014DF2) --------------------------------------------------------
int __stdcall IrClassEvtFdoClose(int a1)
{
  int *v1; // esi@1
  int v2; // ebx@1
  int v3; // ST18_4@1
  int v4; // eax@1
  int v5; // eax@8
  PDEVICE_OBJECT v6; // eax@15
  signed int v8; // [sp-8h] [bp-3Ch]@6
  int v9; // [sp-4h] [bp-38h]@6
  int v10; // [sp+Ch] [bp-28h]@1
  int v11; // [sp+18h] [bp-1Ch]@1
  int v12; // [sp+1Ch] [bp-18h]@1
  int v13; // [sp+2Ch] [bp-8h]@1
  int v14; // [sp+30h] [bp-4h]@15

  v1 = (int *)dword_19448(WdfDriverGlobals, a1, off_19048);
  v2 = dword_19448(WdfDriverGlobals, *v1, off_19034);
  memset(&v10, 0, 0x20u);
  v11 = 1;
  v12 = 1;
  v10 = 32;
  v3 = *v1;
  v13 = v2;
  v4 = dword_194FC(WdfDriverGlobals, &v10, v3, &a1);
  if ( v4 < 0 )
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 2
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        17,
        (int)dword_18214,
        v4);
    InterlockedDecrement((volatile LONG *)(v2 + 4));
    v9 = (int)"d:\\w7rtm\\drivers\\wdm\\ir\\circlass\\ircfdo.c";
    v8 = 254;
    return dword_19458(WdfDriverGlobals, *v1, 0, v8, v9);
  }
  v5 = dword_1940C(WdfDriverGlobals, *v1, a1, 257982516, 0, 0, 0, 0);
  if ( v5 >= 0 )
  {
    if ( !(unsigned __int8)dword_19514(WdfDriverGlobals, a1, *v1, 0) )
    {
      v14 = dword_19518(WdfDriverGlobals, a1);
      dword_19460(WdfDriverGlobals, a1);
      v6 = WPP_GLOBAL_Control;
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
      {
LABEL_24:
        InterlockedDecrement((volatile LONG *)(v13 + 4));
        v9 = (int)"d:\\w7rtm\\drivers\\wdm\\ir\\circlass\\ircfdo.c";
        v8 = 303;
        return dword_19458(WdfDriverGlobals, *v1, 0, v8, v9);
      }
      if ( !(WPP_GLOBAL_Control->Characteristics & 2) || BYTE1(WPP_GLOBAL_Control->Flags) < 2u )
      {
LABEL_20:
        if ( (PDEVICE_OBJECT *)v6 != &WPP_GLOBAL_Control && v6->Characteristics & 2 && BYTE1(v6->Flags) >= 4u )
          WPP_SF_q((int)&v6->AttachedDevice->Type, (int)&v6->CurrentIrp->Type, 20, (int)dword_18214, *v1);
        goto LABEL_24;
      }
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        19,
        (int)dword_18214,
        v14);
    }
    v6 = WPP_GLOBAL_Control;
    goto LABEL_20;
  }
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 2
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
    WPP_SF_q(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      18,
      (int)dword_18214,
      v5);
  dword_19460(WdfDriverGlobals, a1);
  InterlockedDecrement((volatile LONG *)(v2 + 4));
  v9 = (int)"d:\\w7rtm\\drivers\\wdm\\ir\\circlass\\ircfdo.c";
  v8 = 277;
  return dword_19458(WdfDriverGlobals, *v1, 0, v8, v9);
}
// 18214: using guessed type int dword_18214[4];
// 1940C: using guessed type int (__stdcall *dword_1940C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19448: using guessed type int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD);
// 19458: using guessed type int (__stdcall *dword_19458)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19460: using guessed type int (__stdcall *dword_19460)(_DWORD, _DWORD);
// 194FC: using guessed type int (__stdcall *dword_194FC)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19514: using guessed type int (__stdcall *dword_19514)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19518: using guessed type int (__stdcall *dword_19518)(_DWORD, _DWORD);

//----- (00014FD8) --------------------------------------------------------
int __stdcall IrClassEvtFdoGenericComplete(int a1, int a2, int a3, int a4)
{
  int v4; // eax@2
  int v5; // eax@7
  int v6; // eax@10
  int v7; // eax@11
  int *v8; // eax@12
  int v10; // [sp+8h] [bp-4h]@1

  v10 = 0;
  if ( *(_DWORD *)(a3 + 8) >= 0 )
  {
    v4 = dword_19594(WdfDriverGlobals, a1);
    if ( v4 )
    {
      v5 = *(_DWORD *)(v4 + 96);
      if ( *(_BYTE *)v5 == 14
        && *(_DWORD *)(v5 + 12) == 257966114
        && dword_19558(WdfDriverGlobals, a1, 16, &v10, 0) >= 0 )
      {
        v6 = dword_19574(WdfDriverGlobals, a1);
        if ( v6 )
        {
          v7 = dword_19448(WdfDriverGlobals, v6, off_19048);
          if ( v7 )
          {
            v8 = (int *)dword_19448(WdfDriverGlobals, *(_DWORD *)v7, off_19034);
            if ( v8 )
            {
              if ( *v8 )
                IrClassDecodeRlc(*v8, *(_DWORD *)(a3 + 12) - 12, v10 + 12, *(_DWORD *)v10);
            }
          }
        }
      }
    }
    else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
           && WPP_GLOBAL_Control->Characteristics & 2
           && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
    {
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        21,
        (int)dword_18214,
        a1);
    }
  }
  return dword_19544(WdfDriverGlobals, a1, *(_DWORD *)(a3 + 8), *(_DWORD *)(a3 + 12));
}
// 18214: using guessed type int dword_18214[4];
// 19448: using guessed type int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD);
// 19544: using guessed type int (__stdcall *dword_19544)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19558: using guessed type int (__stdcall *dword_19558)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19574: using guessed type int (__stdcall *dword_19574)(_DWORD, _DWORD);
// 19594: using guessed type int (__stdcall *dword_19594)(_DWORD, _DWORD);

//----- (000150EC) --------------------------------------------------------
int __stdcall IrClassEvtFdoDeviceControl(int a1, int a2, int a3, int a4, char a5)
{
  int v5; // eax@1
  char *v6; // edi@1
  int result; // eax@5
  int v8; // edi@6

  v5 = dword_19574(WdfDriverGlobals, a2);
  v6 = (char *)dword_19448(WdfDriverGlobals, v5, off_19048);
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 2
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    WPP_SF_qqD(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      22,
      (int)dword_18214,
      a2,
      a5,
      *(_DWORD *)v6);
  dword_1950C(WdfDriverGlobals, a2);
  dword_19530(WdfDriverGlobals, a2, IrClassEvtFdoGenericComplete, 0);
  result = dword_19514(WdfDriverGlobals, a2, *(_DWORD *)v6, 0);
  if ( !(_BYTE)result )
  {
    v8 = dword_19518(WdfDriverGlobals, a2);
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 2
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        23,
        (int)dword_18214,
        v8);
    result = dword_1953C(WdfDriverGlobals, a2, v8);
  }
  return result;
}
// 18214: using guessed type int dword_18214[4];
// 19448: using guessed type int (__fastcall *dword_19448)(_DWORD, _DWORD, _DWORD);
// 1950C: using guessed type int (__stdcall *dword_1950C)(_DWORD, _DWORD);
// 19514: using guessed type int (__stdcall *dword_19514)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19518: using guessed type int (__stdcall *dword_19518)(_DWORD, _DWORD);
// 19530: using guessed type int (__stdcall *dword_19530)(_DWORD, _DWORD, _DWORD, _DWORD);
// 1953C: using guessed type int (__stdcall *dword_1953C)(_DWORD, _DWORD, _DWORD);
// 19574: using guessed type int (__stdcall *dword_19574)(_DWORD, _DWORD);

//----- (000151D4) --------------------------------------------------------
NTSTATUS __stdcall IrClassQueryDeviceKey(HANDLE KeyHandle, PCWSTR SourceString, int a3, int a4)
{
  NTSTATUS v4; // eax@1
  PVOID v5; // esi@3
  int v6; // eax@5
  PVOID v7; // eax@6
  UNICODE_STRING DestinationString; // [sp+Ch] [bp-30h]@1
  HANDLE v10; // [sp+14h] [bp-28h]@1
  ULONG ResultLength; // [sp+18h] [bp-24h]@1
  NTSTATUS v12; // [sp+1Ch] [bp-20h]@1
  char KeyValueInformation; // [sp+20h] [bp-1Ch]@1

  *(_DWORD *)a3 = 0;
  *(_DWORD *)a4 = 0;
  v10 = KeyHandle;
  RtlInitUnicodeString(&DestinationString, SourceString);
  v4 = ZwQueryValueKey(
         KeyHandle,
         &DestinationString,
         KeyValueFullInformation,
         &KeyValueInformation,
         0x18u,
         &ResultLength);
  v12 = v4;
  if ( v4 == -1073741789 || v4 == -2147483643 )
  {
    v5 = ExAllocatePoolWithTag(PagedPool, ResultLength, 0x73427249u);
    if ( v5 )
    {
      *(_DWORD *)v5 = 0;
      *((_DWORD *)v5 + 1) = 0;
      *((_DWORD *)v5 + 2) = 0;
      *((_DWORD *)v5 + 3) = 0;
      *((_DWORD *)v5 + 4) = 0;
      v12 = ZwQueryValueKey(v10, &DestinationString, KeyValueFullInformation, v5, ResultLength, &ResultLength);
      if ( v12 >= 0 )
      {
        v6 = *((_DWORD *)v5 + 3);
        if ( v6 )
        {
          *(_DWORD *)a4 = v6;
          v7 = ExAllocatePoolWithTag(0, *((_DWORD *)v5 + 3), 0x73427249u);
          *(_DWORD *)a3 = v7;
          if ( v7 )
            memcpy(v7, (char *)v5 + *((_DWORD *)v5 + 2), *((_DWORD *)v5 + 3));
          else
            v12 = -1073741670;
        }
      }
      ExFreePool(v5);
    }
    else
    {
      v12 = -1073741670;
    }
  }
  return v12;
}

//----- (000152DC) --------------------------------------------------------
NTSTATUS __stdcall IrClassQueryKeyInfo(HANDLE KeyHandle, int a2)
{
  NTSTATUS result; // eax@1
  PVOID v3; // eax@3
  ULONG ResultLength; // [sp+4h] [bp-4h]@1

  ResultLength = 0;
  result = ZwQueryKey(KeyHandle, KeyFullInformation, 0, 0, &ResultLength);
  if ( result == -1073741789 && ResultLength )
  {
    v3 = ExAllocatePoolWithTag(PagedPool, ResultLength, 0x73427249u);
    *(_DWORD *)a2 = v3;
    if ( v3 )
      result = ZwQueryKey(KeyHandle, KeyFullInformation, v3, ResultLength, &ResultLength);
    else
      result = -1073741670;
  }
  return result;
}

//----- (00015342) --------------------------------------------------------
NTSTATUS __stdcall IrClassEnumKeyInfo(HANDLE KeyHandle, __int16 a2, int a3)
{
  NTSTATUS result; // eax@1
  PVOID v4; // eax@3
  ULONG ResultLength; // [sp+Ch] [bp-4h]@1

  ResultLength = 0;
  result = ZwEnumerateKey(KeyHandle, (unsigned __int16)a2, 0, 0, 0, &ResultLength);
  if ( result == -1073741789 && ResultLength > 0 )
  {
    v4 = ExAllocatePoolWithTag(PagedPool, ResultLength, 0x73427249u);
    *(_DWORD *)a3 = v4;
    if ( v4 )
      result = ZwEnumerateKey(KeyHandle, (unsigned __int16)a2, 0, v4, ResultLength, &ResultLength);
    else
      result = -1073741670;
  }
  return result;
}

//----- (000153AE) --------------------------------------------------------
char __stdcall IrClassCfgParseLongs(int a1, int a2, int a3)
{
  int v3; // esi@1
  int *v4; // edi@3
  int v5; // esi@10
  int v7; // [sp+4h] [bp-Ch]@1
  unsigned __int16 v8; // [sp+8h] [bp-8h]@1
  char v9; // [sp+Eh] [bp-2h]@1
  char v10; // [sp+Fh] [bp-1h]@1

  v3 = a1;
  v9 = 0;
  v7 = 0;
  v10 = 0;
  v8 = 0;
  if ( a1 && a3 )
  {
    v4 = *(int **)(a1 + 4);
    if ( (signed int)*(_WORD *)a1 > 0 )
    {
      while ( 1 )
      {
        if ( !*(_BYTE *)v4 )
          goto LABEL_16;
        if ( !_isdigit(*(_BYTE *)v4) )
          break;
        if ( !v10 )
          goto LABEL_9;
LABEL_15:
        v4 = (int *)((char *)v4 + 1);
        if ( (signed int)((char *)v4 - *(_DWORD *)(v3 + 4)) >= *(_WORD *)v3 )
          goto LABEL_16;
      }
      if ( *(_BYTE *)v4 != 45 )
      {
        if ( v10 )
          v10 = 0;
        goto LABEL_15;
      }
LABEL_9:
      if ( a2 )
      {
        v5 = v8;
        if ( (unsigned int)v8 < *(_DWORD *)a3 )
        {
          ++v8;
          *(_DWORD *)(a2 + 4 * v5) = _atol((const char *)v4);
        }
      }
      ++v7;
      v3 = a1;
      v10 = 1;
      goto LABEL_15;
    }
LABEL_16:
    if ( a2 )
    {
      if ( *(_DWORD *)a3 == v7 )
        return 1;
    }
    else if ( v7 )
    {
      *(_DWORD *)a3 = v7;
      return 1;
    }
    return v9;
  }
  return 0;
}

//----- (00015486) --------------------------------------------------------
bool __stdcall IrClassCfgGetLongArray(HANDLE KeyHandle, PCWSTR a2, int a3, int a4)
{
  NTSTATUS v4; // eax@1
  int v5; // eax@6
  int v6; // esi@6
  UNICODE_STRING DestinationString; // [sp+4h] [bp-14h]@4
  STRING AnsiString; // [sp+Ch] [bp-Ch]@4
  PCWSTR SourceString; // [sp+14h] [bp-4h]@1

  v4 = IrClassQueryDeviceKey(KeyHandle, a2, (int)&SourceString, (int)&a2);
  a2 = (PCWSTR)v4;
  if ( SourceString )
  {
    if ( v4 >= 0 )
    {
      AnsiString.Length = 0;
      AnsiString.MaximumLength = 0;
      AnsiString.Buffer = 0;
      RtlInitUnicodeString(&DestinationString, SourceString);
      a2 = (PCWSTR)RtlUnicodeStringToAnsiString(&AnsiString, &DestinationString, 1u);
      if ( (signed int)a2 >= 0 )
      {
        KeyHandle = 0;
        a2 = (PCWSTR)-1073741823;
        if ( IrClassCfgParseLongs((int)&AnsiString, 0, (int)&KeyHandle) )
        {
          v5 = (int)ExAllocatePoolWithTag(0, 4 * (_DWORD)KeyHandle, 0x73427249u);
          v6 = a3;
          *(_DWORD *)a3 = v5;
          if ( v5 )
          {
            if ( IrClassCfgParseLongs((int)&AnsiString, v5, (int)&KeyHandle) )
            {
              *(_DWORD *)a4 = KeyHandle;
              a2 = 0;
            }
            else
            {
              ExFreePool(*(PVOID *)v6);
              *(_DWORD *)v6 = 0;
            }
          }
        }
        RtlFreeAnsiString(&AnsiString);
      }
      ExFreePool((PVOID)SourceString);
    }
  }
  else
  {
    a2 = (PCWSTR)-1073741823;
  }
  return (signed int)a2 >= 0;
}

//----- (0001557A) --------------------------------------------------------
char __stdcall IrClassCfgValidatePatterns(int a1, int a2, unsigned int a3, int a4)
{
  char result; // al@1
  unsigned int v5; // edi@5
  int v6; // ecx@6
  int v7; // edx@8
  bool v8; // [sp+0h] [bp-4h]@1

  v8 = 0;
  result = 1;
  if ( a3 != a4 )
    return 0;
  if ( a3 )
    v8 = *(_DWORD *)a1 <= 0;
  v5 = 0;
  if ( a3 )
  {
    v6 = a2;
    do
    {
      if ( !result )
        return result;
      v7 = *(_DWORD *)(a1 - a2 + v6);
      if ( ((_BYTE)v5 + v8) & 1 )
      {
        if ( v7 > 0 || *(_DWORD *)v6 > 0 )
        {
LABEL_14:
          result = 0;
          goto LABEL_15;
        }
      }
      else if ( v7 < 0 || *(_DWORD *)v6 < 0 )
      {
        goto LABEL_14;
      }
LABEL_15:
      if ( v7 > *(_DWORD *)v6 )
        result = 0;
      ++v5;
      v6 += 4;
    }
    while ( v5 < a3 );
  }
  return result;
}

//----- (000155F2) --------------------------------------------------------
NTSTATUS __userpurge IrClassCfgGetULong@<eax>(int a1@<ebp>, void *a2, const WCHAR *a3, int a4)
{
  NTSTATUS result; // eax@1
  int v5; // [sp-64h] [bp-6Ch]@1
  int v6; // [sp-5Ch] [bp-64h]@2
  int v7; // [sp-58h] [bp-60h]@3
  int v8; // [sp-10h] [bp-18h]@1
  int v9; // [sp-8h] [bp-10h]@1
  int v10; // [sp-4h] [bp-Ch]@1
  int v11; // [sp+0h] [bp-8h]@1
  int retaddr; // [sp+8h] [bp+0h]@1

  v10 = a1;
  v11 = retaddr;
  RtlInitUnicodeString((PUNICODE_STRING)&v8, a3);
  v9 = 0;
  result = ZwQueryValueKey(a2, (PUNICODE_STRING)&v8, KeyValuePartialInformation, &v5, 0x50u, (PULONG)&v9);
  if ( result >= 0 )
  {
    if ( v6 == 4 )
      *(_DWORD *)a4 = v7;
    else
      result = -1073741788;
  }
  return result;
}
// 155F2: could not find valid save-restore pair for ebp

//----- (0001565E) --------------------------------------------------------
NTSTATUS __stdcall IrClassCfgSetULong(HANDLE KeyHandle, PCWSTR SourceString, char Data)
{
  UNICODE_STRING DestinationString; // [sp+0h] [bp-8h]@1

  RtlInitUnicodeString(&DestinationString, SourceString);
  return ZwSetValueKey(KeyHandle, &DestinationString, 0, 4u, &Data, 4u);
}

//----- (00015692) --------------------------------------------------------
NTSTATUS __stdcall IrClassOpenGlobalParameters(int a1, PHANDLE KeyHandle)
{
  WCHAR *v2; // eax@1
  NTSTATUS result; // eax@2
  NTSTATUS v4; // esi@3
  OBJECT_ATTRIBUTES ObjectAttributes; // [sp+4h] [bp-20h]@3
  UNICODE_STRING DestinationString; // [sp+1Ch] [bp-8h]@1

  DestinationString.MaximumLength = IrClassRegistryPath.Length + 24;
  DestinationString.Length = 0;
  v2 = (WCHAR *)ExAllocatePoolWithTag(0, (unsigned __int16)(IrClassRegistryPath.Length + 24), 0x73427249u);
  DestinationString.Buffer = v2;
  if ( v2 )
  {
    memset(v2, 0, DestinationString.MaximumLength);
    RtlCopyUnicodeString(&DestinationString, &IrClassRegistryPath);
    RtlAppendUnicodeToString(&DestinationString, L"\\Parameters");
    ObjectAttributes.ObjectName = &DestinationString;
    ObjectAttributes.Length = 24;
    ObjectAttributes.RootDirectory = 0;
    ObjectAttributes.Attributes = 576;
    ObjectAttributes.SecurityDescriptor = 0;
    ObjectAttributes.SecurityQualityOfService = 0;
    v4 = ZwOpenKey(KeyHandle, 0xF003Fu, &ObjectAttributes);
    ExFreePool(DestinationString.Buffer);
    result = v4;
  }
  else
  {
    result = -1073741670;
  }
  return result;
}

//----- (00015744) --------------------------------------------------------
NTSTATUS __stdcall IrClassReadGlobalParameters(int a1)
{
  int v1; // ebp@0
  int v2; // edi@5
  NTSTATUS result; // eax@10
  int *v4; // ebx@11
  HANDLE Handle; // [sp+Ch] [bp-4h]@1
  NTSTATUS v6; // [sp+18h] [bp+8h]@11

  Handle = 0;
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 1
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      10,
      (int)dword_18224);
  v2 = IrClassOpenGlobalParameters(a1, &Handle);
  if ( v2 >= 0 )
  {
    v4 = (int *)(a1 + 560);
    v6 = IrClassCfgGetULong(v1, Handle, L"PortCount", a1 + 560);
    if ( v6 < 0 )
    {
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          13,
          (int)dword_18224,
          v6);
      *v4 = 0;
      v6 = IrClassCfgSetULong(Handle, L"PortCount", 0);
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 1
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_q(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          14,
          (int)dword_18224,
          v6);
    }
    else if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
           && WPP_GLOBAL_Control->Characteristics & 1
           && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    {
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        12,
        (int)dword_18224,
        *v4);
    }
    if ( Handle )
      ZwClose(Handle);
    result = v6;
  }
  else
  {
    if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && WPP_GLOBAL_Control->Characteristics & 1
      && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
      WPP_SF_q(
        (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
        (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
        11,
        (int)dword_18224,
        v2);
    result = v2;
  }
  return result;
}
// 18224: using guessed type int dword_18224[3];

//----- (0001587E) --------------------------------------------------------
NTSTATUS __stdcall IrClassReadDecoderConfig(HANDLE KeyHandle, HANDLE a2, PVOID P)
{
  int v3; // ebp@0
  HANDLE v4; // esi@1
  HANDLE v5; // ebx@1
  HANDLE v6; // edi@2
  __int16 v7; // ax@2
  const wchar_t *v8; // ebx@6
  NTSTATUS v9; // ebx@22
  PDEVICE_OBJECT v10; // eax@44
  int v11; // eax@66
  int v12; // ebx@81
  int v13; // edi@82
  bool v14; // al@82
  OBJECT_ATTRIBUTES ObjectAttributes; // [sp+8h] [bp-24h]@2
  __int16 v17; // [sp+20h] [bp-Ch]@2
  __int16 v18; // [sp+22h] [bp-Ah]@2
  char *v19; // [sp+24h] [bp-8h]@2
  NTSTATUS v20; // [sp+28h] [bp-4h]@1

  v4 = KeyHandle;
  memset(KeyHandle, 0, 0xD0u);
  v5 = a2;
  v20 = IrClassEnumKeyInfo(a2, (__int16)P, (int)&KeyHandle);
  if ( v20 >= 0 )
  {
    v6 = KeyHandle;
    v7 = *((_WORD *)KeyHandle + 6);
    ObjectAttributes.SecurityDescriptor = 0;
    ObjectAttributes.SecurityQualityOfService = 0;
    v17 = v7;
    v18 = v7;
    v19 = (char *)KeyHandle + 16;
    ObjectAttributes.ObjectName = (PUNICODE_STRING)&v17;
    ObjectAttributes.Length = 24;
    ObjectAttributes.RootDirectory = v5;
    ObjectAttributes.Attributes = 576;
    v20 = ZwOpenKey(&KeyHandle, 0x20019u, &ObjectAttributes);
    ExFreePool(v6);
    if ( v20 >= 0 )
    {
      P = 0;
      a2 = HANDLE_FLAG_INHERIT;
      if ( IrClassCfgGetULong(v3, KeyHandle, L"Enabled", (int)&a2) >= 0 && !a2 )
        goto LABEL_61;
      v20 = IrClassQueryDeviceKey(KeyHandle, L"DecoderType", (int)&P, (int)&a2);
      if ( v20 < 0 )
        goto LABEL_61;
      v8 = (const wchar_t *)P;
      if ( P )
      {
        if ( __wcsicmp((const wchar_t *)P, L"Pulse") )
        {
          if ( __wcsicmp(v8, L"Space") )
          {
            if ( __wcsicmp(v8, L"BiPhase") )
            {
              if ( __wcsicmp(v8, L"TwoPPM") )
              {
                if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                  && WPP_GLOBAL_Control->Characteristics & 8
                  && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
                  WPP_SF_(
                    (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
                    (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
                    19,
                    (int)dword_18224);
                v20 = -1073741823;
              }
              else
              {
                *((_DWORD *)v4 + 1) = 3;
              }
            }
            else
            {
              *((_DWORD *)v4 + 1) = 2;
            }
          }
          else
          {
            *((_DWORD *)v4 + 1) = 1;
          }
        }
        else
        {
          *((_DWORD *)v4 + 1) = 0;
        }
        ExFreePool((PVOID)v8);
      }
      if ( v20 < 0 )
        goto LABEL_61;
      v9 = IrClassQueryDeviceKey(KeyHandle, L"BitOrder", (int)&P, (int)&a2);
      if ( v9 < 0 )
        goto LABEL_61;
      if ( P )
      {
        if ( __wcsicmp((const wchar_t *)P, L"MSBFirst") )
        {
          if ( __wcsicmp((const wchar_t *)P, L"LSBFirst") )
          {
            if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
              && WPP_GLOBAL_Control->Characteristics & 8
              && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
              WPP_SF_(
                (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
                (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
                20,
                (int)dword_18224);
            v9 = -1073741823;
          }
          else
          {
            *((_DWORD *)v4 + 5) = 1;
          }
        }
        else
        {
          *((_DWORD *)v4 + 5) = 0;
        }
        ExFreePool(P);
      }
      if ( v9 < 0 )
        goto LABEL_61;
      if ( IrClassCfgGetULong(v3, KeyHandle, L"HasInitialData", (int)&P) >= 0 )
        *((_BYTE *)v4 + 84) = P != 0;
      if ( IrClassCfgGetULong(v3, KeyHandle, L"HasRepeatData", (int)&P) >= 0 )
        *((_BYTE *)v4 + 112) = P != 0;
      if ( IrClassCfgGetULong(v3, KeyHandle, L"HasFinalData", (int)&P) >= 0 )
        *((_BYTE *)v4 + 140) = P != 0;
      if ( !*((_BYTE *)v4 + 84) && !*((_BYTE *)v4 + 112) && !*((_BYTE *)v4 + 140) )
      {
        v10 = WPP_GLOBAL_Control;
        if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
        {
LABEL_96:
          v20 = -1073741823;
LABEL_97:
          ZwClose(KeyHandle);
          return v20;
        }
        if ( !(WPP_GLOBAL_Control->Characteristics & 8) || BYTE1(WPP_GLOBAL_Control->Flags) < 2u )
        {
LABEL_62:
          if ( (PDEVICE_OBJECT *)v10 != &WPP_GLOBAL_Control && v10->Characteristics & 8 && BYTE1(v10->Flags) >= 2u )
            WPP_SF_((int)&v10->AttachedDevice->Type, (int)&v10->CurrentIrp->Type, 22, (int)dword_18224);
          goto LABEL_96;
        }
        WPP_SF_(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          21,
          (int)dword_18224);
LABEL_61:
        v10 = WPP_GLOBAL_Control;
        goto LABEL_62;
      }
      if ( IrClassCfgGetULong(v3, KeyHandle, L"SuppressRepeatPacketFilter", (int)&P) < 0 )
        *((_BYTE *)v4 + 164) = 0;
      else
        *((_BYTE *)v4 + 164) = P != 0;
      if ( IrClassCfgGetULong(v3, KeyHandle, L"AllowSimultaneousKeys", (int)&P) < 0 )
        *((_BYTE *)v4 + 165) = 0;
      else
        *((_BYTE *)v4 + 165) = P != 0;
      v20 = 0;
      if ( IrClassCfgGetULong(v3, KeyHandle, L"DecoderID", (int)((char *)v4 + 8)) < 0
        || IrClassCfgGetULong(v3, KeyHandle, L"CodeMinBits", (int)((char *)v4 + 12)) < 0
        || IrClassCfgGetULong(v3, KeyHandle, L"CodeMaxBits", (int)((char *)v4 + 16)) < 0
        || *((_DWORD *)v4 + 3) > *((_DWORD *)v4 + 4)
        || IrClassCfgGetULong(v3, KeyHandle, L"MaxRepeatPauseInterval", (int)((char *)v4 + 156)) < 0
        || IrClassCfgGetULong(v3, KeyHandle, L"MaxRepeatTimeout", (int)((char *)v4 + 160)) < 0
        || *((_DWORD *)v4 + 39) > *((_DWORD *)v4 + 40) )
        goto LABEL_61;
      v11 = *((_DWORD *)v4 + 1);
      P = 0;
      a2 = 0;
      if ( v11 != 1 && v11 && v11 != 2 )
      {
        if ( IrClassCfgGetLongArray(KeyHandle, L"ZeroZeroPatternMin", (int)((char *)v4 + 40), (int)&P)
          && IrClassCfgGetLongArray(KeyHandle, L"ZeroZeroPatternMax", (int)((char *)v4 + 44), (int)&a2) )
        {
          if ( IrClassCfgValidatePatterns(*((_DWORD *)v4 + 10), *((_DWORD *)v4 + 11), (unsigned int)P, (int)a2) )
          {
            if ( (unsigned int)P >= 2
              && IrClassCfgGetLongArray(KeyHandle, L"ZeroOnePatternMin", (int)((char *)v4 + 48), (int)&P)
              && IrClassCfgGetLongArray(KeyHandle, L"ZeroOnePatternMax", (int)((char *)v4 + 52), (int)&a2) )
            {
              if ( IrClassCfgValidatePatterns(*((_DWORD *)v4 + 12), *((_DWORD *)v4 + 13), (unsigned int)P, (int)a2) )
              {
                if ( (unsigned int)P >= 2
                  && IrClassCfgGetLongArray(KeyHandle, L"OneZeroPatternMin", (int)((char *)v4 + 56), (int)&P)
                  && IrClassCfgGetLongArray(KeyHandle, L"OneZeroPatternMax", (int)((char *)v4 + 60), (int)&a2) )
                {
                  if ( IrClassCfgValidatePatterns(*((_DWORD *)v4 + 14), *((_DWORD *)v4 + 15), (unsigned int)P, (int)a2) )
                  {
                    if ( (unsigned int)P >= 2 )
                    {
                      v12 = (int)((char *)v4 + 64);
                      if ( IrClassCfgGetLongArray(KeyHandle, L"OneOnePatternMin", (int)((char *)v4 + 64), (int)&P) )
                      {
                        v13 = (int)((char *)v4 + 68);
                        v14 = IrClassCfgGetLongArray(KeyHandle, L"OneOnePatternMax", (int)((char *)v4 + 68), (int)&a2);
LABEL_89:
                        if ( v14
                          && IrClassCfgValidatePatterns(*(_DWORD *)v12, *(_DWORD *)v13, (unsigned int)P, (int)a2)
                          && (unsigned int)P >= 2 )
                        {
                          if ( IrClassCfgGetLongArray(
                                 KeyHandle,
                                 L"InitPrefixPatternMin",
                                 (int)((char *)v4 + 72),
                                 (int)&P)
                            && IrClassCfgGetLongArray(
                                 KeyHandle,
                                 L"InitPrefixPatternMax",
                                 (int)((char *)v4 + 76),
                                 (int)&a2)
                            && IrClassCfgValidatePatterns(
                                 *((_DWORD *)v4 + 18),
                                 *((_DWORD *)v4 + 19),
                                 (unsigned int)P,
                                 (int)a2) )
                            *((_DWORD *)v4 + 20) = P;
                          if ( IrClassCfgGetLongArray(
                                 KeyHandle,
                                 L"InitSuffixPatternMin",
                                 (int)((char *)v4 + 88),
                                 (int)&P)
                            && IrClassCfgGetLongArray(
                                 KeyHandle,
                                 L"InitSuffixPatternMax",
                                 (int)((char *)v4 + 92),
                                 (int)&a2)
                            && IrClassCfgValidatePatterns(
                                 *((_DWORD *)v4 + 22),
                                 *((_DWORD *)v4 + 23),
                                 (unsigned int)P,
                                 (int)a2) )
                            *((_DWORD *)v4 + 24) = P;
                          if ( IrClassCfgGetLongArray(
                                 KeyHandle,
                                 L"RepeatPrefixPatternMin",
                                 (int)((char *)v4 + 100),
                                 (int)&P)
                            && IrClassCfgGetLongArray(
                                 KeyHandle,
                                 L"RepeatPrefixPatternMax",
                                 (int)((char *)v4 + 104),
                                 (int)&a2)
                            && IrClassCfgValidatePatterns(
                                 *((_DWORD *)v4 + 25),
                                 *((_DWORD *)v4 + 26),
                                 (unsigned int)P,
                                 (int)a2) )
                            *((_DWORD *)v4 + 27) = P;
                          if ( IrClassCfgGetLongArray(
                                 KeyHandle,
                                 L"RepeatSuffixPatternMin",
                                 (int)((char *)v4 + 116),
                                 (int)&P)
                            && IrClassCfgGetLongArray(
                                 KeyHandle,
                                 L"RepeatSuffixPatternMax",
                                 (int)((char *)v4 + 120),
                                 (int)&a2)
                            && IrClassCfgValidatePatterns(
                                 *((_DWORD *)v4 + 29),
                                 *((_DWORD *)v4 + 30),
                                 (unsigned int)P,
                                 (int)a2) )
                            *((_DWORD *)v4 + 31) = P;
                          if ( IrClassCfgGetLongArray(
                                 KeyHandle,
                                 L"FinalPrefixPatternMin",
                                 (int)((char *)v4 + 128),
                                 (int)&P)
                            && IrClassCfgGetLongArray(
                                 KeyHandle,
                                 L"FinalPrefixPatternMax",
                                 (int)((char *)v4 + 132),
                                 (int)&a2)
                            && IrClassCfgValidatePatterns(
                                 *((_DWORD *)v4 + 32),
                                 *((_DWORD *)v4 + 33),
                                 (unsigned int)P,
                                 (int)a2) )
                            *((_DWORD *)v4 + 34) = P;
                          if ( IrClassCfgGetLongArray(
                                 KeyHandle,
                                 L"FinalSuffixPatternMin",
                                 (int)((char *)v4 + 144),
                                 (int)&P)
                            && IrClassCfgGetLongArray(
                                 KeyHandle,
                                 L"FinalSuffixPatternMax",
                                 (int)((char *)v4 + 148),
                                 (int)&a2)
                            && IrClassCfgValidatePatterns(
                                 *((_DWORD *)v4 + 36),
                                 *((_DWORD *)v4 + 37),
                                 (unsigned int)P,
                                 (int)a2) )
                            *((_DWORD *)v4 + 38) = P;
                          goto LABEL_97;
                        }
                        goto LABEL_92;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else if ( IrClassCfgGetLongArray(KeyHandle, L"OnePatternMin", (int)((char *)v4 + 24), (int)&P)
             && IrClassCfgGetLongArray(KeyHandle, L"OnePatternMax", (int)((char *)v4 + 28), (int)&a2) )
      {
        if ( IrClassCfgValidatePatterns(*((_DWORD *)v4 + 6), *((_DWORD *)v4 + 7), (unsigned int)P, (int)a2) )
        {
          if ( (unsigned int)P >= 2 )
          {
            v12 = (int)((char *)v4 + 32);
            if ( IrClassCfgGetLongArray(KeyHandle, L"ZeroPatternMin", (int)((char *)v4 + 32), (int)&P) )
            {
              v13 = (int)((char *)v4 + 36);
              v14 = IrClassCfgGetLongArray(KeyHandle, L"ZeroPatternMax", (int)((char *)v4 + 36), (int)&a2);
              goto LABEL_89;
            }
          }
        }
      }
LABEL_92:
      if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && WPP_GLOBAL_Control->Characteristics & 8
        && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
        WPP_SF_(
          (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
          (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
          23,
          (int)dword_18224);
      goto LABEL_96;
    }
  }
  return v20;
}
// 178DA: using guessed type wchar_t aOneonepatternm[17];
// 179FA: using guessed type wchar_t aMaxrepeattimeo[17];
// 17A1C: using guessed type wchar_t aMaxrepeatpause[23];
// 17A4A: using guessed type wchar_t aCodemaxbits[12];
// 17A62: using guessed type wchar_t aCodeminbits[12];
// 17A7A: using guessed type wchar_t aDecoderid[10];
// 17A8E: using guessed type wchar_t aAllowsimultane[22];
// 17ABA: using guessed type wchar_t aSuppressrepeat[27];
// 17AF0: using guessed type wchar_t aHasfinaldata[13];
// 17B0A: using guessed type wchar_t aHasrepeatdata[14];
// 17B26: using guessed type wchar_t aHasinitialdata[15];
// 17BC8: using guessed type wchar_t aEnabled[8];
// 18224: using guessed type int dword_18224[3];

//----- (0001608E) --------------------------------------------------------
void __stdcall IrClassCleanupDecoder(PVOID P)
{
  if ( P )
  {
    Free_Ptr(*((_DWORD *)P + 6));
    Free_Ptr(*((_DWORD *)P + 7));
    Free_Ptr(*((_DWORD *)P + 8));
    Free_Ptr(*((_DWORD *)P + 9));
    Free_Ptr(*((_DWORD *)P + 18));
    Free_Ptr(*((_DWORD *)P + 19));
    Free_Ptr(*((_DWORD *)P + 22));
    Free_Ptr(*((_DWORD *)P + 23));
    Free_Ptr(*((_DWORD *)P + 25));
    Free_Ptr(*((_DWORD *)P + 26));
    Free_Ptr(*((_DWORD *)P + 29));
    Free_Ptr(*((_DWORD *)P + 30));
    Free_Ptr(*((_DWORD *)P + 32));
    Free_Ptr(*((_DWORD *)P + 33));
    Free_Ptr(*((_DWORD *)P + 36));
    Free_Ptr(*((_DWORD *)P + 37));
    Free_Ptr(*((_DWORD *)P + 10));
    Free_Ptr(*((_DWORD *)P + 11));
    Free_Ptr(*((_DWORD *)P + 12));
    Free_Ptr(*((_DWORD *)P + 13));
    Free_Ptr(*((_DWORD *)P + 14));
    Free_Ptr(*((_DWORD *)P + 15));
    Free_Ptr(*((_DWORD *)P + 16));
    Free_Ptr(*((_DWORD *)P + 17));
    memset(P, 0, 0xD0u);
    ExFreePool(P);
  }
}
// 16072: using guessed type _DWORD __stdcall Free_Ptr(_DWORD);

//----- (0001618C) --------------------------------------------------------
int __stdcall IrClassCleanupDecoders(int a1)
{
  unsigned __int16 v1; // bx@1
  int v2; // edi@3
  int result; // eax@4

  v1 = 0;
  if ( *(_DWORD *)(a1 + 8288) )
  {
    if ( *(_WORD *)(a1 + 8292) > 0u )
    {
      do
      {
        v2 = 4 * v1;
        IrClassCleanupDecoder(*(PVOID *)(v2 + *(_DWORD *)(a1 + 8288)));
        *(_DWORD *)(v2 + *(_DWORD *)(a1 + 8288)) = 0;
        ++v1;
      }
      while ( v1 < *(_WORD *)(a1 + 8292) );
    }
    ExFreePool(*(PVOID *)(a1 + 8288));
    *(_DWORD *)(a1 + 8288) = 0;
    result = 0;
    *(_WORD *)(a1 + 8292) = 0;
  }
  return result;
}

//----- (000161FC) --------------------------------------------------------
NTSTATUS __stdcall IrClassReadAllDecoderConfigs(PVOID a1)
{
  WCHAR *v1; // eax@5
  PVOID v2; // esi@11
  unsigned __int16 v3; // ax@15
  unsigned int v4; // ecx@15
  SIZE_T v5; // eax@15
  PVOID v6; // eax@21
  int v7; // edi@23
  void **v8; // eax@23
  OBJECT_ATTRIBUTES ObjectAttributes; // [sp+Ch] [bp-2Ch]@6
  UNICODE_STRING DestinationString; // [sp+24h] [bp-14h]@5
  PVOID P; // [sp+2Ch] [bp-Ch]@9
  HANDLE KeyHandle; // [sp+30h] [bp-8h]@1
  NTSTATUS v14; // [sp+34h] [bp-4h]@6
  PVOID v15; // [sp+40h] [bp+8h]@22

  KeyHandle = 0;
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && WPP_GLOBAL_Control->Characteristics & 8
    && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
    WPP_SF_(
      (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
      (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
      15,
      (int)dword_18224);
  DestinationString.MaximumLength = IrClassRegistryPath.Length + 20;
  DestinationString.Length = 0;
  v1 = (WCHAR *)ExAllocatePoolWithTag(0, (unsigned __int16)(IrClassRegistryPath.Length + 20), 0x73427249u);
  DestinationString.Buffer = v1;
  if ( v1 )
  {
    memset(v1, 0, DestinationString.MaximumLength);
    RtlCopyUnicodeString(&DestinationString, &IrClassRegistryPath);
    RtlAppendUnicodeToString(&DestinationString, L"\\Decoders");
    ObjectAttributes.ObjectName = &DestinationString;
    ObjectAttributes.Length = 24;
    ObjectAttributes.RootDirectory = 0;
    ObjectAttributes.Attributes = 576;
    ObjectAttributes.SecurityDescriptor = 0;
    ObjectAttributes.SecurityQualityOfService = 0;
    v14 = ZwOpenKey(&KeyHandle, 0x20019u, &ObjectAttributes);
    ExFreePool(DestinationString.Buffer);
  }
  else
  {
    v14 = -1073741670;
  }
  if ( v14 >= 0 )
  {
    v14 = IrClassQueryKeyInfo(KeyHandle, (int)&P);
    if ( v14 >= 0 )
    {
      if ( *((_DWORD *)P + 5) > 0u )
      {
        v2 = a1;
        IrClassCleanupDecoders((int)a1);
        if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && WPP_GLOBAL_Control->Characteristics & 8
          && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
          WPP_SF_q(
            (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
            (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
            16,
            (int)dword_18224,
            *((_DWORD *)P + 5));
        v3 = *((_WORD *)P + 10);
        *((_WORD *)a1 + 4146) = v3;
        v4 = *((_WORD *)a1 + 4146);
        v5 = 4 * v3;
        *((_DWORD *)a1 + 2071) = v5;
        if ( v4 > 0x3FFFFFFF )
        {
          if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
            && WPP_GLOBAL_Control->Characteristics & 8
            && BYTE1(WPP_GLOBAL_Control->Flags) >= 2u )
            WPP_SF_(
              (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
              (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
              17,
              (int)dword_18224);
          v14 = -1073741811;
          goto LABEL_34;
        }
        v6 = ExAllocatePoolWithTag(0, v5, 0x73427249u);
        *((_DWORD *)a1 + 2072) = v6;
        if ( !v6 )
          goto LABEL_33;
        memset(v6, 0, 4 * *((_WORD *)a1 + 4146));
        v15 = 0;
        if ( *((_WORD *)v2 + 4146) > 0u )
        {
          while ( 1 )
          {
            v7 = 4 * (unsigned __int16)v15;
            *(_DWORD *)(v7 + *((_DWORD *)v2 + 2072)) = ExAllocatePoolWithTag(0, 0xD0u, 0x73427249u);
            v8 = (void **)(v7 + *((_DWORD *)v2 + 2072));
            if ( !*v8 )
              break;
            memset(*v8, 0, 0xD0u);
            v14 = IrClassReadDecoderConfig(*(HANDLE *)(v7 + *((_DWORD *)v2 + 2072)), KeyHandle, v15);
            if ( v14 >= 0 )
            {
              if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                && WPP_GLOBAL_Control->Characteristics & 8
                && BYTE1(WPP_GLOBAL_Control->Flags) >= 4u )
                WPP_SF_q(
                  (int)&WPP_GLOBAL_Control->AttachedDevice->Type,
                  (int)&WPP_GLOBAL_Control->CurrentIrp->Type,
                  18,
                  (int)dword_18224,
                  *(_DWORD *)(*(_DWORD *)(v7 + *((_DWORD *)v2 + 2072)) + 8));
              **(_DWORD **)(v7 + *((_DWORD *)v2 + 2072)) = v2;
              DecoderReset(*(_DWORD *)(v7 + *((_DWORD *)v2 + 2072)));
            }
            else
            {
              IrClassCleanupDecoder(*(PVOID *)(v7 + *((_DWORD *)v2 + 2072)));
              *(_DWORD *)(v7 + *((_DWORD *)v2 + 2072)) = 0;
              v14 = 0;
            }
            v15 = (char *)v15 + 1;
            if ( (unsigned __int16)v15 >= *((_WORD *)v2 + 4146) )
              goto LABEL_34;
          }
LABEL_33:
          v14 = -1073741670;
          goto LABEL_34;
        }
      }
LABEL_34:
      ExFreePool(P);
      goto LABEL_35;
    }
  }
LABEL_35:
  if ( KeyHandle )
    ZwClose(KeyHandle);
  return v14;
}
// 18224: using guessed type int dword_18224[3];

//----- (00016546) --------------------------------------------------------
NTSTATUS __stdcall RtlStringValidateDestW(STRSAFE_PCNZWCH pszDest, size_t cchDest, const size_t cchMax)
{
  NTSTATUS result; // eax@1

  result = 0;
  if ( !cchDest || cchDest > cchMax )
    result = -1073741811;
  return result;
}

//----- (00016568) --------------------------------------------------------
NTSTATUS __stdcall RtlStringVPrintfWorkerW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszFormat, va_list argList)
{
  NTSTATUS v4; // ebx@1
  size_t v5; // esi@1
  int v6; // eax@1
  va_list v8; // [sp+24h] [bp+18h]@0

  v4 = 0;
  v5 = cchDest - 1;
  v6 = _vsnwprintf(pszDest, cchDest - 1, (const wchar_t *)argList, v8);
  if ( v6 < 0 || v6 > v5 )
  {
    v4 = -2147483643;
    goto LABEL_6;
  }
  if ( v6 == v5 )
  {
LABEL_6:
    pszDest[v5] = 0;
    v6 = cchDest - 1;
  }
  if ( pszFormat )
    *(_DWORD *)pszFormat = v6;
  return v4;
}

//----- (000165B9) --------------------------------------------------------
int __cdecl _vsnwprintf_l(wchar_t *DstBuf, size_t MaxCount, const wchar_t *Format, _locale_t Locale, va_list ArgList)
{
  int result; // eax@2
  int v6; // edi@9
  FILE v7; // [sp+4h] [bp-20h]@6

  if ( Format )
  {
    if ( !MaxCount || DstBuf )
    {
      v7._flag = 66;
      v7._base = (char *)DstBuf;
      v7._ptr = (char *)DstBuf;
      if ( MaxCount <= 0x3FFFFFFF )
        v7._cnt = 2 * MaxCount;
      else
        v7._cnt = 0x7FFFFFFF;
      result = _woutput_l((int)&v7, (wchar_t *)Format, (int)Locale, (int)ArgList);
      v6 = result;
      if ( DstBuf )
      {
        --v7._cnt;
        if ( v7._cnt < 0 )
        {
          _flsbuf(0, &v7);
        }
        else
        {
          *v7._ptr = 0;
          ++v7._ptr;
        }
        --v7._cnt;
        if ( v7._cnt < 0 )
          _flsbuf(0, &v7);
        else
          *v7._ptr = 0;
        result = v6;
      }
    }
    else
    {
      _invalid_parameter(0, 0, 0, 0, 0);
      result = -1;
    }
  }
  else
  {
    _invalid_parameter(0, 0, 0, 0, 0);
    result = -1;
  }
  return result;
}
// 166B4: using guessed type int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (000166BA) --------------------------------------------------------
void __usercall sub_166BA(int a1@<edi>, int a2@<esi>, wchar_t a3)
{
  if ( (!(*(_BYTE *)(a2 + 12) & 0x40) || *(_DWORD *)(a2 + 8))
    && _fputwc_nolock(a3, (FILE *)a2) == -1
    && *(_BYTE *)(a2 + 12) & 0x20 )
    *(_DWORD *)a1 = -1;
  else
    ++*(_DWORD *)a1;
}

//----- (000166F4) --------------------------------------------------------
void __usercall sub_166F4(int a1@<eax>, wchar_t a2, int a3, int a4)
{
  int v4; // edi@1

  v4 = a1;
  if ( a3 > 0 )
  {
    do
    {
      --a3;
      sub_166BA(v4, a4, a2);
    }
    while ( *(_DWORD *)v4 != -1 && a3 > 0 );
  }
}

//----- (00016726) --------------------------------------------------------
void __usercall sub_16726(int a1@<eax>, wchar_t *a2@<edx>, int a3@<ecx>, int a4)
{
  int v4; // esi@1
  int v5; // edi@1
  wchar_t *v6; // ebx@1

  v4 = a3;
  v5 = a1;
  v6 = a2;
  if ( !(*(_BYTE *)(a3 + 12) & 0x40) || *(_DWORD *)(a3 + 8) )
  {
    while ( a4 > 0 )
    {
      --a4;
      sub_166BA(v5, v4, *v6);
      ++v6;
      if ( *(_DWORD *)v5 == -1 )
      {
        if ( errno != 42 )
          return;
        sub_166BA(v5, v4, 0x3Fu);
      }
    }
  }
  else
  {
    *(_DWORD *)a1 += a4;
  }
}

//----- (0001677C) --------------------------------------------------------
int __cdecl _woutput_l(int a1, wchar_t *a2, int a3, int a4)
{
  int v4; // ecx@1
  int v5; // edi@1
  int v7; // edx@3
  wchar_t v8; // si@4
  int v9; // edx@5
  int v10; // eax@7
  __int16 v11; // ax@39
  int v12; // eax@63
  wchar_t *v13; // esi@64
  unsigned __int16 v14; // cx@65
  int v15; // eax@66
  signed int v16; // edx@75
  int v17; // ecx@77
  wchar_t *v18; // ecx@77
  int v19; // eax@86
  wchar_t *j; // eax@100
  __int64 v21; // rax@112
  int v22; // ecx@112
  unsigned int v23; // ebx@126
  unsigned int v24; // esi@126
  int i; // edi@134
  int v26; // eax@135
  signed int v27; // ecx@137
  unsigned __int64 v28; // kr00_8@137
  char *v29; // eax@140
  int v30; // edi@140
  int v31; // esi@144
  int v32; // esi@158
  int v33; // ebx@158
  int v34; // eax@166
  signed __int16 v35; // [sp-Ch] [bp-464h]@152
  int v36; // [sp+8h] [bp-450h]@166
  int v37; // [sp+Ch] [bp-44Ch]@86
  int v38; // [sp+10h] [bp-448h]@9
  CHAR v39[4]; // [sp+14h] [bp-444h]@165
  int v40; // [sp+18h] [bp-440h]@1
  int v41; // [sp+1Ch] [bp-43Ch]@1
  CHAR AnsiChar; // [sp+20h] [bp-438h]@87
  char v43; // [sp+21h] [bp-437h]@87
  __int16 v44; // [sp+24h] [bp-434h]@108
  __int16 v45; // [sp+26h] [bp-432h]@108
  int v46; // [sp+28h] [bp-430h]@1
  int v47; // [sp+2Ch] [bp-42Ch]@1
  int v48; // [sp+30h] [bp-428h]@1
  int v49; // [sp+34h] [bp-424h]@1
  unsigned int v50; // [sp+38h] [bp-420h]@62
  int v51; // [sp+3Ch] [bp-41Ch]@1
  int v52; // [sp+40h] [bp-418h]@4
  unsigned int v53; // [sp+44h] [bp-414h]@4
  wchar_t *v54; // [sp+48h] [bp-410h]@69
  int v55; // [sp+4Ch] [bp-40Ch]@1
  int v56; // [sp+50h] [bp-408h]@1
  int v57; // [sp+54h] [bp-404h]@87
  char v58[513]; // [sp+253h] [bp-205h]@134
  int v59; // [sp+464h] [bp+Ch]@5

  v4 = a4;
  v5 = 0;
  v47 = a1;
  v51 = a4;
  v40 = 0;
  v56 = 0;
  v46 = 0;
  v55 = 0;
  v49 = 0;
  v41 = 0;
  v48 = 0;
  if ( !a1 || (v7 = (int)a2) == 0 )
  {
    _invalid_parameter(0, 0, 0, 0, 0);
    return -1;
  }
  v8 = *a2;
  v52 = 0;
  v53 = 0;
  if ( v8 )
  {
    while ( 1 )
    {
      v9 = v7 + 2;
      v59 = v9;
      if ( v52 < 0 )
        return v52;
      if ( (unsigned __int16)(v8 - 32) > 0x58u )
        v10 = 0;
      else
        v10 = byte_18230[v8] & 0xF;
      v38 = *(&__lookuptable[8 * v10] + v5) >> 4;
      switch ( v38 )
      {
        case 1:
          v55 = -1;
          v41 = 0;
          v46 = 0;
          v49 = 0;
          v56 = 0;
          v48 = 0;
          goto LABEL_176;
        case 2:
          switch ( v8 )
          {
            case 0x20u:
              v56 |= 2u;
              break;
            case 0x23u:
              v56 |= 0x80u;
              break;
            case 0x2Bu:
              v56 |= 1u;
              break;
            case 0x2Du:
              v56 |= 4u;
              break;
            case 0x30u:
              v56 |= 8u;
              break;
          }
          goto LABEL_176;
        case 3:
          if ( v8 == 42 )
          {
            v51 = v4 + 4;
            v46 = *(_DWORD *)v4;
            if ( v46 < 0 )
            {
              v56 |= 4u;
              v46 = -v46;
            }
          }
          else
          {
            v46 = 10 * v46 + v8 - 48;
          }
          goto LABEL_176;
        case 4:
          v55 = 0;
          goto LABEL_176;
        case 5:
          if ( v8 == 42 )
          {
            v51 = v4 + 4;
            v55 = *(_DWORD *)v4;
            if ( v55 < 0 )
              v55 = -1;
          }
          else
          {
            v55 = 10 * v55 + v8 - 48;
          }
          goto LABEL_176;
        case 6:
          switch ( v8 )
          {
            case 0x49u:
              v11 = *(_WORD *)v9;
              if ( *(_WORD *)v9 != 54 || *(_WORD *)(v9 + 2) != 52 )
              {
                if ( v11 != 51 || *(_WORD *)(v9 + 2) != 50 )
                {
                  if ( v11 != 100 && v11 != 105 && v11 != 111 && v11 != 117 && v11 != 120 && v11 != 88 )
                  {
                    v38 = 0;
LABEL_52:
                    v48 = 1;
                    sub_166BA((int)&v52, v47, v8);
                  }
                }
                else
                {
                  v56 &= 0xFFFF7FFF;
                  v59 = v9 + 4;
                }
              }
              else
              {
                v56 |= 0x8000u;
                v59 = v9 + 4;
              }
              break;
            case 0x68u:
              v56 |= 0x20u;
              break;
            case 0x6Cu:
              if ( *(_WORD *)v9 == 108 )
              {
                v56 |= 0x1000u;
                v59 = v9 + 2;
              }
              else
              {
                v56 |= 0x10u;
              }
              break;
            case 0x77u:
              v56 |= 0x800u;
              break;
          }
          goto LABEL_176;
        case 0:
          goto LABEL_52;
        case 7:
          if ( (signed int)v8 > 105 )
          {
            if ( v8 == 110 )
            {
              v31 = *(_DWORD *)v4;
              v51 = v4 + 4;
              if ( !_get_printf_count_output() )
                goto LABEL_178;
              if ( v56 & 0x20 )
                *(_WORD *)v31 = v52;
              else
                *(_DWORD *)v31 = v52;
              v41 = 1;
              goto LABEL_149;
            }
            if ( v8 == 111 )
            {
              v50 = 8;
              if ( v56 & 0x80 )
                v56 |= 0x200u;
            }
            else
            {
              if ( v8 == 112 )
              {
                v55 = 8;
LABEL_106:
                v40 = 7;
              }
              else
              {
                if ( v8 == 115 )
                  goto LABEL_75;
                if ( v8 == 117 )
                  goto LABEL_62;
                if ( v8 != 120 )
                  goto LABEL_149;
                v40 = 39;
              }
              v50 = 16;
              if ( v56 & 0x80 )
              {
                v44 = 48;
                v45 = v40 + 81;
                v49 = 2;
              }
            }
LABEL_111:
            if ( v56 & 0x8000 || v56 & 0x1000 )
            {
              v21 = *(_QWORD *)v4;
              v22 = v4 + 8;
            }
            else
            {
              v22 = v4 + 4;
              if ( v56 & 0x20 )
              {
                v51 = v22;
                if ( v56 & 0x40 )
                  LODWORD(v21) = *(_WORD *)(v22 - 4);
                else
                  LODWORD(v21) = *(_WORD *)(v22 - 4);
                v21 = (signed int)v21;
LABEL_123:
                if ( v56 & 0x40 && v21 < 0 )
                {
                  v21 = -v21;
                  v56 |= 0x100u;
                }
                v23 = HIDWORD(v21);
                v24 = v21;
                if ( !(v56 & 0x9000) )
                  v23 = 0;
                if ( v55 >= 0 )
                {
                  v56 &= 0xFFFFFFF7;
                  if ( v55 > 512 )
                    v55 = 512;
                }
                else
                {
                  v55 = 1;
                }
                if ( !(v23 | (unsigned int)v21) )
                  v49 = 0;
                for ( i = (int)v58; ; --i )
                {
                  v26 = v55--;
                  if ( v26 <= 0 && !(v23 | v24) )
                    break;
                  v27 = __PAIR__(v23, v24) % (signed int)v50 + 48;
                  v28 = __PAIR__(v23, v24) / (signed int)v50;
                  v23 = __PAIR__(v23, v24) / (signed int)v50 >> 32;
                  v24 = v28;
                  if ( v27 > 57 )
                    LOBYTE(v27) = v40 + v27;
                  *(_BYTE *)i = v27;
                }
                v29 = &v58[-i];
                v30 = i + 1;
                v53 = (unsigned int)v29;
                v54 = (wchar_t *)v30;
                if ( v56 & 0x200 && (!v29 || *(_BYTE *)v30 != 48) )
                {
                  v54 = (wchar_t *)((char *)v54 - 1);
                  *(_BYTE *)v54 = 48;
                  v15 = (int)(v29 + 1);
                  goto LABEL_71;
                }
                goto LABEL_149;
              }
              LODWORD(v21) = *(_DWORD *)(v22 - 4);
              if ( v56 & 0x40 )
                v21 = (signed int)v21;
              else
                HIDWORD(v21) = 0;
            }
            v51 = v22;
            goto LABEL_123;
          }
          if ( v8 == 105 )
            goto LABEL_61;
          if ( v8 == 67 )
          {
            if ( !(v56 & 0x830) )
              v56 |= 0x20u;
LABEL_86:
            v19 = *(_WORD *)v4;
            v48 = 1;
            v51 = v4 + 4;
            v37 = v19;
            if ( v56 & 0x20 )
            {
              AnsiChar = v19;
              v43 = 0;
              if ( mbtowc((int)&v57, (unsigned int)&AnsiChar, __mb_cur_max) < 0 )
                v41 = 1;
            }
            else
            {
              LOWORD(v57) = v19;
            }
            v54 = (wchar_t *)&v57;
            v53 = 1;
            goto LABEL_149;
          }
          if ( v8 == 83 )
          {
            if ( !(v56 & 0x830) )
              v56 |= 0x20u;
LABEL_75:
            v16 = 0x7FFFFFFF;
            if ( v55 != -1 )
              v16 = v55;
            v17 = v4 + 4;
            v51 = v17;
            v18 = *(wchar_t **)(v17 - 4);
            v54 = v18;
            if ( !(v56 & 0x20) )
            {
              if ( !v18 )
              {
                v54 = __wnullstring;
                v18 = __wnullstring;
              }
              v48 = 1;
              for ( j = v18; ; ++j )
              {
                if ( v16 )
                {
                  --v16;
                  if ( *j )
                    continue;
                }
                break;
              }
              v15 = j - v18;
              goto LABEL_71;
            }
            if ( !v18 )
              v54 = (wchar_t *)__nullstring;
            v53 = 0;
            if ( v16 > 0 )
            {
              do
              {
                if ( !*((_BYTE *)v54 + v53) )
                  break;
                ++v53;
              }
              while ( (signed int)v53 < v16 );
            }
            goto LABEL_149;
          }
          if ( v8 == 88 )
            goto LABEL_106;
          if ( v8 != 90 )
          {
            if ( v8 == 99 )
              goto LABEL_86;
            if ( v8 != 100 )
              goto LABEL_149;
LABEL_61:
            v56 |= 0x40u;
LABEL_62:
            v50 = 10;
            goto LABEL_111;
          }
          v12 = *(_DWORD *)v4;
          v51 = v4 + 4;
          if ( !v12 || (v13 = *(wchar_t **)(v12 + 4)) == 0 )
          {
            v54 = (wchar_t *)__nullstring;
            v15 = strlen(__nullstring);
            goto LABEL_71;
          }
          v14 = *(_WORD *)v12;
          if ( *(_WORD *)(v12 + 2) < *(_WORD *)v12 )
            goto LABEL_178;
          v15 = v14;
          if ( !(v56 & 0x800) )
          {
            v48 = 0;
            v54 = v13;
LABEL_71:
            v53 = v15;
            goto LABEL_149;
          }
          if ( !(~(_BYTE)v14 & 1) || !(~(_BYTE)v13 & 1) )
          {
LABEL_178:
            _invalid_parameter(0, 0, 0, 0, 0);
            return -1;
          }
          v54 = v13;
          v53 = (unsigned int)v14 >> 1;
          v48 = 1;
LABEL_149:
          if ( v41 )
            goto LABEL_176;
          if ( v56 & 0x40 )
          {
            if ( v56 & 0x100 )
            {
              v35 = 45;
LABEL_157:
              v49 = 1;
              v44 = v35;
              goto LABEL_158;
            }
            if ( v56 & 1 )
            {
              v44 = 43;
              v49 = 1;
            }
            else if ( v56 & 2 )
            {
              v35 = 32;
              goto LABEL_157;
            }
          }
LABEL_158:
          v32 = v53;
          v33 = v46 - v53 - v49;
          if ( !(v56 & 0xC) )
            sub_166F4((int)&v52, 0x20u, v46 - v53 - v49, v47);
          sub_16726((int)&v52, (wchar_t *)&v44, v47, v49);
          if ( v56 & 8 && !(v56 & 4) )
            sub_166F4((int)&v52, 0x30u, v33, v47);
          if ( v48 || v32 <= 0 )
          {
            sub_16726((int)&v52, v54, v47, v32);
          }
          else
          {
            *(_DWORD *)v39 = v54;
            v50 = v32;
            while ( 1 )
            {
              --v50;
              v34 = mbtowc((int)&v37, v39[0], __mb_cur_max);
              v36 = v34;
              if ( v34 == 2 )
                --v50;
              if ( v34 <= 0 )
                break;
              sub_166BA((int)&v52, v47, v37);
              *(_DWORD *)v39 += v36;
              if ( (signed int)v50 <= 0 )
                goto LABEL_173;
            }
            v52 = -1;
          }
LABEL_173:
          if ( v52 >= 0 && v56 & 4 )
            sub_166F4((int)&v52, 0x20u, v33, v47);
LABEL_176:
          v7 = v59;
          v8 = *(_WORD *)v59;
          if ( !*(_WORD *)v59 )
            return v52;
          v5 = v38;
          v4 = v51;
          break;
        default:
          goto LABEL_176;
      }
    }
  }
  return v52;
}
// 166B4: using guessed type int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1909C: using guessed type char *__nullstring;
// 190A0: using guessed type wchar_t *__wnullstring;
// 1677C: using guessed type char var_205[513];

//----- (000171BA) --------------------------------------------------------
wint_t __cdecl _fputwc_nolock(wchar_t Ch, FILE *File)
{
  wint_t result; // ax@2
  bool v3; // sf@3

  if ( File )
  {
    v3 = File->_cnt - 2 < 0;
    File->_cnt -= 2;
    if ( v3 )
    {
      result = _flswbuf(Ch, File);
    }
    else
    {
      result = Ch;
      *(_WORD *)File->_ptr = Ch;
      File->_ptr += 2;
    }
  }
  else
  {
    _invalid_parameter(0, 0, 0, 0, 0);
    result = -1;
  }
  return result;
}
// 166B4: using guessed type int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1724B: using guessed type _DWORD __cdecl _flswbuf(_DWORD, _DWORD);

//----- (00017204) --------------------------------------------------------
int __cdecl mbtowc(int a1, CHAR AnsiChar, int a3)
{
  int v3; // esi@1

  v3 = AnsiChar;
  if ( !AnsiChar || !a3 )
    return 0;
  if ( !*(_BYTE *)AnsiChar )
  {
    if ( a1 )
      *(_WORD *)a1 = 0;
    return 0;
  }
  *(_WORD *)a1 = RtlAnsiCharToUnicodeChar((unsigned int)&AnsiChar);
  return AnsiChar - v3;
}

//----- (0001726F) --------------------------------------------------------
void __stdcall FxStubDriverUnloadCommon()
{
  FxStubUnbindClasses((struct _WDF_BIND_INFO *)&dword_190BC);
  WdfVersionUnbind(&DestinationString, &dword_190BC, WdfDriverGlobals);
}
// 174A4: using guessed type int __stdcall WdfVersionUnbind(_DWORD, _DWORD, _DWORD);
// 190BC: using guessed type int dword_190BC;

//----- (00017295) --------------------------------------------------------
void __stdcall FxStubDriverUnload(int a1)
{
  if ( dword_1975C && dword_1975C != FxStubDriverUnload )
    dword_1975C(a1);
  FxStubDriverUnloadCommon();
}
// 1975C: using guessed type int (__stdcall *dword_1975C)(_DWORD);

//----- (000172BD) --------------------------------------------------------
void __stdcall FxStubDriverMiniportUnload(int a1, int a2)
{
  FxStubDriverUnloadCommon();
}

//----- (000172CA) --------------------------------------------------------
int __stdcall FxDriverEntryWorker(int a1, PCUNICODE_STRING SourceString)
{
  int result; // eax@2
  int v3; // esi@4

  if ( a1 )
  {
    DestinationString.Length = 0;
    dword_19768 = a1;
    DestinationString.MaximumLength = 520;
    DestinationString.Buffer = (PWSTR)dword_19770;
    RtlCopyUnicodeString(&DestinationString, SourceString);
    result = WdfVersionBind(a1, &DestinationString, &dword_190BC, &WdfDriverGlobals);
    if ( result >= 0 )
    {
      v3 = FxStubBindClasses((struct _WDF_BIND_INFO *)&dword_190BC);
      if ( v3 >= 0 && (FxStubInitTypes(), v3 = DriverEntry(a1, SourceString), v3 >= 0) )
      {
        if ( *(_BYTE *)(WdfDriverGlobals + 44) )
        {
          if ( *(_DWORD *)(a1 + 52) )
            dword_1975C = *(int (__stdcall **)(_DWORD))(a1 + 52);
          *(_DWORD *)(a1 + 52) = FxStubDriverUnload;
        }
        else if ( *(_BYTE *)(WdfDriverGlobals + 4) & 2 )
        {
          dword_19760 = dword_19444;
          dword_19444 = (int)FxStubDriverMiniportUnload;
        }
        result = 0;
      }
      else
      {
        FxStubDriverUnloadCommon();
        result = v3;
      }
    }
  }
  else
  {
    result = DriverEntry(0, SourceString);
  }
  return result;
}
// 174B0: using guessed type int __stdcall WdfVersionBind(_DWORD, _DWORD, _DWORD, _DWORD);
// 190BC: using guessed type int dword_190BC;
// 19444: using guessed type int dword_19444;
// 1975C: using guessed type int (__stdcall *dword_1975C)(_DWORD);
// 19760: using guessed type int dword_19760;
// 19768: using guessed type int dword_19768;
// 19770: using guessed type int dword_19770[130];

//----- (000173B5) --------------------------------------------------------
int __stdcall FxStubBindClasses(struct _WDF_BIND_INFO *a1)
{
  unsigned int v1; // esi@1
  int result; // eax@1
  int (__stdcall *v3)(_DWORD, _DWORD, _DWORD, _DWORD); // eax@3

  v1 = (unsigned int)&__KMDF_CLASS_BIND_END;
  result = 0;
  if ( &__KMDF_CLASS_BIND_END < &__KMDF_CLASS_BIND_END )
  {
    while ( *(_DWORD *)v1 == 44 )
    {
      v3 = *(int (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD))(v1 + 32);
      off_190EC = (struct _MARKER_TYPE *)v1;
      if ( v3 )
        result = v3(WdfVersionBindClass, a1, WdfDriverGlobals, v1);
      else
        result = WdfVersionBindClass(a1, WdfDriverGlobals, v1);
      if ( result >= 0 )
      {
        v1 += 44;
        if ( v1 < (unsigned int)&__KMDF_CLASS_BIND_END )
          continue;
      }
      return result;
    }
    result = -1073741820;
  }
  return result;
}
// 174BC: using guessed type int __stdcall WdfVersionBindClass(_DWORD, _DWORD, _DWORD);
// 190E8: using guessed type void *__KMDF_CLASS_BIND_END;
// 190EC: using guessed type struct _MARKER_TYPE *off_190EC;

//----- (00017415) --------------------------------------------------------
void __stdcall FxStubUnbindClasses(struct _WDF_BIND_INFO *a1)
{
  unsigned int v1; // esi@1
  void (__stdcall *v2)(_DWORD, _DWORD, _DWORD, _DWORD); // eax@3

  v1 = (unsigned int)&__KMDF_CLASS_BIND_END;
  if ( (_UNKNOWN *)off_190EC != &__KMDF_CLASS_BIND_START
    && (unsigned int)off_190EC >= (unsigned int)&__KMDF_CLASS_BIND_END )
  {
    do
    {
      v2 = *(void (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD))(v1 + 36);
      if ( v2 )
        v2(WdfVersionUnbindClass, a1, WdfDriverGlobals, v1);
      else
        WdfVersionUnbindClass(a1, WdfDriverGlobals, v1);
      v1 += 44;
    }
    while ( v1 <= (unsigned int)off_190EC );
  }
}
// 174C8: using guessed type int __stdcall WdfVersionUnbindClass(_DWORD, _DWORD, _DWORD);
// 190E8: using guessed type void *__KMDF_CLASS_BIND_END;
// 190EC: using guessed type struct _MARKER_TYPE *off_190EC;

//----- (00017466) --------------------------------------------------------
void __stdcall FxStubInitTypes()
{
  signed int v0; // ecx@2
  signed int v1; // edx@2
  int (__fastcall **v2)(_DWORD, _DWORD, _DWORD, _DWORD); // edi@2
  signed int v3; // esi@2

  if ( &__KMDF_TYPE_INIT_END < &__KMDF_TYPE_INIT_END )
  {
    v0 = 20;
    v1 = 15;
    v2 = &pfnEtwUnregister;
    v3 = 214748365;
    do
    {
      if ( *v2 )
        *(v2 - 1) = (int (__fastcall *)(_DWORD, _DWORD, _DWORD, _DWORD))((int (__fastcall *)(signed int, signed int))*v2)(
                                                                          v0,
                                                                          v1);
      v2 += 5;
      --v3;
    }
    while ( v3 );
  }
}
// 190F8: using guessed type void *__KMDF_TYPE_INIT_END;
// 19108: using guessed type int (__fastcall *pfnEtwUnregister)(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (0001A006) --------------------------------------------------------
int __stdcall WppLoadTracingSupport()
{
  int result; // eax@1
  UNICODE_STRING DestinationString; // [sp+8h] [bp-Ch]@1
  unsigned int v2; // [sp+10h] [bp-4h]@1

  v2 = 0;
  RtlInitUnicodeString(&DestinationString, L"PsGetVersion");
  pfnWppGetVersion = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD))MmGetSystemRoutineAddress(&DestinationString);
  RtlInitUnicodeString(&DestinationString, L"WmiTraceMessage");
  result = (int)MmGetSystemRoutineAddress(&DestinationString);
  pfnWppTraceMessage = (int (__cdecl *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))result;
  if ( result )
  {
    RtlInitUnicodeString(&DestinationString, L"WmiQueryTraceInformation");
    pfnWppQueryTraceInformation = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))MmGetSystemRoutineAddress(&DestinationString);
    result = (int)pfnWppGetVersion;
    WPPTraceSuite = 2;
    if ( pfnWppGetVersion )
      result = pfnWppGetVersion(&v2, 0, 0, 0);
    if ( v2 >= 6 )
    {
      RtlInitUnicodeString(&DestinationString, L"EtwRegisterClassicProvider");
      result = (int)MmGetSystemRoutineAddress(&DestinationString);
      pfnEtwRegisterClassicProvider = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))result;
      if ( result )
      {
        RtlInitUnicodeString(&DestinationString, L"EtwUnregister");
        result = (int)MmGetSystemRoutineAddress(&DestinationString);
        pfnEtwUnregister = (int (__fastcall *)(_DWORD, _DWORD, _DWORD, _DWORD))result;
        WPPTraceSuite = 4;
      }
    }
  }
  else
  {
    pfnWppTraceMessage = (int (__cdecl *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))W2kTraceMessage;
    WPPTraceSuite = 1;
  }
  return result;
}
// 19100: using guessed type int (__stdcall *pfnWppQueryTraceInformation)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19104: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19108: using guessed type int (__fastcall *pfnEtwUnregister)(_DWORD, _DWORD, _DWORD, _DWORD);
// 1910C: using guessed type int (__stdcall *pfnEtwRegisterClassicProvider)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19110: using guessed type int (__stdcall *pfnWppGetVersion)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19114: using guessed type int WPPTraceSuite;

//----- (0001A0E4) --------------------------------------------------------
int __stdcall WppTraceCallback(int a1, int a2, size_t a3, void *a4, int a5, int a6)
{
  int v6; // eax@1
  void *v7; // edi@1
  int v8; // edx@2
  void *v9; // ebx@2
  int v10; // esi@2
  unsigned int v11; // ecx@3
  int v12; // ecx@4
  int v13; // esi@8
  char *v14; // edi@8
  int v15; // edx@9
  int v16; // esi@14
  size_t v17; // edi@14
  int v18; // esi@18
  void *v19; // ecx@19
  int v20; // eax@19
  int v21; // ebx@20
  int v22; // esi@21
  int v23; // esi@26
  void *v24; // edi@29
  char *v25; // ebx@29
  int v26; // edx@35
  int v27; // ecx@35
  int v29; // [sp+14h] [bp-4h]@1
  int v30; // [sp+14h] [bp-4h]@9
  int v31; // [sp+20h] [bp+8h]@14

  v6 = a6;
  v7 = 0;
  v29 = 0;
  *(_DWORD *)a6 = 0;
  switch ( (unsigned __int8)a1 )
  {
    case 8u:
      v8 = a5;
      v9 = a4;
      v10 = a5;
      if ( WPPTraceSuite != 1 || (v11 = *((_DWORD *)a4 + 4), v11 <= 1) )
      {
        v15 = *(_DWORD *)(a5 + 24);
        v30 = *(_DWORD *)(a5 + 24);
        do
        {
          v10 = *(_DWORD *)(v10 + 8);
          v7 = (char *)v7 + 1;
        }
        while ( v10 );
        a4 = v7;
        if ( (unsigned int)v7 > 0x3F )
          goto LABEL_12;
        if ( v15 )
        {
          v16 = 28 * (_DWORD)v7 + 20;
          v31 = *(_WORD *)v15 + v16 + 2;
          v17 = *(_WORD *)v15 + v16 + 2;
        }
        else
        {
          v16 = 0;
          v17 = 28 * (_DWORD)v7 + 20;
          v31 = v17;
        }
        if ( v17 > a3 )
        {
          v29 = -1073741789;
          if ( a3 >= 4 )
          {
            *(_DWORD *)v9 = v17;
LABEL_7:
            *(_DWORD *)v6 = 4;
            return v29;
          }
        }
        else
        {
          memset(v9, 0, a3);
          *((_DWORD *)v9 + 4) = a4;
          *(_DWORD *)v9 = v17;
          *((_DWORD *)v9 + 2) = v16;
          if ( v30 )
          {
            v18 = (int)((char *)v9 + v16);
            *(_WORD *)v18 = *(_WORD *)v30;
            memcpy((void *)(v18 + 2), *(const void **)(v30 + 4), *(_WORD *)v30);
          }
          v19 = a4;
          v20 = a5;
          if ( a4 )
          {
            v21 = (int)((char *)v9 + 36);
            do
            {
              v22 = *(_DWORD *)(v20 + 4);
              *(_DWORD *)(v21 - 16) = *(_DWORD *)v22;
              v22 += 4;
              *(_DWORD *)(v21 - 16 + 4) = *(_DWORD *)v22;
              v22 += 4;
              *(_DWORD *)(v21 - 16 + 8) = *(_DWORD *)v22;
              *(_DWORD *)(v21 - 16 + 12) = *(_DWORD *)(v22 + 4);
              *(_DWORD *)v21 = 528384;
              *(_DWORD *)(v20 + 32) = 0;
              v21 += 28;
              v19 = (char *)v19 - 1;
              *(_BYTE *)(v20 + 29) = 0;
              v20 = *(_DWORD *)(v20 + 8);
            }
            while ( v19 );
            v17 = v31;
          }
          v29 = 0;
          *(_DWORD *)a6 = v17;
        }
      }
      else
      {
        v12 = 28 * v11;
        if ( v12 + 20 > a3 )
        {
          v29 = -1073741789;
          if ( a3 < 4 )
            return v29;
          *(_DWORD *)a4 = v12 + 20;
          goto LABEL_7;
        }
        v13 = *(_DWORD *)(a5 + 4);
        v14 = (char *)a4 + v12 - 8;
        *(_DWORD *)v14 = *(_DWORD *)v13;
        v13 += 4;
        v14 += 4;
        *(_DWORD *)v14 = *(_DWORD *)v13;
        v13 += 4;
        v14 += 4;
        *(_DWORD *)v14 = *(_DWORD *)v13;
        *((_DWORD *)v14 + 1) = *(_DWORD *)(v13 + 4);
        *((_DWORD *)v9 + 7 * *((_DWORD *)v9 + 4) + 2) = 528384;
        *(_DWORD *)(v8 + 32) = 0;
        *(_BYTE *)(v8 + 29) = 0;
      }
      return v29;
    case 4u:
    case 5u:
      v23 = a5;
      if ( !a5 )
        goto LABEL_27;
      if ( a3 < 0x30 )
      {
LABEL_12:
        v29 = -1073741811;
      }
      else
      {
        v24 = a4;
        v25 = (char *)a4 + 24;
        do
        {
          if ( RtlCompareMemory(*(const void **)(v23 + 4), v25, 0x10u) == 16 )
            break;
          v23 = *(_DWORD *)(v23 + 8);
        }
        while ( v23 );
        if ( v23 )
        {
          v29 = 0;
          if ( (_BYTE)a1 == 5 )
          {
            *(_BYTE *)(v23 + 29) = 0;
            *(_DWORD *)(v23 + 32) = 0;
            *(_DWORD *)(v23 + 16) = 0;
            *(_DWORD *)(v23 + 20) = 0;
          }
          else
          {
            v26 = *((_DWORD *)v24 + 2);
            v27 = *((_DWORD *)v24 + 3);
            *(_DWORD *)(v23 + 16) = v26;
            *(_DWORD *)(v23 + 20) = v27;
            if ( WPPTraceSuite == 2 )
            {
              if ( !pfnWppQueryTraceInformation(3, &a3, 4, &a5, v24) )
                *(_BYTE *)(v23 + 29) = a3;
              v29 = pfnWppQueryTraceInformation(2, v23 + 32, 4, &a5, v24);
            }
            else
            {
              *(_DWORD *)(v23 + 32) = v27;
              *(_BYTE *)(v23 + 29) = BYTE2(v26);
            }
          }
        }
        else
        {
LABEL_27:
          v29 = -1073741163;
        }
      }
      return v29;
    case 6u:
    case 7u:
      return 0;
    default:
      return -1073741808;
  }
}
// 19100: using guessed type int (__stdcall *pfnWppQueryTraceInformation)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19114: using guessed type int WPPTraceSuite;

//----- (0001A340) --------------------------------------------------------
void __stdcall WppCleanupKm(int a1)
{
  PDEVICE_OBJECT v1; // esi@1

  v1 = WPP_GLOBAL_Control;
  if ( (PDEVICE_OBJECT *)WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
  {
    if ( WPPTraceSuite == 4 )
    {
      while ( v1 )
      {
        if ( *(_QWORD *)&v1->DeviceExtension )
          pfnEtwUnregister(
            v1->DeviceType,
            v1->DeviceType | (unsigned int)v1->DeviceExtension,
            v1->DeviceExtension,
            v1->DeviceType);
        v1 = (PDEVICE_OBJECT)v1->DriverObject;
      }
    }
    else if ( WPPTraceSuite == 2 )
    {
      IoWMIRegistrationControl(WPP_GLOBAL_Control, 0x80000002);
    }
    WPP_GLOBAL_Control = (PDEVICE_OBJECT)&WPP_GLOBAL_Control;
  }
}
// 19108: invalid function type has been ignored
// 19108: using guessed type int (__fastcall *pfnEtwUnregister)(_DWORD, _DWORD, _DWORD, _DWORD);
// 19114: using guessed type int WPPTraceSuite;

//----- (0001A39C) --------------------------------------------------------
NTSTATUS __stdcall WppInitKm(int a1, int a2)
{
  struct _DEVICE_OBJECT *v2; // esi@1
  int v3; // eax@3
  NTSTATUS result; // eax@3

  v2 = &WPP_MAIN_CB;
  if ( WPP_GLOBAL_Control != &WPP_MAIN_CB )
  {
    WPP_GLOBAL_Control = &WPP_MAIN_CB;
    if ( WPPTraceSuite == 4 )
    {
      do
      {
        v3 = (int)&v2->DeviceExtension;
        *(_DWORD *)v3 = 0;
        *(_DWORD *)(v3 + 4) = 0;
        result = pfnEtwRegisterClassicProvider(
                   v2->ReferenceCount,
                   0,
                   WppClassicProviderCallback,
                   v2,
                   &v2->DeviceExtension);
        v2 = (struct _DEVICE_OBJECT *)v2->DriverObject;
      }
      while ( v2 );
    }
    else if ( WPPTraceSuite == 2 )
    {
      *(_DWORD *)&WPP_MAIN_CB.Type = WppTraceCallback;
      result = IoWMIRegistrationControl(&WPP_MAIN_CB, 0x80010001);
    }
    else
    {
      result = dword_19304(WdfDriverGlobals, a1, WppTraceCallback, &WPP_MAIN_CB);
    }
  }
  return result;
}
// 1910C: invalid function type has been ignored
// 1910C: using guessed type int (__stdcall *pfnEtwRegisterClassicProvider)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 19114: using guessed type int WPPTraceSuite;
// 19304: using guessed type int (__stdcall *dword_19304)(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (0001B005) --------------------------------------------------------
void __cdecl __security_init_cookie()
{
  ULONG v0; // eax@1

  v0 = __security_cookie;
  if ( !__security_cookie || __security_cookie == -1153374642 )
  {
    v0 = (unsigned int)&__security_cookie ^ _KeTickCount.LowPart;
    __security_cookie = (unsigned int)&__security_cookie ^ _KeTickCount.LowPart;
    if ( &__security_cookie == (ULONG_PTR *)_KeTickCount.LowPart )
    {
      v0 = -1153374642;
      __security_cookie = -1153374642;
    }
  }
  __security_cookie_complement = ~v0;
}

// ALL OK, 96 function(s) have been successfully decompiled
