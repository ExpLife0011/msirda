/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: Visual C++
*/

#include <windows.h>
#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int __stdcall WPP_SF_(int a1, int a2, int a3, int a4);
int __stdcall WPP_SF_dd(int a1, int a2, int a3, int a4, int a5, char a6);
int __stdcall WPP_SF_q(int a1, int a2, int a3, int a4, int a5);
int __stdcall WPP_SF_x(int a1, int a2, int a3, int a4, int a5, int a6);
NTSTATUS __stdcall HidIrQueryKeyInfo(HANDLE KeyHandle, int a2);
char __stdcall MergeReportCollection(int a1, int a2);
void __stdcall UpdateMappingTable(int a1, int *a2, int a3, unsigned int a4);
int __stdcall GetAvailableReportId(int a1);
signed int __stdcall MergeReportDescriptors(int a1, int a2, int a3, signed int a4);
NTSTATUS __stdcall HidIrReadBaseReportMappingTables(int a1, int a2, HANDLE KeyHandle);
char __stdcall IsOverrideAllowed(int a1);
int __stdcall HidIrAddAdditionalReportMapping(size_t, int, SIZE_T NumberOfBytes, int); // idb
int __stdcall HidIrReadAdditionalReportMappings(size_t a1, int a2, int a3);
int __stdcall HidIrSortDecodersByPriority(int a1);
// void __usercall sub_11EF0(int a1@<esi>);
int __stdcall WPP_INIT_CONTROL_ARRAY(int a1);
NTSTATUS __cdecl W2kTraceMessage(int a1, int a2, int a3, int a4, char a5, void *a6);
int __stdcall WppClassicProviderCallback(int a1, char a2, int a3, int a4);
int __stdcall HidIrAddDevice(int a1, int a2);
void __stdcall HidIrUnload(PDEVICE_OBJECT DeviceObject);
int __stdcall HidIrSynchronousCompletion(int, int, PRKEVENT Event); // idb
NTSTATUS __stdcall HidIrCallDriverSynchronous(int a1, PIRP Irp);
int __stdcall HidIrIoctl(int, PIRP Irp); // idb
int __stdcall WPP_SF_Ddx(int a1, int a2, int a3, int a4, int a5, char a6, char a7, int a8);
int __stdcall WPP_SF_dDDD(int a1, int a2, int a3, int a4, int a5, char a6, char a7, char a8);
int __stdcall WPP_SF_dxq(int a1, int a2, int a3, int a4, int a5, char a6, int a7, char a8);
int __stdcall WPP_SF_xq(int a1, int a2, int a3, int a4, int a5, int a6, char a7);
int __stdcall WPP_SF_xqi(int a1, int a2, int a3, int a4, int a5, int a6, char a7, char a8, int a9);
void *__stdcall HidIrGetSystemAddressForMdlSafe(PMDL MemoryDescriptorList);
LONG __stdcall HidIrDecrementPendingRequestCount(int a1);
int __stdcall HidIrGetDataFromPayload(int a1, int a2);
int __stdcall HidIrGetUsageEntry(int a1, int a2);
int __stdcall HidIrGetReportLen(int a1, unsigned __int8 a2);
int __stdcall HidIrGetAddressFromPayload(int a1, int a2);
int __stdcall HidIrFindDecoder(int a1, int a2);
bool __stdcall IsToggleBitValid(int a1, int a2, int a3);
BOOL __stdcall DoesUsageTableEntryGenerateReport(int a1);
int __stdcall GetHammingCheckSum(int a1, __int64 a2);
int __stdcall GetPacketCheckSum(int a1, unsigned __int64 a2);
int __stdcall GetRedundantPacketCheckSum(int a1, __int64 a2);
bool __stdcall IsCheckSumValid(int a1, unsigned __int64 a2);
signed __int64 __stdcall HidIrGetElapsedTimems(unsigned int a1, int a2, int a3);
char __stdcall ReportIsAllKeysUpReport(int a1, int a2, int a3);
char __stdcall ReportComesFromActiveInputDevice(int a1, int a2, int a3);
unsigned __int8 __stdcall ShouldSendInputBasedOnActiveInputDevice(int a1, int a2, int a3);
int __stdcall HidIrCallAtPassiveIrql(PDEVICE_OBJECT DeviceObject, PIO_WORKITEM_ROUTINE WorkerRoutine, int); // idb
int __stdcall HidIrReadCompletion(int, PIRP Irp, int); // idb
signed int __stdcall HidIrWriteReport(int a1, int a2);
signed int __stdcall HidIrIncrementPendingRequestCount(int a1);
NTSTATUS __stdcall HidIrReadReport(int a1, PIRP Irp, int a3);
int __stdcall HidParse_GetUCHAR(int a1, int a2, int a3);
int __stdcall HidParse_GetUSHORT(int a1, int a2, int a3);
int __stdcall HidParse_WriteUsageItem(char a1, char a2, char a3, unsigned int a4, int a5, int a6);
int __stdcall HidParse_WriteReportCollection(int a1, int a2, int a3);
signed int __stdcall HidParse_ParseReportDescriptor(int a1, signed int a2, int a3);
int __stdcall WPP_SF_Dqq(int a1, int a2, int a3, int a4, int a5, char a6, char a7);
int __stdcall HidIrWriteWakePatternToRegistry(int a1);
char __stdcall IsSleepButton(int a1, int a2);
char __stdcall IsSleepOrWakeButton(int a1, int a2);
char __stdcall ProtocolFromDecoderId(int a1);
int __stdcall SetDeviceWakePattern(int a1, int *a2, int a3, int a4, int a5);
int __stdcall InferWakePatternBasedOnButtonCode(int a1, int a2, int a3, int a4);
int __stdcall ProgramDeviceForWake(int a1, int a2);
// void *__cdecl memcpy(void *, const void *, size_t);
// void *__cdecl memset(void *, int, size_t);
// NTSTATUS __stdcall HidRegisterMinidriver(PHID_MINIDRIVER_REGISTRATION MinidriverRegistration);
// KIRQL __stdcall KeGetCurrentIrql();
// KIRQL __fastcall KfAcquireSpinLock(PKSPIN_LOCK SpinLock);
// void __fastcall KfReleaseSpinLock(PKSPIN_LOCK SpinLock, KIRQL NewIrql);
// NTSTATUS __stdcall ZwQueryKey(HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);
// NTSTATUS __stdcall ZwEnumerateKey(HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);
// NTSTATUS __stdcall ZwEnumerateValueKey(HANDLE KeyHandle, ULONG Index, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);
// SIZE_T __stdcall RtlCompareMemory(const void *Source1, const void *Source2, SIZE_T Length);
// NTSTATUS __stdcall ZwClose(HANDLE Handle);
// NTSTATUS __stdcall ZwOpenKey(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
// NTSTATUS __stdcall ZwCreateKey(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);
// NTSTATUS __stdcall RtlAppendUnicodeToString(PUNICODE_STRING Destination, PCWSTR Source);
// void __stdcall RtlCopyUnicodeString(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString);
// NTSTATUS __stdcall KeWaitForSingleObject(PVOID Object, KWAIT_REASON WaitReason, KPROCESSOR_MODE WaitMode, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
// PVOID __stdcall IoGetDriverObjectExtension(PDRIVER_OBJECT DriverObject, PVOID ClientIdentificationAddress);
// BOOLEAN __stdcall KeCancelTimer(PKTIMER);
// NTSTATUS __stdcall RtlAppendUnicodeStringToString(PUNICODE_STRING Destination, PCUNICODE_STRING Source);
// NTSTATUS __stdcall RtlIntegerToUnicodeString(ULONG Value, ULONG Base, PUNICODE_STRING String);
// NTSTATUS __stdcall IoOpenDeviceRegistryKey(PDEVICE_OBJECT DeviceObject, ULONG DevInstKeyType, ACCESS_MASK DesiredAccess, PHANDLE DevInstRegKey);
// void __fastcall IofCompleteRequest(PIRP Irp, CCHAR PriorityBoost);
// NTSTATUS __stdcall PoCallDriver(PDEVICE_OBJECT DeviceObject, PIRP Irp);
// BOOLEAN __stdcall KeSetTimer(PKTIMER Timer, LARGE_INTEGER DueTime, PKDPC Dpc);
// NTSTATUS __stdcall IoWMIWriteEvent(PVOID WnodeEventItem);
// PVOID __stdcall MmGetSystemRoutineAddress(PUNICODE_STRING SystemRoutineName);
// NTSTATUS __stdcall IoWMIRegistrationControl(PDEVICE_OBJECT DeviceObject, ULONG Action);
// void __stdcall KeInitializeTimer(PKTIMER Timer);
// void __stdcall KeInitializeEvent(PRKEVENT Event, EVENT_TYPE Type, BOOLEAN State);
// NTSTATUS __fastcall IofCallDriver(PDEVICE_OBJECT DeviceObject, PIRP Irp);
// ULONG KeQueryTimeIncrement(void);
// void __stdcall KeInitializeSpinLock(PKSPIN_LOCK SpinLock);
// NTSTATUS __stdcall IoAllocateDriverObjectExtension(PDRIVER_OBJECT DriverObject, PVOID ClientIdentificationAddress, ULONG DriverObjectExtensionSize, PVOID *DriverObjectExtension);
// PVOID __stdcall MmMapLockedPages(PMDL MemoryDescriptorList, KPROCESSOR_MODE AccessMode);
// LONG __fastcall InterlockedDecrement(volatile LONG *Addend);
// void __stdcall IoFreeWorkItem(PIO_WORKITEM IoWorkItem);
// void __stdcall IoQueueWorkItem(PIO_WORKITEM IoWorkItem, PIO_WORKITEM_ROUTINE WorkerRoutine, WORK_QUEUE_TYPE QueueType, PVOID Context);
// PIO_WORKITEM __stdcall IoAllocateWorkItem(PDEVICE_OBJECT DeviceObject);
// void __stdcall PoSetSystemState(EXECUTION_STATE Flags);
// BOOLEAN __stdcall KeReadStateTimer(PKTIMER Timer);
// void __stdcall IoFreeMdl(PMDL Mdl);
// PVOID __stdcall MmMapLockedPagesSpecifyCache(PMDL MemoryDescriptorList, KPROCESSOR_MODE AccessMode, MEMORY_CACHING_TYPE CacheType, PVOID BaseAddress, ULONG BugCheckOnFailure, MM_PAGE_PRIORITY Priority);
// LONG __fastcall InterlockedIncrement(volatile LONG *Addend);
// void __stdcall MmBuildMdlForNonPagedPool(PMDL MemoryDescriptorList);
// PMDL __stdcall IoAllocateMdl(PVOID VirtualAddress, ULONG Length, BOOLEAN SecondaryBuffer, BOOLEAN ChargeQuota, PIRP Irp);
// NTSTATUS __stdcall ZwSetValueKey(HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID Data, ULONG DataSize);
// PIRP __stdcall IoBuildDeviceIoControlRequest(ULONG IoControlCode, PDEVICE_OBJECT DeviceObject, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, BOOLEAN InternalDeviceIoControl, PKEVENT Event, PIO_STATUS_BLOCK IoStatusBlock);
// void __stdcall RtlInitUnicodeString(PUNICODE_STRING DestinationString, PCWSTR SourceString);
// NTSTATUS __stdcall ZwQueryValueKey(HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);
// PVOID __stdcall ExAllocatePoolWithTag(POOL_TYPE PoolType, SIZE_T NumberOfBytes, ULONG Tag);
// void __stdcall ExFreePool(PVOID P);
// LONG __stdcall KeSetEvent(PRKEVENT Event, KPRIORITY Increment, BOOLEAN Wait);
// LONG __stdcall KeResetEvent(PRKEVENT Event);
int __stdcall HidIrStartDevice(int a1);
NTSTATUS __stdcall HidIrQueryDeviceKey(HANDLE KeyHandle, PCWSTR SourceString, int a3, int a4);
NTSTATUS __stdcall HidIrEnumKeyInfo(HANDLE KeyHandle, __int16 a2, int a3);
NTSTATUS __stdcall HidIrEnumValueKeyInfo(HANDLE KeyHandle, __int16 a2, int a3);
int __stdcall HidIrOpenGlobalConfigKey(int, PCUNICODE_STRING SourceString, ACCESS_MASK DesiredAccess); // idb
// NTSTATUS __userpurge HidIrReadRegULong@<eax>(int a1@<ebp>, void *a2, const WCHAR *a3, int a4);
// NTSTATUS __userpurge HidIrReadRegULongOrULongLong@<eax>(int a1@<ebp>, void *a2, const WCHAR *a3, int a4);
int __stdcall HidIrStopDevice(int a1);
void __stdcall HidIrFreeResources(int a1);
int __stdcall HidIrStopCompletion(int a1, int a2);
int __stdcall HidIrCleanupDevice(int a1);
int __stdcall HidIrRemoveDevice(int a1);
size_t __stdcall HidIrReadDecoderCfg(HANDLE KeyHandle, size_t a2, PVOID a3, int a4);
NTSTATUS __stdcall HidIrReadAllDecoderCfg(HANDLE KeyHandle, size_t a2);
int __stdcall HidIrInitDevice(int a1);
int __stdcall HidIrStartCompletion(int a1, int a2);
int __stdcall HidIrPnP(int, PIRP Irp); // idb
int __stdcall HidIrPower(int, PIRP Irp); // idb
int __stdcall WppLoadTracingSupport();
int __stdcall WppTraceCallback(int, int, size_t, void *, int, int); // idb
NTSTATUS __stdcall WppInitKm(PDEVICE_OBJECT DeviceObject, int a2);
void __stdcall WppCleanupKm(PDEVICE_OBJECT DeviceObject);
signed int __stdcall HidIrGetHidDescriptor(int a1, int a2, unsigned __int16 a3);
signed int __stdcall HidIrGetDeviceAttributes(int a1, int a2);
NTSTATUS __stdcall HidIrSystemControl(int a1, PIRP Irp);
int __stdcall HidIrReadDefaultWakeKeysFromRegistry(PCUNICODE_STRING SourceString); // idb
IO_WORKITEM_ROUTINE HidIrWriteWakePatternToRegistryWorker; // idb
IO_WORKITEM_ROUTINE HidIrProgramDeviceWorker; // idb
int __stdcall HidIrReadWakePatternConfigurationFromRegistry(int a1);
int __stdcall DriverEntry(PDRIVER_OBJECT DriverObject, int); // idb
void __cdecl __security_init_cookie();

//-------------------------------------------------------------------------
// Data declarations

// extern volatile KSYSTEM_TIME _KeTickCount;
int WPP_ThisDir_CTLGUID_HIDIRTRACE[4] = { 1771346124, 1228690508, 1081389712, 1731876561 }; // weak
int dword_1612C[4] = { 875904212, 1937916422, 2447199646, 696489066 }; // weak
int dword_1613C[4] = { 1938055667, 2501481831, 494995193, 3939118434 }; // weak
int dword_1614C[4] = { 294620652, 2570270513, 3323826131, 2116042413 }; // weak
int dword_1615C[4] = { 1303604949, 609242979, 4249336453, 1997229631 }; // weak
int dword_1616C[4] = { 839803151, 1152008897, 965224695, 1885598838 }; // weak
int dword_1617C[5] = { 1334635368, 3263162797, 3096577884, 1206440894, 10 }; // weak
int dword_16190[4] = { 2783145412, 2721290714, 90428702, 2228301029 }; // weak
void *WPP_GLOBAL_Control = &WPP_GLOBAL_Control; // weak
int HidIrHidDescriptor[3] = { 16785673, 2228480, 0 }; // weak
LARGE_INTEGER Timeout = { { 4274967296u, 4294967295 } }; // idb
ULONG_PTR __security_cookie = 3141592654u; // idb
ULONG_PTR __security_cookie_complement = 1153374641u; // idb
int (__stdcall *pfnWppQueryTraceInformation)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__fastcall *pfnEtwUnregister)(_DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *pfnEtwRegisterClassicProvider)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *pfnWppGetVersion)(_DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int WPPTraceSuite = 0; // weak
int WPP_MAIN_CB = 0; // weak
int dword_17078 = 0; // weak


//----- (00011006) --------------------------------------------------------
int __stdcall WPP_SF_(int a1, int a2, int a3, int a4)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, 0);
}
// 17044: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (0001102E) --------------------------------------------------------
int __stdcall WPP_SF_dd(int a1, int a2, int a3, int a4, int a5, char a6)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 17044: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00011062) --------------------------------------------------------
int __stdcall WPP_SF_q(int a1, int a2, int a3, int a4, int a5)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 17044: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00011090) --------------------------------------------------------
int __stdcall WPP_SF_x(int a1, int a2, int a3, int a4, int a5, int a6)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 17044: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (000110BE) --------------------------------------------------------
NTSTATUS __stdcall HidIrQueryKeyInfo(HANDLE KeyHandle, int a2)
{
  NTSTATUS result; // eax@1
  PVOID v3; // eax@3
  ULONG ResultLength; // [sp+4h] [bp-4h]@1

  ResultLength = 0;
  result = ZwQueryKey(KeyHandle, KeyFullInformation, 0, 0, &ResultLength);
  if ( result == -1073741789 && ResultLength )
  {
    v3 = ExAllocatePoolWithTag(PagedPool, ResultLength, 0x49646948u);
    *(_DWORD *)a2 = v3;
    if ( v3 )
      result = ZwQueryKey(KeyHandle, KeyFullInformation, v3, ResultLength, &ResultLength);
    else
      result = -1073741670;
  }
  return result;
}

//----- (00011124) --------------------------------------------------------
char __stdcall MergeReportCollection(int a1, int a2)
{
  int v2; // edx@1
  int v3; // ebx@1
  unsigned __int16 v4; // ax@4
  int v5; // eax@8
  int v6; // ecx@8
  int v7; // edx@8
  __int16 v8; // si@14
  unsigned __int16 v9; // di@16
  unsigned __int16 v10; // ax@17
  unsigned __int16 v11; // di@25
  int v12; // ecx@26
  int v13; // edx@26
  int v14; // ecx@26
  unsigned int v15; // esi@26
  unsigned int v16; // esi@28
  unsigned int v17; // esi@30
  unsigned int v18; // ecx@32
  unsigned __int16 v20; // [sp+Ch] [bp-8h]@4
  char v21; // [sp+13h] [bp-1h]@2

  v2 = a2;
  v3 = a1;
  if ( *(_BYTE *)(a1 + 520) != *(_BYTE *)(a2 + 520) || (v21 = 1, *(_WORD *)(a1 + 522) != *(_WORD *)(a2 + 522)) )
    v21 = 0;
  v4 = *(_WORD *)(a1 + 522);
  v20 = 0;
  if ( v4 > 0u )
  {
    while ( 1 )
    {
      if ( !v21 )
        return v21;
      v5 = 52 * v20;
      v6 = v5 + v3;
      v7 = v5 + v2;
      if ( *(_WORD *)(v5 + v3) == *(_WORD *)v7
        && *(_WORD *)(v6 + 2) == *(_WORD *)(v7 + 2)
        && *(_WORD *)(v6 + 20) == *(_WORD *)(v7 + 20)
        && *(_WORD *)(v6 + 22) == *(_WORD *)(v7 + 22)
        && *(_DWORD *)(v6 + 24) == *(_DWORD *)(v7 + 24)
        && *(_WORD *)(v6 + 28) == *(_WORD *)(v7 + 28) )
      {
        v8 = *(_WORD *)(v6 + 36);
        if ( v8 == *(_WORD *)(v7 + 36) )
        {
          v21 = 1;
          if ( v8 != 1 )
            goto LABEL_23;
          v9 = *(_WORD *)(v6 + 48);
          if ( v9 == *(_WORD *)(v7 + 48) )
          {
            v10 = 0;
            if ( v9 <= 0u )
              goto LABEL_23;
            while ( *(_DWORD *)(4 * v10 + 40 + v6) == *(_DWORD *)(4 * v10 + 40 + v7) )
            {
              ++v10;
              if ( v10 >= v9 )
              {
                v3 = a1;
                goto LABEL_23;
              }
            }
            v3 = a1;
          }
        }
      }
      v21 = 0;
LABEL_23:
      v4 = *(_WORD *)(v3 + 522);
      ++v20;
      if ( v20 >= v4 )
        break;
      v2 = a2;
    }
  }
  if ( v21 )
  {
    v11 = 0;
    if ( v4 > 0u )
    {
      do
      {
        v12 = 52 * v11;
        v13 = v12 + v3;
        v14 = a2 + v12;
        v15 = *(_DWORD *)(v14 + 4);
        if ( *(_DWORD *)(v13 + 4) > v15 )
          *(_DWORD *)(v13 + 4) = v15;
        v16 = *(_DWORD *)(v14 + 8);
        if ( *(_DWORD *)(v13 + 8) < v16 )
          *(_DWORD *)(v13 + 8) = v16;
        v17 = *(_DWORD *)(v14 + 12);
        if ( *(_DWORD *)(v13 + 12) > v17 )
          *(_DWORD *)(v13 + 12) = v17;
        v18 = *(_DWORD *)(v14 + 16);
        if ( *(_DWORD *)(v13 + 16) < v18 )
          *(_DWORD *)(v13 + 16) = v18;
        ++v11;
      }
      while ( v11 < *(_WORD *)(v3 + 522) );
    }
  }
  return v21;
}

//----- (00011284) --------------------------------------------------------
void __stdcall UpdateMappingTable(int a1, int *a2, int a3, unsigned int a4)
{
  int v4; // ebx@1
  unsigned int v5; // esi@3
  int *v6; // edi@4
  int v7; // ecx@4
  void *v8; // eax@4
  int v9; // edi@14
  unsigned int v10; // ecx@14
  unsigned __int8 v11; // dl@15
  unsigned int v12; // [sp+4h] [bp-Ch]@14
  unsigned int v13; // [sp+8h] [bp-8h]@4
  unsigned int v14; // [sp+8h] [bp-8h]@12
  int v15; // [sp+Ch] [bp-4h]@13

  v4 = a1;
  if ( a1 && a4 )
  {
    v5 = ((*(_WORD *)(a1 + 86) + 3) & 0xFFFFFFFC) + 4;
    if ( a4 )
    {
      v6 = a2;
      v7 = a3 - (_DWORD)a2;
      v13 = a4;
      v8 = WPP_GLOBAL_Control;
      do
      {
        if ( v8 != &WPP_GLOBAL_Control && *((_BYTE *)v8 + 32) & 0x10 && *((_BYTE *)v8 + 29) >= 5u )
        {
          WPP_SF_dd(*((_DWORD *)v8 + 4), *((_DWORD *)v8 + 5), 13, (int)dword_1612C, *(_BYTE *)v6, *((_BYTE *)v6 + v7));
          v8 = WPP_GLOBAL_Control;
          v7 = a3 - (_DWORD)a2;
        }
        v6 = (int *)((char *)v6 + 1);
        --v13;
      }
      while ( v13 );
    }
    else
    {
      v8 = WPP_GLOBAL_Control;
    }
    v14 = 0;
    if ( *(_WORD *)(a1 + 84) > 0u )
    {
      v15 = 0;
      do
      {
        v9 = v15 + *(_DWORD *)(v4 + 76);
        v10 = 0;
        v12 = 0;
        if ( a4 )
        {
          v11 = *(_BYTE *)(v9 + 4);
          while ( v11 != *((_BYTE *)a2 + v10) )
          {
            ++v10;
            v12 = v10;
            if ( v10 >= a4 )
              goto LABEL_24;
          }
          if ( v8 != &WPP_GLOBAL_Control && *((_BYTE *)v8 + 32) & 0x10 && *((_BYTE *)v8 + 29) >= 5u )
          {
            WPP_SF_dd(*((_DWORD *)v8 + 4), *((_DWORD *)v8 + 5), 14, (int)dword_1612C, v11, *(_BYTE *)(v10 + a3));
            v10 = v12;
          }
          *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + a3);
          v8 = WPP_GLOBAL_Control;
LABEL_24:
          v4 = a1;
        }
        ++v14;
        v15 += v5;
      }
      while ( v14 < *(_WORD *)(v4 + 84) );
    }
  }
}
// 1612C: using guessed type int dword_1612C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (000113A2) --------------------------------------------------------
int __stdcall GetAvailableReportId(int a1)
{
  char v1; // dl@1
  signed __int16 v2; // si@1
  int v3; // eax@3
  int result; // eax@11

  v1 = 1;
  v2 = 1;
  do
  {
    if ( !v1 )
      break;
    v3 = a1;
    v1 = 0;
    while ( 1 )
    {
      v3 = *(_DWORD *)v3;
      if ( !v3 )
        break;
      if ( v3 != 528 && *(_BYTE *)(v3 - 528 + 30) == v2 )
      {
        v1 = 1;
        break;
      }
    }
    ++v2;
  }
  while ( (unsigned __int16)v2 <= 0x32u );
  if ( (unsigned __int16)v2 <= 0x32u )
    result = (unsigned __int16)v2 - 1;
  else
    result = 0;
  return result;
}

//----- (000113F6) --------------------------------------------------------
signed int __stdcall MergeReportDescriptors(int a1, int a2, int a3, signed int a4)
{
  int v4; // ebx@1
  int v5; // edi@1
  int v6; // ecx@6
  void *v7; // esi@7
  int v8; // eax@11
  int v9; // edi@22
  int v10; // ebx@22
  int v11; // eax@38
  int v12; // edi@44
  __int16 v13; // ax@45
  char v14; // cl@45
  int v15; // eax@46
  int i; // esi@47
  int v17; // ebx@50
  signed int v19; // [sp+Ch] [bp-88h]@5
  int v20; // [sp+10h] [bp-84h]@19
  unsigned int v21; // [sp+1Ch] [bp-78h]@1
  int v22; // [sp+20h] [bp-74h]@5
  char v23; // [sp+27h] [bp-6Dh]@6
  char v24[51]; // [sp+28h] [bp-6Ch]@37
  char v25; // [sp+5Bh] [bp-39h]@50
  char v26[52]; // [sp+5Ch] [bp-38h]@37

  v21 = 0;
  v4 = a2;
  v5 = a1;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 15, (int)dword_1612C);
  v22 = 0;
  v19 = HidParse_ParseReportDescriptor(a3, a4, (int)&v22);
  if ( v19 < 0 )
    return v19;
  v6 = v22;
  v23 = 0;
  if ( !v22 )
    goto LABEL_57;
  v7 = WPP_GLOBAL_Control;
  while ( 2 )
  {
    if ( !*(_DWORD *)v4 && v6 )
    {
      v22 = *(_DWORD *)v6;
      v8 = v6 - 528;
      if ( v6 != 528 )
      {
        if ( *(_WORD *)(v8 + 522) && *(_BYTE *)(v8 + 30) == *(_DWORD *)(v5 + 104) )
        {
          *(_BYTE *)(v5 + 99) = *(_BYTE *)(v8 + 30);
        }
        else if ( *(_WORD *)(v8 + 522) )
        {
          if ( *(_WORD *)v8 >= 0xFF00u )
            *(_BYTE *)(v5 + 99) = *(_BYTE *)(v8 + 30);
        }
      }
      *(_DWORD *)v6 = *(_DWORD *)v4;
      *(_DWORD *)v4 = v6;
      goto LABEL_55;
    }
    v20 = *(_DWORD *)v4;
    if ( !*(_DWORD *)v4 )
      goto LABEL_43;
    while ( 1 )
    {
      v9 = v20 - 528;
      v10 = v6 - 528;
      if ( !*(_DWORD *)(a1 + 136) )
        break;
      if ( v7 != &WPP_GLOBAL_Control && *((_BYTE *)v7 + 32) & 0x10 && *((_BYTE *)v7 + 29) >= 4u )
      {
        WPP_SF_(*((_DWORD *)v7 + 4), *((_DWORD *)v7 + 5), 16, (int)dword_1612C);
        v7 = WPP_GLOBAL_Control;
      }
      v23 = 0;
LABEL_34:
      v20 = *(_DWORD *)v20;
      if ( !v20 )
      {
        v4 = a2;
        goto LABEL_44;
      }
      v6 = v22;
    }
    if ( v7 != &WPP_GLOBAL_Control && *((_BYTE *)v7 + 32) & 2 && *((_BYTE *)v7 + 29) >= 4u )
      WPP_SF_(*((_DWORD *)v7 + 4), *((_DWORD *)v7 + 5), 17, (int)dword_1612C);
    v23 = MergeReportCollection(v9, v10);
    if ( !v23 )
    {
      v7 = WPP_GLOBAL_Control;
      goto LABEL_34;
    }
    if ( v21 >= 0x32 )
      return -1073741811;
    v24[v21] = *(_BYTE *)(v10 + 30);
    v26[v21++] = *(_BYTE *)(v9 + 30);
    if ( v22 )
    {
      v11 = v22 - 528;
      v22 = *(_DWORD *)v22;
      if ( *(_BYTE *)(v11 + 30) == *(_DWORD *)(a1 + 104) || *(_WORD *)v11 >= 0xFF00u )
        *(_BYTE *)(a1 + 99) = *(_BYTE *)(v9 + 30);
      ExFreePool((PVOID)v11);
    }
    v4 = a2;
    v7 = WPP_GLOBAL_Control;
LABEL_43:
    if ( v23 )
      goto LABEL_56;
LABEL_44:
    v12 = v22;
    if ( !v22 )
    {
LABEL_57:
      UpdateMappingTable(a1, (int *)v24, (int)v26, v21);
      return v19;
    }
    v22 = *(_DWORD *)v22;
    v13 = GetAvailableReportId(v4);
    v14 = v13;
    if ( !v13 || (v15 = v12 - 528, v12 == 528) )
    {
LABEL_56:
      v6 = v22;
      if ( v22 )
      {
        v5 = a1;
        continue;
      }
      goto LABEL_57;
    }
    break;
  }
  for ( i = v4; *(_DWORD *)i; i = *(_DWORD *)i )
    ;
  if ( v21 < 0x32 )
  {
    v24[v21] = *(_BYTE *)(v15 + 30);
    v17 = (unsigned __int8)v24[v21];
    *(&v25 + v21++ + 1) = v14;
    *(_BYTE *)(v15 + 30) = v14;
    if ( v17 == *(_DWORD *)(a1 + 104) )
    {
      *(_BYTE *)(a1 + 99) = *(&v25 + v21);
    }
    else if ( *(_WORD *)v15 >= 0xFF00u )
    {
      *(_BYTE *)(a1 + 99) = v14;
    }
    v4 = a2;
    *(_DWORD *)v12 = *(_DWORD *)i;
    *(_DWORD *)i = v12;
LABEL_55:
    v7 = WPP_GLOBAL_Control;
    goto LABEL_56;
  }
  return -1073741811;
}
// 1612C: using guessed type int dword_1612C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;
// 113F6: using guessed type char var_6C[51];
// 113F6: using guessed type char var_38[52];

//----- (000116C4) --------------------------------------------------------
NTSTATUS __stdcall HidIrReadBaseReportMappingTables(int a1, int a2, HANDLE KeyHandle)
{
  int v3; // edi@2
  int v4; // esi@2
  int v5; // eax@2
  size_t v6; // eax@2
  unsigned int v7; // ecx@2
  unsigned int v8; // ebx@2
  HANDLE v9; // ecx@8
  int v10; // eax@9
  size_t v11; // ST14_4@12
  PVOID P; // [sp+0h] [bp-Ch]@1
  size_t v14; // [sp+4h] [bp-8h]@2
  NTSTATUS v15; // [sp+8h] [bp-4h]@1
  int v16; // [sp+14h] [bp+8h]@2
  int v17; // [sp+14h] [bp+8h]@9
  int v18; // [sp+18h] [bp+Ch]@10

  v15 = HidIrQueryDeviceKey(KeyHandle, L"ReportMappingTable", (int)&P, (int)&KeyHandle);
  if ( v15 >= 0 )
  {
    v3 = a1;
    v4 = 4 * (unsigned __int16)a2;
    v5 = *(_DWORD *)(v4 + *(_DWORD *)(a1 + 60));
    v16 = v5;
    v6 = *(_WORD *)(v5 + 86);
    v7 = v6 + 4;
    v14 = v6;
    v8 = ((v6 + 3) & 0xFFFFFFFC) + 4;
    if ( (unsigned int)KeyHandle < v6 + 4 || (unsigned int)KeyHandle % v7 )
    {
      v15 = -1073741762;
    }
    else
    {
      *(_WORD *)(v16 + 84) = (unsigned int)KeyHandle / v7;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_dd(
          *((_DWORD *)WPP_GLOBAL_Control + 4),
          *((_DWORD *)WPP_GLOBAL_Control + 5),
          18,
          (int)dword_1612C,
          (unsigned __int16)a2,
          *(_WORD *)(*(_DWORD *)(*(_DWORD *)(v3 + 60) + v4) + 84));
      *(_DWORD *)(*(_DWORD *)(v4 + *(_DWORD *)(v3 + 60)) + 80) = v8
                                                               * *(_WORD *)(*(_DWORD *)(v4 + *(_DWORD *)(v3 + 60)) + 84);
      *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(v3 + 60) + v4) + 76) = ExAllocatePoolWithTag(
                                                                   0,
                                                                   *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(v3 + 60) + v4)
                                                                             + 80),
                                                                   0x49646948u);
      v9 = 0;
      if ( *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(v3 + 60) + v4) + 76) )
      {
        v10 = *(_DWORD *)(v4 + *(_DWORD *)(v3 + 60));
        v17 = 0;
        if ( *(_WORD *)(v10 + 84) > 0u )
        {
          KeyHandle = 0;
          v18 = (int)P;
          while ( 1 )
          {
            v11 = v14;
            *(_DWORD *)((char *)v9 + *(_DWORD *)(v10 + 76)) = *(_DWORD *)v18;
            memcpy(
              (char *)v9 + *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(v3 + 60) + v4) + 76) + 4,
              (const void *)(v18 + 4),
              v11);
            KeyHandle = (char *)KeyHandle + v8;
            v18 += v14 + 4;
            v10 = *(_DWORD *)(v4 + *(_DWORD *)(v3 + 60));
            ++v17;
            if ( v17 >= (unsigned int)*(_WORD *)(v10 + 84) )
              break;
            v9 = KeyHandle;
          }
        }
      }
      else
      {
        v15 = -1073741670;
      }
    }
    ExFreePool(P);
  }
  return v15;
}
// 1612C: using guessed type int dword_1612C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (0001183E) --------------------------------------------------------
char __stdcall IsOverrideAllowed(int a1)
{
  char result; // al@6

  if ( a1 == 13 )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 3u )
      WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 19, (int)dword_1612C);
    result = 0;
  }
  else
  {
    result = 1;
  }
  return result;
}
// 1612C: using guessed type int dword_1612C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00011882) --------------------------------------------------------
int __stdcall HidIrAddAdditionalReportMapping(size_t a1, int a2, SIZE_T NumberOfBytes, int a4)
{
  size_t v4; // edi@1
  int v5; // esi@1
  int v6; // eax@1
  unsigned __int16 v7; // cx@1
  void *v8; // ecx@1
  int v9; // ebx@8
  unsigned __int16 i; // ax@10
  int v11; // edx@11
  const void *v12; // eax@11
  unsigned int v13; // ST24_4@20
  PVOID v14; // eax@31
  int v15; // ecx@37
  int v16; // eax@39
  bool v17; // zf@40
  void *v19; // [sp+Ch] [bp-20h]@1
  void *v20; // [sp+Ch] [bp-20h]@31
  size_t v21; // [sp+10h] [bp-1Ch]@1
  int v22; // [sp+14h] [bp-18h]@1
  const void *v23; // [sp+18h] [bp-14h]@1
  unsigned __int16 v24; // [sp+1Ch] [bp-10h]@1
  unsigned __int16 v25; // [sp+20h] [bp-Ch]@1
  unsigned __int16 v26; // [sp+24h] [bp-8h]@7
  int v27; // [sp+28h] [bp-4h]@1
  size_t v28; // [sp+34h] [bp+8h]@1
  int v29; // [sp+38h] [bp+Ch]@1
  SIZE_T NumberOfBytesa; // [sp+3Ch] [bp+10h]@10
  int NumberOfBytesb; // [sp+3Ch] [bp+10h]@20
  SIZE_T NumberOfBytesc; // [sp+3Ch] [bp+10h]@37

  v27 = 0;
  v4 = a1;
  v5 = 4 * (unsigned __int16)a2;
  v6 = *(_DWORD *)(v5 + *(_DWORD *)(a1 + 60));
  v7 = *(_WORD *)(v6 + 86);
  v23 = *(const void **)(v6 + 76);
  v25 = *(_WORD *)(v6 + 84);
  v19 = *(void **)(v6 + 80);
  v28 = (unsigned __int16)(v7 + 4);
  v21 = v7;
  v24 = ((v7 + 3) & 0xFFFC) + 4;
  LOWORD(v22) = (unsigned __int16)NumberOfBytes / ((unsigned int)v7 + 4);
  v29 = (unsigned __int16)v22;
  v8 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
  {
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 20, (int)dword_1612C);
    v8 = WPP_GLOBAL_Control;
  }
  if ( (unsigned __int16)NumberOfBytes < (unsigned __int16)v28
    || (unsigned __int16)NumberOfBytes % (signed int)(unsigned __int16)v28 )
  {
    if ( v8 == &WPP_GLOBAL_Control || !(*((_BYTE *)v8 + 32) & 0x20) || *((_BYTE *)v8 + 29) < 2u )
      goto LABEL_30;
    WPP_SF_(*((_DWORD *)v8 + 4), *((_DWORD *)v8 + 5), 21, (int)dword_1612C);
    goto LABEL_29;
  }
  v26 = 0;
  if ( (unsigned __int16)v22 > 0u )
  {
    do
    {
      v9 = (unsigned __int16)v28 * v26 + a4;
      if ( IsOverrideAllowed(*(_BYTE *)v9) )
      {
        NumberOfBytesa = 0;
        for ( i = 0; i < v25; i = NumberOfBytesa )
        {
          v11 = v24 * (unsigned __int16)NumberOfBytesa;
          v12 = (char *)v23 + v11;
          if ( (char *)v23 + v11 < v23 || (char *)v12 + 4 > (char *)v19 + (signed int)v23 )
          {
            v8 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
              && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
              && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
            {
              WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 22, (int)dword_1612C);
              goto LABEL_29;
            }
            goto LABEL_30;
          }
          if ( RtlCompareMemory(v12, (const void *)v9, 4u) == 4 )
          {
            memcpy((char *)v23 + v24 * (unsigned __int16)NumberOfBytesa + 4, (const void *)(v9 + 4), v21);
            memset((void *)v9, 255, (unsigned __int16)v28);
            v29 += 0xFFFF;
            break;
          }
          ++NumberOfBytesa;
        }
      }
      else
      {
        v29 += 0xFFFF;
        memset((void *)v9, 255, (unsigned __int16)v28);
      }
      ++v26;
    }
    while ( v26 < (unsigned __int16)v22 );
    if ( (_WORD)v29 )
    {
      v13 = v25 + (unsigned __int16)v29;
      NumberOfBytesb = v13 * v24;
      if ( v13 > 0xFFFFFFFF / v24 )
      {
        v8 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control
          || !(*((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20)
          || *((_BYTE *)WPP_GLOBAL_Control + 29) < 2u )
          goto LABEL_30;
        WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 23, (int)dword_1612C);
LABEL_29:
        v8 = WPP_GLOBAL_Control;
LABEL_30:
        v27 = -1073741762;
        goto LABEL_42;
      }
      v14 = ExAllocatePoolWithTag(0, NumberOfBytesb, 0x49646948u);
      v20 = v14;
      if ( !v14 )
      {
        v8 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
        {
          WPP_SF_q(
            *((_DWORD *)WPP_GLOBAL_Control + 4),
            *((_DWORD *)WPP_GLOBAL_Control + 5),
            24,
            (int)dword_1612C,
            NumberOfBytesb);
          v8 = WPP_GLOBAL_Control;
        }
        v27 = -1073741670;
        goto LABEL_42;
      }
      memset(v14, 0, NumberOfBytesb);
      memcpy(v20, v23, v24 * v25);
      ExFreePool(*(PVOID *)(*(_DWORD *)(v5 + *(_DWORD *)(v4 + 60)) + 76));
      *(_DWORD *)(*(_DWORD *)(v5 + *(_DWORD *)(v4 + 60)) + 76) = v20;
      *(_DWORD *)(*(_DWORD *)(v5 + *(_DWORD *)(v4 + 60)) + 80) = NumberOfBytesb;
      v15 = a4;
      NumberOfBytesc = *(_WORD *)(*(_DWORD *)(v5 + *(_DWORD *)(v4 + 60)) + 84);
      v22 = (unsigned __int16)v22;
      do
      {
        if ( *(_DWORD *)v15 != -1 )
        {
          v16 = (int)((char *)v20 + v24 * (unsigned __int16)NumberOfBytesc);
          *(_DWORD *)v16 = *(_DWORD *)v15;
          memcpy((void *)(v16 + 4), (const void *)(v15 + 4), v21);
          v15 = a4;
          ++NumberOfBytesc;
          ++*(_WORD *)(*(_DWORD *)(v5 + *(_DWORD *)(v4 + 60)) + 84);
        }
        v15 += (unsigned __int16)v28;
        v17 = v22-- == 1;
        a4 = v15;
      }
      while ( !v17 );
    }
    v8 = WPP_GLOBAL_Control;
  }
LABEL_42:
  if ( v8 != &WPP_GLOBAL_Control && *((_BYTE *)v8 + 32) & 0x20 && *((_BYTE *)v8 + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)v8 + 4), *((_DWORD *)v8 + 5), 25, (int)dword_1612C, v27);
  return v27;
}
// 1612C: using guessed type int dword_1612C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00011C18) --------------------------------------------------------
int __stdcall HidIrReadAdditionalReportMappings(size_t a1, int a2, int a3)
{
  int v3; // ebx@1
  void *v4; // eax@6
  NTSTATUS i; // eax@10
  PVOID v6; // esi@12
  OBJECT_ATTRIBUTES ObjectAttributes; // [sp+8h] [bp-28h]@5
  UNICODE_STRING DestinationString; // [sp+20h] [bp-10h]@5
  HANDLE KeyHandle; // [sp+28h] [bp-8h]@1
  PVOID P; // [sp+2Ch] [bp-4h]@1
  int v12; // [sp+40h] [bp+10h]@10

  v3 = 0;
  KeyHandle = 0;
  P = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 26, (int)dword_1612C);
  RtlInitUnicodeString(&DestinationString, L"ExtraReportMappings");
  ObjectAttributes.RootDirectory = (HANDLE)a3;
  ObjectAttributes.ObjectName = &DestinationString;
  ObjectAttributes.Length = 24;
  ObjectAttributes.Attributes = 576;
  ObjectAttributes.SecurityDescriptor = 0;
  ObjectAttributes.SecurityQualityOfService = 0;
  if ( ZwOpenKey(&KeyHandle, 0x20019u, &ObjectAttributes) < 0 )
  {
    v4 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    {
      WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 27, (int)dword_1612C);
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  v12 = 0;
  for ( i = HidIrEnumValueKeyInfo(KeyHandle, 0, (int)&P); ; i = HidIrEnumValueKeyInfo(KeyHandle, v12, (int)&P) )
  {
    v3 = i;
    if ( i == -2147483622 )
    {
      v3 = 0;
      goto LABEL_22;
    }
    if ( i < 0 )
    {
      v4 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control
        || !(*((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20)
        || *((_BYTE *)WPP_GLOBAL_Control + 29) < 2u )
        goto LABEL_23;
      WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 28, (int)dword_1612C, v3);
LABEL_22:
      v4 = WPP_GLOBAL_Control;
LABEL_23:
      v6 = P;
      goto LABEL_24;
    }
    v6 = P;
    if ( *((_DWORD *)P + 1) == 3 && *((_DWORD *)P + 2) < 0xFFFFu )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_q(
          *((_DWORD *)WPP_GLOBAL_Control + 4),
          *((_DWORD *)WPP_GLOBAL_Control + 5),
          29,
          (int)dword_1612C,
          (unsigned __int16)v12);
      v3 = HidIrAddAdditionalReportMapping(a1, a2, *((_WORD *)v6 + 4), (int)((char *)v6 + 12));
      if ( v3 < 0 )
        break;
    }
    ExFreePool(v6);
    P = 0;
    ++v12;
  }
  v4 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
  {
    WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 30, (int)dword_1612C, v3);
    v4 = WPP_GLOBAL_Control;
  }
LABEL_24:
  if ( v6 )
  {
    ExFreePool(v6);
LABEL_26:
    v4 = WPP_GLOBAL_Control;
  }
LABEL_27:
  if ( KeyHandle )
  {
    ZwClose(KeyHandle);
    KeyHandle = 0;
    v4 = WPP_GLOBAL_Control;
  }
  if ( v4 != &WPP_GLOBAL_Control && *((_BYTE *)v4 + 32) & 0x20 && *((_BYTE *)v4 + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)v4 + 4), *((_DWORD *)v4 + 5), 31, (int)dword_1612C, v3);
  return v3;
}
// 1612C: using guessed type int dword_1612C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00011E54) --------------------------------------------------------
int __stdcall HidIrSortDecodersByPriority(int a1)
{
  int result; // eax@1
  int v2; // ecx@1
  int v3; // esi@1
  int v4; // ebx@3
  int v5; // edx@4
  int v6; // ecx@10
  int v7; // edx@10
  int v8; // edi@10
  int v9; // esi@10
  int v10; // [sp+4h] [bp-Ch]@2
  int v11; // [sp+8h] [bp-8h]@2
  int v12; // [sp+Ch] [bp-4h]@3
  int v13; // [sp+18h] [bp+8h]@2

  result = a1;
  v2 = *(_WORD *)(a1 + 58);
  v3 = 0;
  if ( v2 > 0 )
  {
    do
    {
      v11 = v3;
      v10 = v3 + 1;
      v13 = v3 + 1;
      if ( v3 + 1 < v2 )
      {
        v4 = 4 * v3;
        v12 = 4 * v3;
        do
        {
          v5 = *(_DWORD *)(result + 60);
          if ( *(_DWORD *)(v5 + 4 * v13) && *(_DWORD *)(v4 + v5) )
          {
            if ( *(_DWORD *)(*(_DWORD *)(v5 + 4 * v13) + 100) >= *(_DWORD *)(*(_DWORD *)(v4 + v5) + 100) )
            {
              v4 = v12;
            }
            else
            {
              v4 = 4 * v13;
              v11 = v13;
              v12 = 4 * v13;
            }
          }
          ++v13;
        }
        while ( v13 < v2 );
      }
      v6 = *(_DWORD *)(result + 60);
      v7 = v6 + 4 * v11;
      v8 = *(_DWORD *)v7;
      v9 = 4 * v3;
      *(_DWORD *)v7 = *(_DWORD *)(v9 + v6);
      *(_DWORD *)(v9 + *(_DWORD *)(result + 60)) = v8;
      v2 = *(_WORD *)(result + 58);
      v3 = v10;
    }
    while ( v10 < v2 );
  }
  return result;
}

//----- (00011EF0) --------------------------------------------------------
void __usercall sub_11EF0(int a1@<esi>)
{
  int v1; // edi@4
  int v2; // eax@4
  void *v3; // eax@5
  unsigned __int16 i; // [sp+0h] [bp-4h]@3

  if ( a1 && *(_DWORD *)(a1 + 60) )
  {
    for ( i = 0; i < *(_WORD *)(a1 + 58); ++i )
    {
      v1 = 4 * i;
      v2 = v1 + *(_DWORD *)(a1 + 60);
      if ( *(_DWORD *)v2 )
      {
        v3 = *(void **)(*(_DWORD *)v2 + 76);
        if ( v3 )
        {
          ExFreePool(v3);
          *(_DWORD *)(*(_DWORD *)(v1 + *(_DWORD *)(a1 + 60)) + 76) = 0;
        }
        if ( *(_DWORD *)(*(_DWORD *)(v1 + *(_DWORD *)(a1 + 60)) + 112) )
        {
          ExFreePool(*(PVOID *)(*(_DWORD *)(v1 + *(_DWORD *)(a1 + 60)) + 112));
          *(_DWORD *)(*(_DWORD *)(v1 + *(_DWORD *)(a1 + 60)) + 112) = 0;
        }
        if ( *(_DWORD *)(*(_DWORD *)(v1 + *(_DWORD *)(a1 + 60)) + 116) )
        {
          ExFreePool(*(PVOID *)(*(_DWORD *)(v1 + *(_DWORD *)(a1 + 60)) + 116));
          *(_DWORD *)(*(_DWORD *)(v1 + *(_DWORD *)(a1 + 60)) + 116) = 0;
        }
        if ( *(_DWORD *)(*(_DWORD *)(v1 + *(_DWORD *)(a1 + 60)) + 124) )
        {
          ExFreePool(*(PVOID *)(*(_DWORD *)(v1 + *(_DWORD *)(a1 + 60)) + 124));
          *(_DWORD *)(*(_DWORD *)(v1 + *(_DWORD *)(a1 + 60)) + 124) = 0;
        }
        if ( *(_DWORD *)(*(_DWORD *)(v1 + *(_DWORD *)(a1 + 60)) + 128) )
        {
          ExFreePool(*(PVOID *)(*(_DWORD *)(v1 + *(_DWORD *)(a1 + 60)) + 128));
          *(_DWORD *)(*(_DWORD *)(v1 + *(_DWORD *)(a1 + 60)) + 128) = 0;
        }
        *(_WORD *)(*(_DWORD *)(v1 + *(_DWORD *)(a1 + 60)) + 84) = 0;
        ExFreePool(*(PVOID *)(v1 + *(_DWORD *)(a1 + 60)));
        *(_DWORD *)(v1 + *(_DWORD *)(a1 + 60)) = 0;
      }
    }
    ExFreePool(*(PVOID *)(a1 + 60));
    *(_DWORD *)(a1 + 60) = 0;
  }
}

//----- (00011FF8) --------------------------------------------------------
int __stdcall WPP_INIT_CONTROL_ARRAY(int a1)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = WPP_ThisDir_CTLGUID_HIDIRTRACE;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 1;
  *(_BYTE *)(a1 + 29) = 0;
  *(_WORD *)(a1 + 30) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}
// 1611C: using guessed type int WPP_ThisDir_CTLGUID_HIDIRTRACE[4];

//----- (0001202A) --------------------------------------------------------
NTSTATUS __cdecl W2kTraceMessage(int a1, int a2, int a3, int a4, char a5, void *a6)
{
  SIZE_T v6; // edi@1
  void *v7; // esi@1
  unsigned int v8; // ebx@1
  void **v9; // eax@2
  int *v10; // ecx@2
  int v11; // eax@3
  int v12; // edx@3
  PVOID v14; // ecx@9
  int v15; // ebx@9
  const void *v16; // eax@11
  void **v17; // esi@12
  size_t *v18; // esi@14
  size_t v19; // edi@14
  NTSTATUS v20; // esi@17
  __int16 WnodeEventItem; // [sp+Ch] [bp-B4h]@1
  char v22; // [sp+10h] [bp-B0h]@1
  int v23; // [sp+14h] [bp-ACh]@1
  int v24; // [sp+18h] [bp-A8h]@1
  int v25; // [sp+24h] [bp-9Ch]@1
  int v26; // [sp+28h] [bp-98h]@1
  int v27; // [sp+38h] [bp-88h]@1
  char *v28; // [sp+3Ch] [bp-84h]@1
  int v29; // [sp+40h] [bp-80h]@1
  int v30; // [sp+44h] [bp-7Ch]@1
  PVOID v31; // [sp+4Ch] [bp-74h]@11
  int v32; // [sp+50h] [bp-70h]@11
  SIZE_T v33; // [sp+54h] [bp-6Ch]@11
  PVOID P; // [sp+BCh] [bp-4h]@1

  v6 = 0;
  P = 0;
  memset(&WnodeEventItem, 0, 0x30u);
  v7 = a6;
  v23 = a1;
  v24 = a2;
  v25 = a4;
  v8 = 0;
  v26 = 0;
  v27 = 1703936;
  v22 = -1;
  v28 = &a5;
  v29 = 0;
  v30 = 2;
  if ( !a6 )
    goto LABEL_22;
  v9 = &a6;
  v10 = &v30;
  do
  {
    v11 = (int)(v9 + 1);
    v12 = *(_DWORD *)v11;
    v6 += *(_DWORD *)v11;
    ++v8;
    v10 += 4;
    if ( v8 <= 7 )
    {
      *(v10 - 1) = 0;
      *(v10 - 2) = (int)v7;
      *v10 = v12;
    }
    v9 = (void **)(v11 + 4);
    v7 = *v9;
  }
  while ( *v9 );
  if ( v6 > 0x2000 )
    return -1073741823;
  if ( v8 > 7 )
  {
    v14 = ExAllocatePoolWithTag(PagedPool, v6, 0x45435453u);
    v15 = 0;
    P = v14;
    if ( !v14 )
      return -1073741801;
    v16 = a6;
    v31 = v14;
    v32 = 0;
    v33 = v6;
    if ( a6 )
    {
      v17 = &a6;
      while ( 1 )
      {
        v18 = (size_t *)(v17 + 1);
        v19 = *v18;
        memcpy((char *)v14 + v15, v16, *v18);
        v17 = (void **)(v18 + 1);
        v16 = *v17;
        v15 += v19;
        if ( !*v17 )
          break;
        v14 = P;
      }
    }
    WnodeEventItem = 80;
  }
  else
  {
LABEL_22:
    WnodeEventItem = 16 * (v8 + 4);
  }
  v20 = IoWMIWriteEvent(&WnodeEventItem);
  if ( P )
    ExFreePool(P);
  return v20;
}

//----- (0001217A) --------------------------------------------------------
int __stdcall WppClassicProviderCallback(int a1, char a2, int a3, int a4)
{
  int result; // eax@4

  if ( a2 == 1 || !a2 )
  {
    if ( a2 )
    {
      *(_DWORD *)(a4 + 32) = *(_DWORD *)(a3 + 4);
      *(_BYTE *)(a4 + 29) = *(_BYTE *)(a3 + 2);
      *(_DWORD *)(a4 + 16) = *(_DWORD *)a3;
      result = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a4 + 20) = result;
    }
    else
    {
      result = a4;
      *(_BYTE *)(a4 + 29) = 0;
      *(_DWORD *)(a4 + 32) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      *(_DWORD *)(a4 + 20) = 0;
    }
  }
  return result;
}

//----- (000121C8) --------------------------------------------------------
int __stdcall HidIrAddDevice(int a1, int a2)
{
  int v2; // esi@5

  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 16, (int)dword_1614C);
  v2 = *(_DWORD *)(*(_DWORD *)(a2 + 40) + 8);
  *(_DWORD *)(v2 + 4) = 0;
  KeInitializeEvent((PRKEVENT)(v2 + 8), 0, 0);
  KeInitializeEvent((PRKEVENT)(v2 + 256), SynchronizationEvent, 0);
  *(_DWORD *)(v2 + 24) = a2;
  *(_DWORD *)v2 = 0;
  *(_WORD *)(v2 + 56) = 272;
  v2 += 200;
  KeInitializeTimer((PKTIMER)v2);
  KeSetTimer((PKTIMER)v2, (LARGE_INTEGER)-1i64, 0);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 17, (int)dword_1614C, 0);
  return 0;
}
// 1614C: using guessed type int dword_1614C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00012290) --------------------------------------------------------
void __stdcall HidIrUnload(PDEVICE_OBJECT DeviceObject)
{
  void *v1; // eax@1

  v1 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
  {
    if ( *((_BYTE *)WPP_GLOBAL_Control + 32) & 2 && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
    {
      WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 18, (int)dword_1614C);
      v1 = WPP_GLOBAL_Control;
    }
    if ( v1 != &WPP_GLOBAL_Control )
    {
      if ( *((_BYTE *)v1 + 32) & 2 && *((_BYTE *)v1 + 29) >= 4u )
      {
        WPP_SF_q(*((_DWORD *)v1 + 4), *((_DWORD *)v1 + 5), 19, (int)dword_1614C, (int)DeviceObject);
        v1 = WPP_GLOBAL_Control;
      }
      if ( v1 != &WPP_GLOBAL_Control && *((_BYTE *)v1 + 32) & 2 && *((_BYTE *)v1 + 29) >= 5u )
        WPP_SF_(*((_DWORD *)v1 + 4), *((_DWORD *)v1 + 5), 20, (int)dword_1614C);
    }
  }
  WppCleanupKm(DeviceObject);
}
// 1614C: using guessed type int dword_1614C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (0001231A) --------------------------------------------------------
int __stdcall HidIrSynchronousCompletion(int a1, int a2, PRKEVENT Event)
{
  KeSetEvent(Event, 1, 0);
  return -1073741802;
}

//----- (0001233A) --------------------------------------------------------
NTSTATUS __stdcall HidIrCallDriverSynchronous(int a1, PIRP Irp)
{
  const void *v2; // esi@1
  int v3; // eax@1
  NTSTATUS result; // eax@1
  struct _KEVENT Event; // [sp+Ch] [bp-10h]@1

  KeInitializeEvent(&Event, 0, 0);
  v2 = (const void *)*((_DWORD *)Irp + 24);
  qmemcpy((char *)v2 - 36, v2, 0x1Cu);
  *((char *)v2 - 33) = 0;
  v3 = *((_DWORD *)Irp + 24) - 36;
  *(_DWORD *)(v3 + 28) = HidIrSynchronousCompletion;
  *(_DWORD *)(v3 + 32) = &Event;
  *(_BYTE *)(v3 + 3) = -32;
  result = IofCallDriver(*(PDEVICE_OBJECT *)(*(_DWORD *)(a1 + 40) + 4), Irp);
  if ( result == 259 )
  {
    KeWaitForSingleObject(&Event, 0, 0, 0, 0);
    result = *((_DWORD *)Irp + 6);
  }
  return result;
}

//----- (000123B6) --------------------------------------------------------
int __stdcall HidIrIoctl(int a1, PIRP Irp)
{
  void *v2; // eax@1
  unsigned int v3; // ecx@5
  NTSTATUS v4; // eax@15
  int v5; // esi@31
  int var1; // [sp+Bh] [bp-1h]@1

  LOBYTE(var1) = 1;
  v2 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 1
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
  {
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 10, (int)dword_1615C);
    v2 = WPP_GLOBAL_Control;
  }
  v3 = *(_DWORD *)(*((_DWORD *)Irp + 24) + 12);
  if ( v3 <= 0xB001F )
  {
    if ( v3 != 720927 )
    {
      if ( v3 == 720899 )
      {
        if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 32) & 1 && *((_BYTE *)v2 + 29) >= 4u )
          WPP_SF_(*((_DWORD *)v2 + 4), *((_DWORD *)v2 + 5), 11, (int)dword_1615C);
        v4 = HidIrGetHidDescriptor(a1, (int)Irp, 0x21u);
        goto LABEL_31;
      }
      if ( v3 == 720903 )
      {
        if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 32) & 1 && *((_BYTE *)v2 + 29) >= 4u )
          WPP_SF_(*((_DWORD *)v2 + 4), *((_DWORD *)v2 + 5), 12, (int)dword_1615C);
        v4 = HidIrGetHidDescriptor(a1, (int)Irp, 0x22u);
        goto LABEL_31;
      }
      if ( v3 == 720907 )
      {
        if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 32) & 1 && *((_BYTE *)v2 + 29) >= 4u )
          WPP_SF_(*((_DWORD *)v2 + 4), *((_DWORD *)v2 + 5), 14, (int)dword_1615C);
        v4 = HidIrReadReport(a1, Irp, (int)&var1);
        goto LABEL_31;
      }
      if ( v3 == 720911 )
      {
        if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 32) & 1 && *((_BYTE *)v2 + 29) >= 4u )
          WPP_SF_(*((_DWORD *)v2 + 4), *((_DWORD *)v2 + 5), 15, (int)dword_1615C);
        v4 = HidIrWriteReport(a1, (int)Irp);
LABEL_31:
        v5 = v4;
        v2 = WPP_GLOBAL_Control;
        goto LABEL_51;
      }
      goto LABEL_35;
    }
LABEL_50:
    v5 = 0;
    goto LABEL_51;
  }
  if ( v3 == 720931 )
    goto LABEL_50;
  if ( v3 == 720935 )
  {
    if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 32) & 1 && *((_BYTE *)v2 + 29) >= 4u )
      WPP_SF_(*((_DWORD *)v2 + 4), *((_DWORD *)v2 + 5), 16, (int)dword_1615C);
    v4 = HidIrGetDeviceAttributes(a1, (int)Irp);
    goto LABEL_31;
  }
  if ( v3 == 721306 )
  {
    if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 32) & 1 && *((_BYTE *)v2 + 29) >= 4u )
      WPP_SF_(*((_DWORD *)v2 + 4), *((_DWORD *)v2 + 5), 13, (int)dword_1615C);
    v4 = HidIrGetHidDescriptor(a1, (int)Irp, 0x23u);
    goto LABEL_31;
  }
LABEL_35:
  if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 32) & 1 && *((_BYTE *)v2 + 29) >= 4u )
  {
    WPP_SF_q(*((_DWORD *)v2 + 4), *((_DWORD *)v2 + 5), 17, (int)dword_1615C, *(_DWORD *)(*((_DWORD *)Irp + 24) + 12));
    v2 = WPP_GLOBAL_Control;
  }
  v5 = *((_DWORD *)Irp + 6);
LABEL_51:
  if ( (_BYTE)var1 )
  {
    *((_DWORD *)Irp + 6) = v5;
    IofCompleteRequest(Irp, 0);
    v2 = WPP_GLOBAL_Control;
  }
  if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 32) & 1 && *((_BYTE *)v2 + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)v2 + 4), *((_DWORD *)v2 + 5), 18, (int)dword_1615C, v5);
  return v5;
}
// 1615C: using guessed type int dword_1615C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (000125BC) --------------------------------------------------------
int __stdcall WPP_SF_Ddx(int a1, int a2, int a3, int a4, int a5, char a6, char a7, int a8)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 17044: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (000125F6) --------------------------------------------------------
int __stdcall WPP_SF_dDDD(int a1, int a2, int a3, int a4, int a5, char a6, char a7, char a8)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 17044: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00012634) --------------------------------------------------------
int __stdcall WPP_SF_dxq(int a1, int a2, int a3, int a4, int a5, char a6, int a7, char a8)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 17044: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (0001266E) --------------------------------------------------------
int __stdcall WPP_SF_xq(int a1, int a2, int a3, int a4, int a5, int a6, char a7)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 17044: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (000126A2) --------------------------------------------------------
int __stdcall WPP_SF_xqi(int a1, int a2, int a3, int a4, int a5, int a6, char a7, char a8, int a9)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 17044: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (000126DC) --------------------------------------------------------
void *__stdcall HidIrGetSystemAddressForMdlSafe(PMDL MemoryDescriptorList)
{
  void *result; // eax@1

  result = 0;
  if ( MemoryDescriptorList )
  {
    MemoryDescriptorList->MdlFlags |= 0x2000u;
    if ( MemoryDescriptorList->MdlFlags & 5 )
      result = MemoryDescriptorList->lpMappedSystemVa;
    else
      result = MmMapLockedPages(MemoryDescriptorList, 0);
    MemoryDescriptorList->MdlFlags &= 0xDFFFu;
  }
  return result;
}

//----- (0001271E) --------------------------------------------------------
LONG __stdcall HidIrDecrementPendingRequestCount(int a1)
{
  int v1; // edi@1
  LONG result; // eax@1

  v1 = InterlockedDecrement((volatile LONG *)(a1 + 4));
  result = (LONG)WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
    result = WPP_SF_q(
               *((_DWORD *)WPP_GLOBAL_Control + 4),
               *((_DWORD *)WPP_GLOBAL_Control + 5),
               13,
               (int)dword_1616C,
               v1);
  if ( v1 < 0 )
    result = KeSetEvent((PRKEVENT)(a1 + 8), 0, 0);
  return result;
}
// 1616C: using guessed type int dword_1616C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (0001277C) --------------------------------------------------------
int __stdcall HidIrGetDataFromPayload(int a1, int a2)
{
  __int64 v2; // rax@1

  v2 = (*(_QWORD *)(a2 + 8) & *(_QWORD *)(a1 + 32)) >> *(_DWORD *)(a1 + 40);
  if ( *(_BYTE *)(a1 + 44) )
    LODWORD(v2) = ((unsigned __int8)v2 << 8) | ((unsigned int)v2 >> 8);
  return v2;
}

//----- (000127B8) --------------------------------------------------------
int __stdcall HidIrGetUsageEntry(int a1, int a2)
{
  int v2; // ebx@1
  unsigned int v3; // esi@2
  int v4; // eax@2
  unsigned __int16 v5; // cx@2
  int v6; // edi@3
  int result; // eax@5
  int v8; // [sp+14h] [bp+8h]@2

  v2 = a1;
  if ( a1
    && (v3 = ((*(_WORD *)(a1 + 86) + 3) & 0xFFFFFFFC) + 4,
        v4 = HidIrGetDataFromPayload(a1, a2),
        v5 = *(_WORD *)(a1 + 84),
        v8 = 0,
        v5 > 0u) )
  {
    while ( 1 )
    {
      v6 = *(_DWORD *)(v2 + 76) + v3 * (unsigned __int16)v8;
      if ( *(_DWORD *)v6 == v4 )
        break;
      ++v8;
      if ( (unsigned __int16)v8 >= v5 )
        goto LABEL_5;
    }
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
      WPP_SF_xq(
        *((_DWORD *)WPP_GLOBAL_Control + 4),
        *((_DWORD *)WPP_GLOBAL_Control + 5),
        14,
        (int)dword_1616C,
        *(_DWORD *)(a2 + 8),
        *(_DWORD *)(a2 + 12),
        *(_DWORD *)v2);
    result = v6;
  }
  else
  {
LABEL_5:
    result = 0;
  }
  return result;
}
// 1616C: using guessed type int dword_1616C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (0001284C) --------------------------------------------------------
int __stdcall HidIrGetReportLen(int a1, unsigned __int8 a2)
{
  int result; // eax@2

  if ( a2 >= 0x32u )
    result = 0;
  else
    result = *(_WORD *)(a1 + 2 * a2 + 64) + 1;
  return result;
}

//----- (00012872) --------------------------------------------------------
int __stdcall HidIrGetAddressFromPayload(int a1, int a2)
{
  return ((*(_QWORD *)(a2 + 8) & *(_QWORD *)(a1 + 64)) >> *(_DWORD *)(a1 + 72)) + 1;
}

//----- (0001289E) --------------------------------------------------------
int __stdcall HidIrFindDecoder(int a1, int a2)
{
  int v2; // eax@1
  int result; // eax@6
  unsigned __int16 v4; // cx@7
  int v5; // ebx@8
  int v6; // esi@9
  int v7; // eax@15
  unsigned __int16 v8; // dx@15
  int v9; // ecx@16
  unsigned __int16 v10; // [sp+0h] [bp-4h]@7
  int v11; // [sp+Ch] [bp+8h]@7

  v2 = a1;
  if ( *(_BYTE *)(a1 + 164) )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
      WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 15, (int)dword_1616C);
    result = 0;
  }
  else
  {
    v4 = *(_WORD *)(a1 + 58);
    v11 = 0;
    v10 = v4;
    if ( v4 <= 0u )
    {
LABEL_21:
      result = 0;
    }
    else
    {
      v5 = *(_DWORD *)(v2 + 60);
      while ( 1 )
      {
        v6 = *(_DWORD *)(v5 + 4 * (unsigned __int16)v11);
        if ( v6 )
        {
          if ( *(_DWORD *)v6 == *(_DWORD *)a2
            && *(_DWORD *)(v6 + 8) == *(_DWORD *)(a2 + 16)
            && *(_QWORD *)(v6 + 32)
            && (*(_DWORD *)(a2 + 8) & *(_DWORD *)(v6 + 16)) == *(_DWORD *)(v6 + 24)
            && (*(_DWORD *)(a2 + 12) & *(_DWORD *)(v6 + 20)) == *(_DWORD *)(v6 + 28) )
            break;
        }
LABEL_20:
        ++v11;
        if ( (unsigned __int16)v11 >= v10 )
          goto LABEL_21;
      }
      v7 = HidIrGetAddressFromPayload(v6, a2);
      v8 = 0;
      while ( 1 )
      {
        v9 = *(_DWORD *)(v6 + 4 * v8 + 48);
        if ( !v9 || v9 == v7 && v7 != -1 )
          break;
        ++v8;
        if ( v8 >= 4u )
          goto LABEL_20;
      }
      result = v6;
    }
  }
  return result;
}
// 1616C: using guessed type int dword_1616C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00012976) --------------------------------------------------------
bool __stdcall IsToggleBitValid(int a1, int a2, int a3)
{
  return !*(_BYTE *)(a1 + 97) || a2 != *(_DWORD *)(a1 + 88) || a3 != *(_DWORD *)(a1 + 92);
}

//----- (000129A4) --------------------------------------------------------
BOOL __stdcall DoesUsageTableEntryGenerateReport(int a1)
{
  return a1 && (*(_BYTE *)(a1 + 4) || *(_BYTE *)(a1 + 5) || *(_BYTE *)(a1 + 6));
}

//----- (000129D2) --------------------------------------------------------
int __stdcall GetHammingCheckSum(int a1, __int64 a2)
{
  int v2; // ecx@2
  int v3; // edi@2
  char v4; // bl@2
  signed __int64 v5; // rax@3
  int v7; // [sp+4h] [bp-10Ch]@2
  int v8; // [sp+8h] [bp-108h]@1
  int v9; // [sp+Ch] [bp-104h]@1
  int v10; // [sp+10h] [bp-100h]@1
  int v11; // [sp+14h] [bp-FCh]@1
  int v12; // [sp+18h] [bp-F8h]@1
  int v13; // [sp+1Ch] [bp-F4h]@1
  int v14; // [sp+20h] [bp-F0h]@1
  int v15; // [sp+24h] [bp-ECh]@1
  int v16; // [sp+28h] [bp-E8h]@1
  int v17; // [sp+2Ch] [bp-E4h]@1
  int v18; // [sp+30h] [bp-E0h]@1
  int v19; // [sp+34h] [bp-DCh]@1
  int v20; // [sp+38h] [bp-D8h]@1
  int v21; // [sp+3Ch] [bp-D4h]@1
  int v22; // [sp+40h] [bp-D0h]@1
  int v23; // [sp+44h] [bp-CCh]@1
  int v24; // [sp+48h] [bp-C8h]@1
  int v25; // [sp+4Ch] [bp-C4h]@1
  int v26; // [sp+50h] [bp-C0h]@1
  int v27; // [sp+54h] [bp-BCh]@1
  int v28; // [sp+58h] [bp-B8h]@1
  int v29; // [sp+5Ch] [bp-B4h]@1
  int v30; // [sp+60h] [bp-B0h]@1
  int v31; // [sp+64h] [bp-ACh]@1
  int v32; // [sp+68h] [bp-A8h]@1
  int v33; // [sp+6Ch] [bp-A4h]@1
  int v34; // [sp+70h] [bp-A0h]@1
  int v35; // [sp+74h] [bp-9Ch]@1
  int v36; // [sp+78h] [bp-98h]@1
  int v37; // [sp+7Ch] [bp-94h]@1
  int v38; // [sp+80h] [bp-90h]@1
  int v39; // [sp+84h] [bp-8Ch]@1
  int v40; // [sp+88h] [bp-88h]@1
  int v41; // [sp+8Ch] [bp-84h]@1
  int v42; // [sp+90h] [bp-80h]@1
  int v43; // [sp+94h] [bp-7Ch]@1
  int v44; // [sp+98h] [bp-78h]@1
  int v45; // [sp+9Ch] [bp-74h]@1
  int v46; // [sp+A0h] [bp-70h]@1
  int v47; // [sp+A4h] [bp-6Ch]@1
  int v48; // [sp+A8h] [bp-68h]@1
  int v49; // [sp+ACh] [bp-64h]@1
  int v50; // [sp+B0h] [bp-60h]@1
  int v51; // [sp+B4h] [bp-5Ch]@1
  int v52; // [sp+B8h] [bp-58h]@1
  int v53; // [sp+BCh] [bp-54h]@1
  int v54; // [sp+C0h] [bp-50h]@1
  int v55; // [sp+C4h] [bp-4Ch]@1
  int v56; // [sp+C8h] [bp-48h]@1
  int v57; // [sp+CCh] [bp-44h]@1
  int v58; // [sp+D0h] [bp-40h]@1
  int v59; // [sp+D4h] [bp-3Ch]@1
  int v60; // [sp+D8h] [bp-38h]@1
  int v61; // [sp+DCh] [bp-34h]@1
  int v62; // [sp+E0h] [bp-30h]@1
  int v63; // [sp+E4h] [bp-2Ch]@1
  int v64; // [sp+E8h] [bp-28h]@1
  int v65; // [sp+ECh] [bp-24h]@1
  int v66; // [sp+F0h] [bp-20h]@1
  int v67; // [sp+F4h] [bp-1Ch]@1
  int v68; // [sp+F8h] [bp-18h]@1
  int v69; // [sp+FCh] [bp-14h]@1
  int v70; // [sp+100h] [bp-10h]@1
  int v71; // [sp+104h] [bp-Ch]@1
  int v72; // [sp+108h] [bp-8h]@2
  int v73; // [sp+10Ch] [bp-4h]@1
  int v74; // [sp+118h] [bp+8h]@2

  v33 = 31;
  v34 = 31;
  v35 = 31;
  v36 = 31;
  v37 = 31;
  v38 = 31;
  v39 = 31;
  v8 = 3;
  v9 = 5;
  v10 = 6;
  v11 = 7;
  v12 = 9;
  v13 = 10;
  v14 = 11;
  v15 = 12;
  v16 = 13;
  v17 = 14;
  v18 = 15;
  v19 = 17;
  v20 = 18;
  v21 = 19;
  v22 = 20;
  v23 = 21;
  v24 = 22;
  v25 = 23;
  v26 = 24;
  v27 = 25;
  v28 = 26;
  v29 = 27;
  v30 = 28;
  v31 = 29;
  v32 = 30;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v73 = 0;
  if ( *(_DWORD *)(a1 + 120) )
  {
    v2 = *(_DWORD *)(a1 + 112);
    v3 = *(_DWORD *)v2;
    v7 = *(_DWORD *)(v2 + 4);
    v74 = 0;
    v4 = 0;
    v72 = 64;
    do
    {
      v5 = 1i64 << v4;
      if ( v7 & HIDWORD(v5) | v3 & (unsigned int)v5 )
      {
        if ( a2 & v5 )
          v73 ^= *(&v8 + (unsigned __int16)v74);
        ++v74;
      }
      ++v4;
      --v72;
    }
    while ( v72 );
  }
  return v73;
}

//----- (00012BE0) --------------------------------------------------------
int __stdcall GetPacketCheckSum(int a1, unsigned __int64 a2)
{
  unsigned __int64 v2; // rax@1

  LODWORD(v2) = 0;
  if ( *(_DWORD *)(a1 + 132) )
    v2 = (a2 & *(_QWORD *)*(_DWORD *)(a1 + 124)) >> **(_BYTE **)(a1 + 128);
  return v2;
}

//----- (00012C1A) --------------------------------------------------------
int __stdcall GetRedundantPacketCheckSum(int a1, __int64 a2)
{
  unsigned __int64 v2; // rax@1

  LODWORD(v2) = 0;
  if ( *(_DWORD *)(a1 + 132) > 1u )
    v2 = (*(_QWORD *)(*(_DWORD *)(a1 + 124) + 8) & (unsigned __int64)~a2) >> *(_BYTE *)(*(_DWORD *)(a1 + 128) + 1);
  return v2;
}

//----- (00012C5A) --------------------------------------------------------
bool __stdcall IsCheckSumValid(int a1, unsigned __int64 a2)
{
  int v2; // esi@1
  int v3; // eax@1
  int v4; // edi@1
  int v5; // ebx@4
  int v6; // eax@4
  int v7; // esi@4
  void *v8; // eax@4
  int v9; // esi@19
  int v10; // eax@39
  unsigned int v11; // ebx@39
  int v12; // edi@40
  int v13; // esi@40
  int v14; // ecx@40
  int v16; // [sp+Ch] [bp-Ch]@39
  int v17; // [sp+10h] [bp-8h]@19
  int v18; // [sp+10h] [bp-8h]@39
  bool v19; // [sp+17h] [bp-1h]@1
  int v20; // [sp+20h] [bp+8h]@19
  int v21; // [sp+20h] [bp+8h]@39

  v2 = a1;
  v3 = *(_DWORD *)(a1 + 108);
  v19 = 1;
  v4 = (int)dword_1616C;
  if ( v3 != 1 || *(_DWORD *)(a1 + 132) <= 0u || *(_DWORD *)(a1 + 120) <= 0u )
  {
    if ( v3 != 2 || *(_DWORD *)(a1 + 132) <= 1u || *(_DWORD *)(a1 + 120) <= 0u )
    {
      if ( v3 != 3 )
      {
        v8 = WPP_GLOBAL_Control;
        goto LABEL_63;
      }
      v10 = GetPacketCheckSum(a1, a2);
      v21 = 0;
      v18 = 0;
      v11 = *(_DWORD *)(v2 + 120);
      v16 = v10;
      if ( v11 )
      {
        v12 = *(_DWORD *)(v2 + 112);
        v13 = *(_DWORD *)(v2 + 116);
        v14 = 0;
        do
        {
          v21 ^= (a2 & *(_QWORD *)(v12 + 8 * v14)) >> *(_BYTE *)(v13 + v14);
          ++v18;
          v14 = (unsigned __int16)v18;
        }
        while ( (unsigned __int16)v18 < v11 );
        v4 = (int)dword_1616C;
      }
      v19 = v21 == v10;
      v8 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
      {
        if ( *((_BYTE *)WPP_GLOBAL_Control + 32) & 8 && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        {
          WPP_SF_x(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 23, v4, a2, SHIDWORD(a2));
          v8 = WPP_GLOBAL_Control;
        }
        if ( v8 != &WPP_GLOBAL_Control )
        {
          if ( *((_BYTE *)v8 + 32) & 8 && *((_BYTE *)v8 + 29) >= 4u )
          {
            WPP_SF_q(*((_DWORD *)v8 + 4), *((_DWORD *)v8 + 5), 24, v4, v21);
            v8 = WPP_GLOBAL_Control;
          }
          if ( v8 != &WPP_GLOBAL_Control && *((_BYTE *)v8 + 32) & 8 && *((_BYTE *)v8 + 29) >= 4u )
          {
            WPP_SF_q(*((_DWORD *)v8 + 4), *((_DWORD *)v8 + 5), 25, v4, v16);
            goto LABEL_55;
          }
        }
      }
    }
    else
    {
      v20 = GetHammingCheckSum(a1, a2);
      v17 = GetPacketCheckSum(v2, a2);
      v9 = GetRedundantPacketCheckSum(v2, a2);
      if ( v20 != v17 || (v19 = 1, v20 != v9) )
        v19 = 0;
      v8 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
      {
        if ( *((_BYTE *)WPP_GLOBAL_Control + 32) & 8 && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        {
          WPP_SF_x(
            *((_DWORD *)WPP_GLOBAL_Control + 4),
            *((_DWORD *)WPP_GLOBAL_Control + 5),
            19,
            (int)dword_1616C,
            a2,
            SHIDWORD(a2));
          v8 = WPP_GLOBAL_Control;
        }
        if ( v8 != &WPP_GLOBAL_Control )
        {
          if ( *((_BYTE *)v8 + 32) & 8 && *((_BYTE *)v8 + 29) >= 4u )
          {
            WPP_SF_q(*((_DWORD *)v8 + 4), *((_DWORD *)v8 + 5), 20, (int)dword_1616C, v20);
            v8 = WPP_GLOBAL_Control;
          }
          if ( v8 != &WPP_GLOBAL_Control )
          {
            if ( *((_BYTE *)v8 + 32) & 8 && *((_BYTE *)v8 + 29) >= 4u )
            {
              WPP_SF_q(*((_DWORD *)v8 + 4), *((_DWORD *)v8 + 5), 21, (int)dword_1616C, v17);
              v8 = WPP_GLOBAL_Control;
            }
            if ( v8 != &WPP_GLOBAL_Control && *((_BYTE *)v8 + 32) & 8 && *((_BYTE *)v8 + 29) >= 4u )
            {
              WPP_SF_q(*((_DWORD *)v8 + 4), *((_DWORD *)v8 + 5), 22, (int)dword_1616C, v9);
              goto LABEL_55;
            }
          }
        }
      }
    }
  }
  else
  {
    v5 = GetHammingCheckSum(a1, a2);
    v6 = GetPacketCheckSum(a1, a2);
    v7 = v6;
    v19 = v5 == v6;
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
    {
      if ( *((_BYTE *)WPP_GLOBAL_Control + 32) & 8 && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
      {
        WPP_SF_x(
          *((_DWORD *)WPP_GLOBAL_Control + 4),
          *((_DWORD *)WPP_GLOBAL_Control + 5),
          16,
          (int)dword_1616C,
          a2,
          SHIDWORD(a2));
        v8 = WPP_GLOBAL_Control;
      }
      if ( v8 != &WPP_GLOBAL_Control )
      {
        if ( *((_BYTE *)v8 + 32) & 8 && *((_BYTE *)v8 + 29) >= 4u )
        {
          WPP_SF_q(*((_DWORD *)v8 + 4), *((_DWORD *)v8 + 5), 17, (int)dword_1616C, v5);
          v8 = WPP_GLOBAL_Control;
        }
        if ( v8 != &WPP_GLOBAL_Control && *((_BYTE *)v8 + 32) & 8 && *((_BYTE *)v8 + 29) >= 4u )
        {
          WPP_SF_q(*((_DWORD *)v8 + 4), *((_DWORD *)v8 + 5), 18, (int)dword_1616C, v7);
LABEL_55:
          v8 = WPP_GLOBAL_Control;
          goto LABEL_56;
        }
      }
    }
  }
LABEL_56:
  if ( !v19 )
  {
    if ( v8 != &WPP_GLOBAL_Control && *((_BYTE *)v8 + 32) & 8 && *((_BYTE *)v8 + 29) >= 4u )
      WPP_SF_(*((_DWORD *)v8 + 4), *((_DWORD *)v8 + 5), 27, v4);
    return v19;
  }
LABEL_63:
  if ( v8 != &WPP_GLOBAL_Control && *((_BYTE *)v8 + 32) & 8 && *((_BYTE *)v8 + 29) >= 4u )
    WPP_SF_(*((_DWORD *)v8 + 4), *((_DWORD *)v8 + 5), 26, v4);
  return v19;
}
// 1616C: using guessed type int dword_1616C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00012F86) --------------------------------------------------------
signed __int64 __stdcall HidIrGetElapsedTimems(unsigned int a1, int a2, int a3)
{
  LONG v3; // ecx@3
  signed __int64 result; // rax@4

  while ( 1 )
  {
    v3 = _KeTickCount.High1Time;
    if ( v3 == _KeTickCount.High2Time )
      break;
    _mm_pause();
  }
  result = (__PAIR__(v3, _KeTickCount.LowPart) - *(_QWORD *)a2) * a1 / 10000;
  *(_QWORD *)a3 = result;
  return result;
}

//----- (00012FD6) --------------------------------------------------------
char __stdcall ReportIsAllKeysUpReport(int a1, int a2, int a3)
{
  char v3; // bl@1
  ULONG v4; // eax@7

  v3 = 0;
  if ( !*(_DWORD *)(a3 + 16) )
  {
    v3 = 1;
    if ( *(_DWORD *)(a2 + 12) == a1 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x40
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 28, (int)dword_1616C, a1);
      *(_BYTE *)(a2 + 32) = 1;
      v4 = _KeTickCount.LowPart;
      while ( 1 )
      {
        *(_DWORD *)(a2 + 28) = *(_DWORD *)(v4 + 4);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)v4;
        if ( *(_DWORD *)(a2 + 28) == *(_DWORD *)(v4 + 8) )
          break;
        _mm_pause();
      }
    }
  }
  return v3;
}
// 1616C: using guessed type int dword_1616C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (0001304C) --------------------------------------------------------
char __stdcall ReportComesFromActiveInputDevice(int a1, int a2, int a3)
{
  bool v3; // zf@1
  int v4; // eax@2
  int v5; // eax@5
  void *v6; // eax@6
  __int64 v8; // [sp+4h] [bp-Ch]@17
  char v9; // [sp+Fh] [bp-1h]@1

  v3 = *(_DWORD *)(a3 + 16) == 0;
  v9 = 0;
  if ( v3 )
    return v9;
  v4 = *(_DWORD *)(a2 + 16);
  if ( v4 )
  {
    if ( v4 != a1 )
      return 0;
  }
  else
  {
    v5 = *(_DWORD *)(a2 + 12);
    if ( v5 == a1 )
    {
      v6 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control
        || !(*((_BYTE *)WPP_GLOBAL_Control + 32) & 0x40)
        || *((_BYTE *)WPP_GLOBAL_Control + 29) < 4u )
        goto LABEL_23;
      WPP_SF_xq(
        *((_DWORD *)WPP_GLOBAL_Control + 4),
        *((_DWORD *)WPP_GLOBAL_Control + 5),
        29,
        (int)dword_1616C,
        *(_DWORD *)(a3 + 8),
        *(_DWORD *)(a3 + 12),
        a1);
    }
    else if ( v5 )
    {
      if ( !*(_BYTE *)(a2 + 32) )
        return v9;
      HidIrGetElapsedTimems(*(_DWORD *)(a2 + 36), a2 + 24, (int)&v8);
      if ( v8 <= 500 )
        return v9;
      v6 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control
        || !(*((_BYTE *)WPP_GLOBAL_Control + 32) & 0x40)
        || *((_BYTE *)WPP_GLOBAL_Control + 29) < 4u )
        goto LABEL_23;
      WPP_SF_xqi(
        *((_DWORD *)WPP_GLOBAL_Control + 4),
        *((_DWORD *)WPP_GLOBAL_Control + 5),
        31,
        (int)dword_1616C,
        *(_DWORD *)(a3 + 8),
        *(_DWORD *)(a3 + 12),
        a1,
        v8,
        SHIDWORD(v8));
    }
    else
    {
      v6 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control
        || !(*((_BYTE *)WPP_GLOBAL_Control + 32) & 0x40)
        || *((_BYTE *)WPP_GLOBAL_Control + 29) < 4u )
        goto LABEL_23;
      WPP_SF_xq(
        *((_DWORD *)WPP_GLOBAL_Control + 4),
        *((_DWORD *)WPP_GLOBAL_Control + 5),
        30,
        (int)dword_1616C,
        *(_DWORD *)(a3 + 8),
        *(_DWORD *)(a3 + 12),
        a1);
    }
  }
  v6 = WPP_GLOBAL_Control;
LABEL_23:
  v9 = 1;
  if ( v6 != &WPP_GLOBAL_Control && *((_BYTE *)v6 + 32) & 0x40 && *((_BYTE *)v6 + 29) >= 4u )
    WPP_SF_xq(
      *((_DWORD *)v6 + 4),
      *((_DWORD *)v6 + 5),
      32,
      (int)dword_1616C,
      *(_DWORD *)(a3 + 8),
      *(_DWORD *)(a3 + 12),
      a1);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a2 + 12) = a1;
  *(_BYTE *)(a2 + 32) = 0;
  return v9;
}
// 1616C: using guessed type int dword_1616C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (000131B8) --------------------------------------------------------
unsigned __int8 __stdcall ShouldSendInputBasedOnActiveInputDevice(int a1, int a2, int a3)
{
  char v3; // bl@5
  unsigned __int8 v4; // bl@5
  KIRQL NewIrql; // [sp+13h] [bp-1h]@1

  NewIrql = KfAcquireSpinLock((PKSPIN_LOCK)(a2 + 8));
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x40
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_xq(
      *((_DWORD *)WPP_GLOBAL_Control + 4),
      *((_DWORD *)WPP_GLOBAL_Control + 5),
      33,
      (int)dword_1616C,
      *(_DWORD *)(a3 + 8),
      *(_DWORD *)(a3 + 12),
      a1);
  v3 = ReportComesFromActiveInputDevice(a1, a2, a3);
  v4 = ReportIsAllKeysUpReport(a1, a2, a3) | v3;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x40
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_dxq(
      *((_DWORD *)WPP_GLOBAL_Control + 4),
      *((_DWORD *)WPP_GLOBAL_Control + 5),
      34,
      (int)dword_1616C,
      v4,
      *(_DWORD *)(a3 + 8),
      *(_DWORD *)(a3 + 12),
      a1);
  KfReleaseSpinLock((PKSPIN_LOCK)(a2 + 8), NewIrql);
  return v4;
}
// 1616C: using guessed type int dword_1616C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00013274) --------------------------------------------------------
int __stdcall HidIrCallAtPassiveIrql(PDEVICE_OBJECT DeviceObject, PIO_WORKITEM_ROUTINE WorkerRoutine, int a3)
{
  PVOID v3; // esi@1
  struct _IO_WORKITEM *v4; // eax@3
  signed int v5; // edi@4

  v3 = ExAllocatePoolWithTag(0, 8u, 0x49646948u);
  *(_DWORD *)v3 = 0;
  *((_DWORD *)v3 + 1) = 0;
  *((_DWORD *)v3 + 1) = a3;
  if ( KeGetCurrentIrql() )
  {
    v4 = IoAllocateWorkItem(DeviceObject);
    *(_DWORD *)v3 = v4;
    if ( !v4 )
    {
      v5 = -1073741670;
      goto LABEL_7;
    }
    IoQueueWorkItem(v4, WorkerRoutine, DelayedWorkQueue, v3);
  }
  else
  {
    ((void (__stdcall *)(_DWORD, _DWORD))WorkerRoutine)(DeviceObject, v3);
  }
  v3 = 0;
  v5 = 0;
LABEL_7:
  if ( v3 )
  {
    if ( *(_DWORD *)v3 )
    {
      IoFreeWorkItem(*(PIO_WORKITEM *)v3);
      *(_DWORD *)v3 = 0;
    }
    ExFreePool(v3);
  }
  return v5;
}

//----- (000132FA) --------------------------------------------------------
int __stdcall HidIrReadCompletion(int a1, PIRP Irp, int a3)
{
  int v3; // ecx@1
  int v4; // esi@1
  int v5; // edi@1
  struct _DRIVER_OBJECT *v6; // ST18_4@1
  int v7; // ebx@1
  int v8; // eax@8
  int v9; // eax@9
  void *v10; // eax@14
  int v11; // edi@20
  int v12; // ecx@20
  int v13; // ecx@21
  unsigned __int16 v14; // ax@27
  int v15; // esi@27
  void *v16; // ST14_4@27
  unsigned int v17; // ecx@28
  void **v18; // edi@34
  int v19; // ebx@37
  int v20; // eax@38
  int v21; // esi@38
  int v22; // eax@41
  int v23; // edi@41
  unsigned __int8 *v24; // edi@48
  unsigned __int16 v25; // ax@48
  void *v26; // ST14_4@48
  void *v27; // edi@55
  int v28; // eax@55
  unsigned __int8 v29; // cl@55
  size_t v30; // eax@59
  signed int v31; // ecx@59
  unsigned int v32; // edx@60
  PIRP v33; // edx@63
  int v34; // eax@63
  void *v36; // eax@77
  NTSTATUS v37; // eax@88
  int v38; // [sp+Ch] [bp-28h]@9
  unsigned __int64 v39; // [sp+14h] [bp-20h]@9
  int v40; // [sp+1Ch] [bp-18h]@9
  size_t v41; // [sp+24h] [bp-10h]@55
  PVOID P; // [sp+28h] [bp-Ch]@5
  unsigned int v43; // [sp+2Ch] [bp-8h]@1
  char v44; // [sp+32h] [bp-2h]@1
  char v45; // [sp+33h] [bp-1h]@1

  v3 = *(_DWORD *)(a1 + 40);
  v4 = (int)Irp;
  v5 = *((_DWORD *)Irp + 6);
  v6 = *(struct _DRIVER_OBJECT **)(a1 + 8);
  v44 = 0;
  v7 = *(_DWORD *)(v3 + 8);
  v45 = 1;
  v43 = (unsigned int)IoGetDriverObjectExtension(v6, (PVOID)0x68694465);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
    WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 35, (int)dword_1616C, v5);
  P = HidIrGetSystemAddressForMdlSafe(*(PMDL *)(v4 + 4));
  if ( !P )
  {
    *(_DWORD *)(v4 + 24) = -1073741670;
    goto LABEL_30;
  }
  if ( v5 >= 0 )
  {
    v8 = *(_DWORD *)(v4 + 28);
    *(_DWORD *)(v4 + 28) = 0;
    if ( v8 == 12 )
    {
      memset(&v38, 0, 0x18u);
      v38 = *(_DWORD *)P;
      v9 = *((_DWORD *)P + 2);
      v39 = *((_DWORD *)P + 1);
      v40 = v9;
    }
    else
    {
      if ( v8 != 24 )
      {
        *(_DWORD *)(v4 + 24) = -1073741823;
        goto LABEL_30;
      }
      qmemcpy(&v38, P, 0x18u);
      v4 = (int)Irp;
    }
    if ( !ShouldSendInputBasedOnActiveInputDevice(a1, v43, (int)&v38) )
    {
      v45 = 0;
      goto LABEL_30;
    }
    qmemcpy((void *)(v7 + 168), &v38, 0x18u);
    v10 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    {
      WPP_SF_Ddx(
        *((_DWORD *)WPP_GLOBAL_Control + 4),
        *((_DWORD *)WPP_GLOBAL_Control + 5),
        36,
        (int)dword_1616C,
        v38,
        v40,
        v39,
        SHIDWORD(v39));
      v10 = WPP_GLOBAL_Control;
    }
    v45 = 0;
    if ( !v40 )
    {
      v43 = 0;
      if ( *(_WORD *)(v7 + 58) > 0u )
      {
        do
        {
          v11 = 4 * v43;
          v12 = 4 * v43 + *(_DWORD *)(v7 + 60);
          if ( *(_DWORD *)v12 )
          {
            v13 = *(_DWORD *)v12;
            if ( *(_DWORD *)v13 == v38 )
            {
              if ( *(_BYTE *)(v13 + 96) )
              {
                if ( v10 != &WPP_GLOBAL_Control && *((_BYTE *)v10 + 32) & 4 && *((_BYTE *)v10 + 29) >= 4u )
                  WPP_SF_(*((_DWORD *)v10 + 4), *((_DWORD *)v10 + 5), 37, (int)dword_1616C);
                v14 = HidIrGetReportLen(v7, *(_BYTE *)(*(_DWORD *)(v11 + *(_DWORD *)(v7 + 60)) + 96));
                v15 = *((_DWORD *)Irp + 15);
                v16 = (void *)*((_DWORD *)Irp + 15);
                *((_DWORD *)Irp + 7) = v14;
                memset(v16, 0, v14);
                *(_BYTE *)v15 = *(_BYTE *)(*(_DWORD *)(v11 + *(_DWORD *)(v7 + 60)) + 96);
                *(_BYTE *)(*(_DWORD *)(v11 + *(_DWORD *)(v7 + 60)) + 96) = 0;
                v10 = WPP_GLOBAL_Control;
                v45 = 1;
              }
            }
          }
          v17 = *(_WORD *)(v7 + 58);
          ++v43;
        }
        while ( v43 < v17 );
      }
      goto LABEL_29;
    }
    v20 = HidIrFindDecoder(v7, (int)&v38);
    v21 = v20;
    if ( v20 && IsToggleBitValid(v20, v39, SHIDWORD(v39)) && IsCheckSumValid(v21, v39) )
    {
      v22 = HidIrGetUsageEntry(v21, (int)&v38);
      v23 = v22;
      if ( !v22 )
      {
        if ( !*(_BYTE *)(v21 + 98) || !*(_BYTE *)(v21 + 99) )
        {
          v33 = Irp;
          v34 = *((_DWORD *)Irp + 15);
          *(_BYTE *)v34 = *(_BYTE *)(v7 + 192);
          qmemcpy((void *)(v34 + 1), (const void *)(v7 + 168), 0x18u);
          *((_DWORD *)v33 + 7) = 25;
          v45 = 1;
          *(_BYTE *)(v7 + 167) = 0;
          v4 = (int)v33;
          goto LABEL_30;
        }
        v27 = (void *)*((_DWORD *)Irp + 15);
        v41 = (unsigned __int16)HidIrGetReportLen(v7, *(_BYTE *)(v21 + 99));
        memset(v27, 0, v41);
        v28 = HidIrGetDataFromPayload(v21, (int)&v38);
        v29 = *(_BYTE *)(v21 + 99);
        v43 = v28;
        *(_BYTE *)v27 = v29;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
          WPP_SF_dd(
            *((_DWORD *)WPP_GLOBAL_Control + 4),
            *((_DWORD *)WPP_GLOBAL_Control + 5),
            39,
            (int)dword_1616C,
            v29,
            v43);
        v30 = v41;
        v31 = 1;
        if ( v41 >= 1 )
        {
          v32 = v43;
          do
          {
            *((_BYTE *)v27 + v31) = v32;
            v32 >>= 8;
            ++v31;
          }
          while ( v31 <= v30 );
        }
        *((_DWORD *)Irp + 7) = v30;
        *(_QWORD *)(v21 + 88) = v39;
        *(_BYTE *)(v21 + 96) = *(_BYTE *)v27;
        v45 = 1;
        *(_BYTE *)(v7 + 167) = 1;
        goto LABEL_52;
      }
      if ( (unsigned __int8)DoesUsageTableEntryGenerateReport(v22)
        && (!IsSleepButton(v7, v23) || KeReadStateTimer((PKTIMER)(v7 + 200))) )
      {
        if ( IsSleepOrWakeButton(v7, v23) )
          InferWakePatternBasedOnButtonCode(v7, v21, (int)&v38, (int)&v44);
        v24 = (unsigned __int8 *)(v23 + 4);
        v25 = HidIrGetReportLen(v7, *v24);
        v26 = (void *)*((_DWORD *)Irp + 15);
        *((_DWORD *)Irp + 7) = v25;
        memcpy(v26, v24, v25);
        *(_BYTE *)(v21 + 96) = *v24;
        *(_QWORD *)(v21 + 88) = v39;
        v45 = 1;
        *(_BYTE *)(v7 + 167) = 1;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
          WPP_SF_dDDD(
            *((_DWORD *)WPP_GLOBAL_Control + 4),
            *((_DWORD *)WPP_GLOBAL_Control + 5),
            38,
            (int)dword_1616C,
            **((_BYTE **)Irp + 15),
            *(_BYTE *)(*((_DWORD *)Irp + 15) + 1),
            *(_BYTE *)(*((_DWORD *)Irp + 15) + 2),
            *(_BYTE *)(*((_DWORD *)Irp + 15) + 3));
LABEL_52:
        PoSetSystemState(4u);
        goto LABEL_29;
      }
      v45 = 0;
    }
LABEL_29:
    v4 = (int)Irp;
    goto LABEL_30;
  }
  if ( v5 == -1073741536
    && WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 40, (int)dword_1616C, v4);
LABEL_30:
  HidIrDecrementPendingRequestCount(a3);
  if ( *(_DWORD *)(v4 + 4) )
  {
    IoFreeMdl(*(PMDL *)(v4 + 4));
    *(_DWORD *)(v4 + 4) = 0;
    if ( P )
      ExFreePool(P);
  }
  if ( !v44 )
  {
    v18 = &WPP_GLOBAL_Control;
    v19 = (int)dword_1616C;
    goto LABEL_82;
  }
  v18 = &WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 3u )
  {
    v19 = (int)dword_1616C;
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 41, (int)dword_1616C);
  }
  else
  {
    v19 = (int)dword_1616C;
  }
  if ( ProgramDeviceForWake(a3, v4) >= 0 )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
      WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 42, v19);
    return -1073741802;
  }
  v36 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
  {
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 43, v19);
LABEL_82:
    v36 = WPP_GLOBAL_Control;
  }
  if ( !v45 )
  {
    BYTE3(Irp) = 1;
    if ( v36 != v18 && *((_BYTE *)v36 + 32) & 4 && *((_BYTE *)v36 + 29) >= 4u )
      WPP_SF_(*((_DWORD *)v36 + 4), *((_DWORD *)v36 + 5), 44, v19);
    v37 = HidIrReadReport(a1, (PIRP)v4, (int)((char *)&Irp + 3));
    if ( !BYTE3(Irp) )
      return -1073741802;
    *(_DWORD *)(v4 + 24) = v37;
  }
  if ( *(_BYTE *)(v4 + 33) )
    *(_BYTE *)(*(_DWORD *)(v4 + 96) + 3) |= 1u;
  return 0;
}
// 1616C: using guessed type int dword_1616C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (0001388A) --------------------------------------------------------
signed int __stdcall HidIrWriteReport(int a1, int a2)
{
  int v2; // ebx@5
  int v3; // edi@5
  int v4; // eax@5
  PVOID v5; // eax@6
  int v6; // ecx@8
  void *v7; // eax@8
  int v8; // edi@11
  int v10; // [sp+Ch] [bp-10h]@5
  PVOID v11; // [sp+10h] [bp-Ch]@5
  unsigned int v12; // [sp+14h] [bp-8h]@8
  signed int v13; // [sp+18h] [bp-4h]@1
  unsigned int i; // [sp+24h] [bp+8h]@14
  PVOID v15; // [sp+28h] [bp+Ch]@8

  v13 = -1073741823;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 46, (int)dword_1616C);
  v2 = a1;
  v10 = *(_DWORD *)(*(_DWORD *)(a1 + 40) + 8);
  v3 = a2;
  v11 = IoGetDriverObjectExtension(*(PDRIVER_OBJECT *)(a1 + 8), (PVOID)0x68694465);
  v4 = *(_DWORD *)(a2 + 4);
  if ( *(_BYTE *)(v4 + 6) & 5 )
    v5 = *(PVOID *)(v4 + 12);
  else
    v5 = MmMapLockedPagesSpecifyCache((PMDL)v4, 0, MmCached, 0, 0, NormalPagePriority);
  v15 = v5;
  v6 = *(_DWORD *)(*(_DWORD *)(v3 + 96) + 8);
  v12 = *(_DWORD *)(*(_DWORD *)(v3 + 96) + 8);
  v7 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
  {
    v8 = (int)dword_1616C;
    WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 47, (int)dword_1616C, v6);
    v7 = WPP_GLOBAL_Control;
  }
  else
  {
    v8 = (int)dword_1616C;
  }
  if ( v15 )
  {
    for ( i = 0; i < v12; ++i )
    {
      if ( v7 != &WPP_GLOBAL_Control && *((_BYTE *)v7 + 32) & 4 && *((_BYTE *)v7 + 29) >= 5u )
      {
        WPP_SF_q(*((_DWORD *)v7 + 4), *((_DWORD *)v7 + 5), 48, v8, *((_BYTE *)v15 + i));
        v7 = WPP_GLOBAL_Control;
      }
    }
    if ( v12 >= 2 && *(_BYTE *)v15 == *(_BYTE *)(v10 + 192) )
    {
      if ( !*((_BYTE *)v15 + 1) )
      {
        *(_BYTE *)(v10 + 164) = 0;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
          WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 49, v8);
        return 0;
      }
      if ( *((_BYTE *)v15 + 1) == 1 )
      {
        *(_BYTE *)(v10 + 164) = 1;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
          WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 50, v8);
        return 0;
      }
      if ( *((_BYTE *)v15 + 1) == 2 )
      {
        *((_DWORD *)v11 + 4) = v2;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
          WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 51, v8, v2);
        return 0;
      }
      if ( *((_BYTE *)v15 + 1) == 3 )
      {
        *((_DWORD *)v11 + 4) = 0;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
          WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 52, v8);
        return 0;
      }
    }
  }
  return v13;
}
// 1616C: using guessed type int dword_1616C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00013A7E) --------------------------------------------------------
signed int __stdcall HidIrIncrementPendingRequestCount(int a1)
{
  signed int v1; // edi@1
  int v2; // eax@1

  v1 = 0;
  v2 = InterlockedIncrement((volatile LONG *)(a1 + 4));
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
    WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 12, (int)dword_1616C, v2);
  if ( *(_DWORD *)a1 != 2 && *(_DWORD *)a1 != 1 )
  {
    HidIrDecrementPendingRequestCount(a1);
    v1 = -1073741810;
  }
  return v1;
}
// 1616C: using guessed type int dword_1616C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00013AE4) --------------------------------------------------------
NTSTATUS __stdcall HidIrReadReport(int a1, PIRP Irp, int a3)
{
  int v3; // esi@5
  unsigned int v4; // eax@5
  unsigned int v5; // ecx@5
  int v6; // edi@9
  NTSTATUS result; // eax@9
  PVOID v8; // eax@10
  int v9; // eax@12
  int v10; // eax@12
  PVOID P; // [sp+10h] [bp-24h]@5
  PVOID Pa; // [sp+10h] [bp-24h]@10
  char v13; // [sp+14h] [bp-20h]@9
  char v14; // [sp+15h] [bp-1Fh]@9
  char v15; // [sp+2Ch] [bp-8h]@9

  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 45, (int)dword_1616C);
  v3 = *(_DWORD *)(*(_DWORD *)(a1 + 40) + 8);
  v4 = *(_DWORD *)(*((_DWORD *)Irp + 24) + 4);
  v5 = *(_DWORD *)(v3 + 48);
  P = *(PVOID *)(*(_DWORD *)(a1 + 40) + 8);
  if ( v4 < v5 || !v5 )
    return -1073741306;
  if ( *(_BYTE *)(v3 + 167) && v4 >= 0x19 )
  {
    v13 = *(_BYTE *)(v3 + 192);
    qmemcpy(&v14, (const void *)(v3 + 168), 0x18u);
    v6 = *((_DWORD *)Irp + 15);
    qmemcpy((void *)v6, &v13, 0x18u);
    *(_BYTE *)(v6 + 24) = v15;
    *((_DWORD *)Irp + 6) = 0;
    *((_DWORD *)Irp + 7) = 25;
    *(_BYTE *)a3 = 1;
    *((_BYTE *)P + 167) = 0;
    return 0;
  }
  v8 = ExAllocatePoolWithTag(0, 0x18u, 0x49646948u);
  Pa = v8;
  if ( !v8 )
    return -1073741670;
  if ( !IoAllocateMdl(v8, 0x18u, 0, 0, Irp) )
  {
    ExFreePool(Pa);
    return -1073741670;
  }
  MmBuildMdlForNonPagedPool(*((PMDL *)Irp + 1));
  v9 = *((_DWORD *)Irp + 24) - 36;
  *(_BYTE *)v9 = 3;
  *(_DWORD *)(v9 + 20) = *(_DWORD *)(*(_DWORD *)(a1 + 40) + 4);
  *(_DWORD *)(v9 + 4) = 24;
  v10 = *((_DWORD *)Irp + 24) - 36;
  *(_DWORD *)(v10 + 28) = HidIrReadCompletion;
  *(_DWORD *)(v10 + 32) = v3;
  *(_BYTE *)(v10 + 3) = -32;
  if ( HidIrIncrementPendingRequestCount(v3) < 0 )
  {
    IoFreeMdl(*((PMDL *)Irp + 1));
    *((_DWORD *)Irp + 1) = 0;
    ExFreePool(Pa);
    result = -1073741810;
  }
  else
  {
    result = IofCallDriver(*(PDEVICE_OBJECT *)(*(_DWORD *)(a1 + 40) + 4), Irp);
    *(_BYTE *)a3 = 0;
  }
  return result;
}
// 1616C: using guessed type int dword_1616C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00013C6C) --------------------------------------------------------
int __stdcall HidParse_GetUCHAR(int a1, int a2, int a3)
{
  int result; // eax@2

  if ( *(_DWORD *)a2 <= 0 )
  {
    result = 0;
  }
  else
  {
    --*(_DWORD *)a2;
    *(_BYTE *)a3 = *(_BYTE *)a1;
    result = a1 + 1;
  }
  return result;
}

//----- (00013C96) --------------------------------------------------------
int __stdcall HidParse_GetUSHORT(int a1, int a2, int a3)
{
  int result; // eax@2

  if ( *(_DWORD *)a2 <= 2u )
  {
    result = 0;
  }
  else
  {
    *(_DWORD *)a2 -= 2;
    *(_WORD *)a3 = *(_BYTE *)a1;
    *(_WORD *)a3 |= *(_BYTE *)(a1 + 1) << 8;
    result = a1 + 2;
  }
  return result;
}

//----- (00013CD2) --------------------------------------------------------
int __stdcall HidParse_WriteUsageItem(char a1, char a2, char a3, unsigned int a4, int a5, int a6)
{
  char v6; // dl@2
  int result; // eax@5
  unsigned int v8; // ecx@7

  if ( a4 <= 0xFFFF )
  {
    v6 = a2;
    if ( a4 <= 0xFF )
      v6 = a1;
  }
  else
  {
    v6 = a3;
  }
  *(_BYTE *)a5 = v6;
  *(_BYTE *)(a5 + 1) = a4;
  *(_DWORD *)a6 += 2;
  result = a5 + 2;
  if ( a4 > 0xFF )
  {
    *(_BYTE *)result = BYTE1(a4);
    result = a5 + 3;
    ++*(_DWORD *)a6;
    if ( a4 >> 8 > 0xFF )
    {
      v8 = a4 >> 16;
      *(_BYTE *)result = a4 >> 16;
      *(_BYTE *)(a5 + 4) = BYTE1(v8);
      result = a5 + 5;
      *(_DWORD *)a6 += 2;
    }
  }
  return result;
}

//----- (00013D30) --------------------------------------------------------
int __stdcall HidParse_WriteReportCollection(int a1, int a2, int a3)
{
  void **v3; // ebx@1
  int v4; // esi@2
  int v5; // edi@7
  int v6; // edi@11
  int v7; // edi@15
  int v8; // eax@19
  int v9; // ecx@19
  int v10; // edi@24
  int v11; // edi@34
  unsigned __int16 v12; // ax@47
  unsigned __int16 v13; // dx@48
  unsigned __int16 i; // di@53
  int v15; // eax@58
  int v16; // edi@65
  int v17; // eax@38
  unsigned __int16 v18; // cx@90
  int v19; // edi@94
  unsigned __int16 v20; // cx@98
  int v21; // eax@106
  int v22; // eax@107
  int v23; // eax@113
  void *v24; // eax@126
  unsigned __int16 v26; // [sp+4h] [bp-4h]@1

  v26 = 0;
  v3 = &WPP_GLOBAL_Control;
  while ( v26 < *(_WORD *)(a1 + 522) )
  {
    v4 = 52 * v26 + a1;
    if ( !v26 )
    {
      if ( WPP_GLOBAL_Control != v3
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_q(
          *((_DWORD *)WPP_GLOBAL_Control + 4),
          *((_DWORD *)WPP_GLOBAL_Control + 5),
          11,
          (int)dword_1617C,
          *(_WORD *)v4);
      v5 = HidParse_WriteUsageItem(5, 6, 7, *(_WORD *)v4, a2, a3);
      if ( WPP_GLOBAL_Control != v3
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_q(
          *((_DWORD *)WPP_GLOBAL_Control + 4),
          *((_DWORD *)WPP_GLOBAL_Control + 5),
          12,
          (int)dword_1617C,
          *(_WORD *)(v4 + 2));
      v6 = HidParse_WriteUsageItem(9, 10, 11, *(_WORD *)(v4 + 2), v5, a3);
      if ( WPP_GLOBAL_Control != v3
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_q(
          *((_DWORD *)WPP_GLOBAL_Control + 4),
          *((_DWORD *)WPP_GLOBAL_Control + 5),
          13,
          (int)dword_1617C,
          *(_BYTE *)(a1 + 520));
      v7 = HidParse_WriteUsageItem(-95, -95, -95, *(_BYTE *)(a1 + 520), v6, a3);
      if ( WPP_GLOBAL_Control != v3
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_q(
          *((_DWORD *)WPP_GLOBAL_Control + 4),
          *((_DWORD *)WPP_GLOBAL_Control + 5),
          14,
          (int)dword_1617C,
          *(_BYTE *)(v4 + 30));
      v8 = HidParse_WriteUsageItem(-123, -123, -123, *(_BYTE *)(v4 + 30), v7, a3);
      v9 = *(_DWORD *)(v4 + 4);
      a2 = v8;
      if ( v9 != *(_DWORD *)(v4 + 8) )
      {
        if ( WPP_GLOBAL_Control != v3
          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
          WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 15, (int)dword_1617C, v9);
        v10 = HidParse_WriteUsageItem(25, 26, 27, *(_DWORD *)(v4 + 4), a2, a3);
        if ( WPP_GLOBAL_Control != v3
          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
          WPP_SF_q(
            *((_DWORD *)WPP_GLOBAL_Control + 4),
            *((_DWORD *)WPP_GLOBAL_Control + 5),
            16,
            (int)dword_1617C,
            *(_DWORD *)(v4 + 8));
        a2 = HidParse_WriteUsageItem(41, 42, 43, *(_DWORD *)(v4 + 8), v10, a3);
      }
      if ( *(_DWORD *)(v4 + 12) != *(_DWORD *)(v4 + 16) )
      {
        if ( WPP_GLOBAL_Control != v3
          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
          WPP_SF_q(
            *((_DWORD *)WPP_GLOBAL_Control + 4),
            *((_DWORD *)WPP_GLOBAL_Control + 5),
            17,
            (int)dword_1617C,
            *(_DWORD *)(v4 + 12));
        v11 = HidParse_WriteUsageItem(21, 22, 23, *(_DWORD *)(v4 + 12), a2, a3);
        if ( WPP_GLOBAL_Control != v3
          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
          WPP_SF_q(
            *((_DWORD *)WPP_GLOBAL_Control + 4),
            *((_DWORD *)WPP_GLOBAL_Control + 5),
            18,
            (int)dword_1617C,
            *(_DWORD *)(v4 + 16));
        v17 = HidParse_WriteUsageItem(37, 38, 39, *(_DWORD *)(v4 + 16), v11, a3);
LABEL_89:
        a2 = v17;
        goto LABEL_90;
      }
      goto LABEL_90;
    }
    if ( *(_WORD *)(v4 - 52) != *(_WORD *)v4 )
    {
      if ( WPP_GLOBAL_Control != v3
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_q(
          *((_DWORD *)WPP_GLOBAL_Control + 4),
          *((_DWORD *)WPP_GLOBAL_Control + 5),
          19,
          (int)dword_1617C,
          *(_WORD *)v4);
      a2 = HidParse_WriteUsageItem(5, 6, 7, *(_WORD *)v4, a2, a3);
    }
    if ( *(_WORD *)(v4 + 36) == 1 )
    {
      if ( 1 == *(_WORD *)(v4 - 16) )
      {
        v12 = *(_WORD *)(v4 + 48);
        if ( v12 == *(_WORD *)(v4 - 4) )
        {
          v13 = 0;
          if ( v12 <= 0u )
            goto LABEL_59;
          while ( *(_DWORD *)(v4 + 4 * v13 + 40) == *(_DWORD *)(a1 + 4 * (v13 + 13 * v26) - 12) )
          {
            ++v13;
            if ( v13 >= *(_WORD *)(v4 + 48) )
            {
              v3 = &WPP_GLOBAL_Control;
              goto LABEL_59;
            }
          }
          v3 = &WPP_GLOBAL_Control;
        }
      }
      for ( i = 0; i < *(_WORD *)(v4 + 48); a2 = v15 )
      {
        if ( WPP_GLOBAL_Control != v3
          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
          WPP_SF_q(
            *((_DWORD *)WPP_GLOBAL_Control + 4),
            *((_DWORD *)WPP_GLOBAL_Control + 5),
            20,
            (int)dword_1617C,
            *(_DWORD *)(v4 + 4 * i + 40));
        v15 = HidParse_WriteUsageItem(9, 10, 11, *(_DWORD *)(v4 + 4 * i++ + 40), a2, a3);
      }
    }
LABEL_59:
    if ( *(_WORD *)(v4 + 36) || *(_DWORD *)(v4 - 48) == *(_DWORD *)(v4 + 4) && *(_WORD *)(v4 - 52) == *(_WORD *)v4 )
    {
      v16 = (int)dword_1617C;
    }
    else
    {
      if ( WPP_GLOBAL_Control != v3
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
      {
        v16 = (int)dword_1617C;
        WPP_SF_q(
          *((_DWORD *)WPP_GLOBAL_Control + 4),
          *((_DWORD *)WPP_GLOBAL_Control + 5),
          21,
          (int)dword_1617C,
          *(_DWORD *)(v4 + 4));
      }
      else
      {
        v16 = (int)dword_1617C;
      }
      a2 = HidParse_WriteUsageItem(25, 26, 27, *(_DWORD *)(v4 + 4), a2, a3);
    }
    if ( !*(_WORD *)(v4 + 36) && (*(_DWORD *)(v4 - 44) != *(_DWORD *)(v4 + 8) || *(_WORD *)(v4 - 52) != *(_WORD *)v4) )
    {
      if ( WPP_GLOBAL_Control != v3
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 22, v16, *(_DWORD *)(v4 + 8));
      a2 = HidParse_WriteUsageItem(41, 42, 43, *(_DWORD *)(v4 + 8), a2, a3);
    }
    if ( *(_DWORD *)(v4 - 40) != *(_DWORD *)(v4 + 12) )
    {
      if ( WPP_GLOBAL_Control != v3
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_q(
          *((_DWORD *)WPP_GLOBAL_Control + 4),
          *((_DWORD *)WPP_GLOBAL_Control + 5),
          23,
          v16,
          *(_DWORD *)(v4 + 12));
      a2 = HidParse_WriteUsageItem(21, 22, 23, *(_DWORD *)(v4 + 12), a2, a3);
    }
    if ( *(_DWORD *)(v4 - 36) != *(_DWORD *)(v4 + 16) )
    {
      if ( WPP_GLOBAL_Control != v3
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_q(
          *((_DWORD *)WPP_GLOBAL_Control + 4),
          *((_DWORD *)WPP_GLOBAL_Control + 5),
          24,
          v16,
          *(_DWORD *)(v4 + 16));
      v17 = HidParse_WriteUsageItem(37, 38, 39, *(_DWORD *)(v4 + 16), a2, a3);
      goto LABEL_89;
    }
LABEL_90:
    v18 = *(_WORD *)(v4 + 20);
    if ( v18 )
    {
      if ( WPP_GLOBAL_Control != v3
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
      {
        v19 = (int)dword_1617C;
        WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 25, (int)dword_1617C, v18);
      }
      else
      {
        v19 = (int)dword_1617C;
      }
      a2 = HidParse_WriteUsageItem(117, 117, 117, *(_WORD *)(v4 + 20), a2, a3);
    }
    else
    {
      v19 = (int)dword_1617C;
    }
    v20 = *(_WORD *)(v4 + 22);
    if ( v20 )
    {
      if ( WPP_GLOBAL_Control != v3
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 26, v19, v20);
      a2 = HidParse_WriteUsageItem(-107, -106, 0, *(_WORD *)(v4 + 22), a2, a3);
    }
    if ( !*(_WORD *)(v4 + 20) || *(_WORD *)(v4 + 22) <= 0u )
      goto LABEL_125;
    v21 = *(_DWORD *)(v4 + 24);
    if ( !v21 )
    {
      if ( WPP_GLOBAL_Control != v3
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 27, v19, *(_WORD *)(v4 + 28));
      v23 = HidParse_WriteUsageItem(-127, -126, 0, *(_WORD *)(v4 + 28), a2, a3);
      goto LABEL_124;
    }
    v22 = v21 - 1;
    if ( !v22 )
    {
      if ( WPP_GLOBAL_Control != v3
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 28, v19, *(_WORD *)(v4 + 28));
      v23 = HidParse_WriteUsageItem(-111, -110, 0, *(_WORD *)(v4 + 28), a2, a3);
      goto LABEL_124;
    }
    if ( v22 == 2 )
    {
      if ( WPP_GLOBAL_Control != v3
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 29, v19, *(_WORD *)(v4 + 28));
      v23 = HidParse_WriteUsageItem(-79, -78, 0, *(_WORD *)(v4 + 28), a2, a3);
LABEL_124:
      a2 = v23;
    }
LABEL_125:
    ++v26;
  }
  v24 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != v3 )
  {
    if ( *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10 && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    {
      WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 30, (int)dword_1617C);
      v24 = WPP_GLOBAL_Control;
    }
    if ( v24 != v3 && *((_BYTE *)v24 + 32) & 0x10 && *((_BYTE *)v24 + 29) >= 4u )
      WPP_SF_q(*((_DWORD *)v24 + 4), *((_DWORD *)v24 + 5), 31, (int)dword_1617C, *(_WORD *)(a1 + 524));
  }
  *(_BYTE *)a2 = -64;
  ++*(_DWORD *)a3;
  return a2 + 1;
}
// 1617C: using guessed type int dword_1617C[5];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (000143F2) --------------------------------------------------------
signed int __stdcall HidParse_ParseReportDescriptor(int a1, signed int a2, int a3)
{
  PVOID v3; // ebx@1
  int v4; // esi@5
  bool v5; // zf@7
  bool v6; // sf@7
  int v7; // esi@9
  int v8; // eax@21
  unsigned __int16 v9; // ax@29
  int v10; // eax@32
  signed __int16 v11; // ax@39
  PVOID v12; // eax@43
  unsigned __int16 v13; // ax@46
  PVOID v14; // eax@49
  int v15; // eax@57
  int v16; // eax@67
  int v17; // eax@74
  unsigned __int16 v18; // ax@95
  unsigned __int16 v19; // ax@100
  unsigned __int16 v20; // ax@106
  int v21; // edi@110
  __int16 v22; // ax@110
  unsigned __int16 v23; // ax@115
  int i; // eax@122
  int v25; // ebx@124
  int v26; // edi@139
  int v28; // eax@142
  int v29; // ecx@143
  void *v30; // eax@143
  unsigned __int16 v31; // [sp+Ch] [bp-3Ch]@7
  unsigned __int16 v32; // [sp+Eh] [bp-3Ah]@28
  int v33; // [sp+10h] [bp-38h]@58
  int v34; // [sp+14h] [bp-34h]@71
  int v35; // [sp+18h] [bp-30h]@25
  int v36; // [sp+1Ch] [bp-2Ch]@78
  int v37; // [sp+20h] [bp-28h]@84
  int v38; // [sp+24h] [bp-24h]@94
  unsigned __int16 v39; // [sp+28h] [bp-20h]@100
  unsigned __int8 v40; // [sp+2Ah] [bp-1Eh]@103
  __int16 v41; // [sp+30h] [bp-18h]@40
  int v42[2]; // [sp+34h] [bp-14h]@39
  unsigned __int16 v43; // [sp+3Ch] [bp-Ch]@7
  unsigned __int16 v44; // [sp+40h] [bp-8h]@19
  unsigned __int8 v45; // [sp+47h] [bp-1h]@9
  int v46; // [sp+50h] [bp+8h]@9

  v3 = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x10
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 10, (int)dword_1617C);
  v4 = a1;
  if ( !a1 || a2 < 10 )
    return -1073741811;
  memset(&v31, 0, 0x34u);
  v5 = a2 == 0;
  v6 = a2 < 0;
  v31 = 0;
  v43 = 0;
  while ( 1 )
  {
    v26 = a3;
    if ( v6 || v5 )
      break;
    --a2;
    if ( !v4 )
      goto LABEL_145;
    v45 = *(_BYTE *)v4;
    v7 = v4 + 1;
    v46 = v7;
    if ( (signed int)v45 > 117 )
    {
      if ( (signed int)v45 > 149 )
      {
        if ( v45 != 150 )
        {
          if ( v45 == 161 )
          {
            v46 = HidParse_GetUCHAR(v7, (int)&a2, (int)&v45);
            if ( v46 && v3 )
              *((_BYTE *)v3 + 520) = v45;
            goto LABEL_138;
          }
          if ( v45 != 177 )
          {
            if ( v45 != 178 )
            {
              if ( v45 == 192 && v3 )
              {
                for ( i = a3; *(_DWORD *)i; i = *(_DWORD *)i )
                  ;
                v25 = (int)((char *)v3 + 528);
                *(_DWORD *)v25 = *(_DWORD *)i;
                *(_DWORD *)i = v25;
                v3 = 0;
                memset(&v31, 0, 0x34u);
              }
              goto LABEL_138;
            }
            v46 = HidParse_GetUSHORT(v7, (int)&a2, (int)&v44);
            if ( !v46 || !v3 )
              goto LABEL_138;
            v38 = 3;
LABEL_95:
            v18 = v44;
LABEL_100:
            v39 = v18;
            qmemcpy((char *)v3 + 52 * (*((_WORD *)v3 + 261))++, &v31, 0x34u);
            v19 = *((_WORD *)v3 + 261);
LABEL_111:
            if ( v19 >= 0xAu )
            {
LABEL_50:
              v46 = 0;
              goto LABEL_138;
            }
            goto LABEL_138;
          }
          v46 = HidParse_GetUCHAR(v7, (int)&a2, (int)&v45);
          if ( !v46 || !v3 )
            goto LABEL_138;
          v38 = 3;
LABEL_99:
          v18 = v45;
          goto LABEL_100;
        }
        v46 = HidParse_GetUSHORT(v7, (int)&a2, (int)&v44);
        if ( v46 && v3 )
        {
          v23 = v44;
          goto LABEL_137;
        }
      }
      else
      {
        if ( v45 != 149 )
        {
          if ( v45 == 129 )
          {
            v46 = HidParse_GetUCHAR(v7, (int)&a2, (int)&v45);
            if ( !v46 || !v3 )
              goto LABEL_138;
            v20 = v45;
          }
          else
          {
            if ( v45 != 130 )
            {
              if ( v45 == 133 )
              {
                v46 = HidParse_GetUCHAR(v7, (int)&a2, (int)&v45);
                if ( v46 && v3 )
                  v40 = v45;
                goto LABEL_138;
              }
              if ( v45 != 145 )
              {
                if ( v45 != 146 )
                  goto LABEL_138;
                v46 = HidParse_GetUSHORT(v7, (int)&a2, (int)&v44);
                if ( !v46 || !v3 )
                  goto LABEL_138;
                v38 = 1;
                goto LABEL_95;
              }
              v46 = HidParse_GetUCHAR(v7, (int)&a2, (int)&v45);
              if ( !v46 || !v3 )
                goto LABEL_138;
              v38 = 1;
              goto LABEL_99;
            }
            v46 = HidParse_GetUSHORT(v7, (int)&a2, (int)&v44);
            if ( !v46 || !v3 )
              goto LABEL_138;
            v20 = v44;
          }
          v21 = *((_WORD *)v3 + 261);
          v38 = 0;
          v39 = v20;
          v22 = v37 * HIWORD(v37);
          qmemcpy((char *)v3 + 52 * v21, &v31, 0x34u);
          *((_WORD *)v3 + 262) += v22;
          ++*((_WORD *)v3 + 261);
          v19 = *((_WORD *)v3 + 261);
          goto LABEL_111;
        }
        v46 = HidParse_GetUCHAR(v7, (int)&a2, (int)&v45);
        if ( v46 && v3 )
        {
          v23 = v45;
LABEL_137:
          HIWORD(v37) = v23;
          goto LABEL_138;
        }
      }
    }
    else if ( v45 == 117 )
    {
      v46 = HidParse_GetUCHAR(v7, (int)&a2, (int)&v45);
      if ( v46 && v3 )
        LOWORD(v37) = v45;
    }
    else if ( (signed int)v45 > 25 )
    {
      switch ( v45 )
      {
        case 0x1Au:
          v46 = HidParse_GetUSHORT(v7, (int)&a2, (int)&v44);
          if ( v46 && v3 )
          {
            v15 = v44;
LABEL_58:
            v33 = v15;
LABEL_59:
            v11 = 0;
            goto LABEL_40;
          }
          break;
        case 0x25u:
          v46 = HidParse_GetUCHAR(v7, (int)&a2, (int)&v45);
          if ( v46 && v3 )
          {
            v17 = v45;
            goto LABEL_78;
          }
          break;
        case 0x26u:
          v46 = HidParse_GetUSHORT(v7, (int)&a2, (int)&v44);
          if ( v46 && v3 )
          {
            v17 = v44;
LABEL_78:
            v36 = v17;
            break;
          }
          break;
        case 0x29u:
          v46 = HidParse_GetUCHAR(v7, (int)&a2, (int)&v45);
          if ( v46 && v3 )
          {
            v16 = v45;
            goto LABEL_71;
          }
          break;
        case 0x2Au:
          v46 = HidParse_GetUSHORT(v7, (int)&a2, (int)&v44);
          if ( v46 )
          {
            if ( v3 )
            {
              v16 = v44;
LABEL_71:
              v34 = v16;
              goto LABEL_59;
            }
          }
          break;
      }
    }
    else if ( v45 == 25 )
    {
      v46 = HidParse_GetUCHAR(v7, (int)&a2, (int)&v45);
      if ( v46 && v3 )
      {
        v15 = v45;
        goto LABEL_58;
      }
    }
    else
    {
      if ( v45 == 5 )
      {
        v46 = HidParse_GetUCHAR(v7, (int)&a2, (int)&v45);
        if ( !v46 )
          goto LABEL_138;
        if ( v3 )
        {
          qmemcpy((char *)v3 + 52 * *((_WORD *)v3 + 261), &v31, 0x34u);
          *((_WORD *)v3 + 26 * *((_WORD *)v3 + 261) + 10) = 0;
          *((_WORD *)v3 + 26 * (*((_WORD *)v3 + 261))++ + 11) = 0;
          if ( *((_WORD *)v3 + 261) >= 0xAu )
            goto LABEL_50;
        }
        else
        {
          v14 = ExAllocatePoolWithTag(PagedPool, 0x214u, 0x49646948u);
          v3 = v14;
          if ( !v14 )
            goto LABEL_50;
          memset(v14, 0, 0x210u);
        }
        v13 = v45;
        goto LABEL_54;
      }
      if ( v45 == 6 )
      {
        v46 = HidParse_GetUSHORT(v7, (int)&a2, (int)&v44);
        if ( !v46 )
          goto LABEL_138;
        if ( v3 )
        {
          qmemcpy((char *)v3 + 52 * *((_WORD *)v3 + 261), &v31, 0x34u);
          *((_WORD *)v3 + 26 * *((_WORD *)v3 + 261) + 10) = 0;
          *((_WORD *)v3 + 26 * (*((_WORD *)v3 + 261))++ + 11) = 0;
          if ( *((_WORD *)v3 + 261) >= 0xAu )
            goto LABEL_50;
        }
        else
        {
          v12 = ExAllocatePoolWithTag(PagedPool, 0x214u, 0x49646948u);
          v3 = v12;
          if ( !v12 )
            goto LABEL_50;
          memset(v12, 0, 0x210u);
        }
        v13 = v44;
LABEL_54:
        v31 = v13;
        goto LABEL_138;
      }
      switch ( v45 )
      {
        case 9u:
          v46 = HidParse_GetUCHAR(v7, (int)&a2, (int)&v45);
          if ( v46 && v3 )
          {
            if ( !v32 )
            {
              v9 = v45;
              goto LABEL_30;
            }
            if ( v43 < 2u )
            {
              v10 = v45;
LABEL_39:
              v42[v43++] = v10;
              v11 = 1;
LABEL_40:
              v41 = v11;
              break;
            }
          }
          break;
        case 0xAu:
          v46 = HidParse_GetUSHORT(v7, (int)&a2, (int)&v44);
          if ( v46 && v3 )
          {
            if ( !v32 )
            {
              v9 = v44;
LABEL_30:
              v32 = v9;
              break;
            }
            if ( v43 < 2u )
            {
              v10 = v44;
              goto LABEL_39;
            }
          }
          break;
        case 0x15u:
          v46 = HidParse_GetUCHAR(v7, (int)&a2, (int)&v45);
          if ( v46 && v3 )
          {
            v8 = v45;
            goto LABEL_25;
          }
          break;
        case 0x16u:
          v46 = HidParse_GetUSHORT(v7, (int)&a2, (int)&v44);
          if ( v46 )
          {
            if ( v3 )
            {
              v8 = v44;
LABEL_25:
              v35 = v8;
              break;
            }
          }
          break;
      }
    }
LABEL_138:
    v4 = v46;
    v5 = a2 == 0;
    v6 = a2 < 0;
  }
  if ( v4 )
    return 0;
LABEL_145:
  while ( *(_DWORD *)v26 )
  {
    v28 = *(_DWORD *)v26;
    if ( *(_DWORD *)v26 )
    {
      v29 = *(_DWORD *)v28;
      v5 = v28 == 528;
      v30 = (void *)(v28 - 528);
      *(_DWORD *)v26 = v29;
      if ( !v5 )
        ExFreePool(v30);
    }
  }
  return -1073741823;
}
// 1617C: using guessed type int dword_1617C[5];
// 17000: using guessed type void *WPP_GLOBAL_Control;
// 143F2: using guessed type int var_14[2];

//----- (00014B1C) --------------------------------------------------------
int __stdcall WPP_SF_Dqq(int a1, int a2, int a3, int a4, int a5, char a6, char a7)
{
  return pfnWppTraceMessage(a1, a2, 43, a4, a3, &a5);
}
// 17044: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00014B56) --------------------------------------------------------
int __stdcall HidIrWriteWakePatternToRegistry(int a1)
{
  return HidIrCallAtPassiveIrql(*(PDEVICE_OBJECT *)(a1 + 24), HidIrWriteWakePatternToRegistryWorker, 0);
}

//----- (00014B76) --------------------------------------------------------
char __stdcall IsSleepButton(int a1, int a2)
{
  char result; // al@1
  char v3; // cl@3

  result = 0;
  if ( *(_BYTE *)(a1 + 165) )
  {
    if ( *(_BYTE *)(a1 + 166) == *(_BYTE *)(a2 + 4) )
    {
      v3 = *(_BYTE *)(a2 + 5);
      if ( v3 == -127 || v3 == -126 || v3 == -88 )
        result = 1;
    }
  }
  return result;
}

//----- (00014BB4) --------------------------------------------------------
char __stdcall IsSleepOrWakeButton(int a1, int a2)
{
  char result; // al@1
  char v3; // cl@3

  result = 0;
  if ( *(_BYTE *)(a1 + 165) )
  {
    if ( *(_BYTE *)(a1 + 166) == *(_BYTE *)(a2 + 4) )
    {
      v3 = *(_BYTE *)(a2 + 5);
      if ( v3 == -127 || v3 == -126 || v3 == -88 || v3 == -125 )
        result = 1;
    }
  }
  return result;
}

//----- (00014BF6) --------------------------------------------------------
char __stdcall ProtocolFromDecoderId(int a1)
{
  char result; // al@4

  switch ( a1 )
  {
    case 1:
      result = 1;
      break;
    case 4:
      result = 4;
      break;
    case 9:
      result = 2;
      break;
    default:
      result = 8;
      break;
  }
  return result;
}

//----- (00014C22) --------------------------------------------------------
int __stdcall SetDeviceWakePattern(int a1, int *a2, int a3, int a4, int a5)
{
  int result; // eax@6
  char v6; // al@10
  int v7; // ebx@21

  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 38, (int)dword_16190);
  *(_BYTE *)a5 = 0;
  if ( *(_BYTE *)(a1 + 252) == 1 )
  {
    result = (int)WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
      result = WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 39, (int)dword_16190);
  }
  else
  {
    v6 = ProtocolFromDecoderId(*a2);
    if ( *(_BYTE *)(a1 + 240)
      && *(_DWORD *)(a1 + 244) == a3
      && *(_BYTE *)(a1 + 241) == v6
      && *(_DWORD *)(a1 + 248) == a4 )
    {
      result = (int)WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        result = WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 40, (int)dword_16190);
    }
    else
    {
      *(_DWORD *)(a1 + 244) = a3;
      *(_BYTE *)(a1 + 241) = v6;
      *(_DWORD *)(a1 + 248) = a4;
      *(_BYTE *)(a1 + 240) = 1;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
      {
        v7 = (int)dword_16190;
        WPP_SF_Dqq(
          *((_DWORD *)WPP_GLOBAL_Control + 4),
          *((_DWORD *)WPP_GLOBAL_Control + 5),
          41,
          (int)dword_16190,
          (unsigned __int8)v6,
          a3,
          a4);
      }
      else
      {
        v7 = (int)dword_16190;
      }
      result = HidIrWriteWakePatternToRegistry(a1);
      if ( result < 0 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
          WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 42, v7, result);
        result = 0;
      }
      *(_BYTE *)a5 = 1;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        result = WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 43, v7, result);
    }
  }
  return result;
}
// 16190: using guessed type int dword_16190[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00014DC0) --------------------------------------------------------
int __stdcall InferWakePatternBasedOnButtonCode(int a1, int a2, int a3, int a4)
{
  int *v4; // esi@1
  int v5; // ebx@1
  int v6; // eax@5
  int v7; // eax@7
  int result; // eax@15
  int v9; // [sp+18h] [bp+Ch]@1

  v4 = (int *)a2;
  v9 = HidIrGetAddressFromPayload(a2, a3);
  v5 = HidIrGetDataFromPayload((int)v4, a3);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 44, (int)dword_16190);
  *(_BYTE *)a4 = 0;
  v6 = *v4;
  if ( *v4 == 4 )
  {
    if ( !v5 )
    {
      v7 = 0;
LABEL_14:
      SetDeviceWakePattern(a1, v4, v7, v9, a4);
      goto LABEL_15;
    }
  }
  else if ( v6 == 1 || v6 == 9 )
  {
    v7 = 12;
    if ( v5 == 12 )
      goto LABEL_14;
    if ( (unsigned int)v5 > 0x28 && (unsigned int)v5 <= 0x2A )
    {
      v7 = 41;
      goto LABEL_14;
    }
  }
LABEL_15:
  result = (int)WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    result = WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 45, (int)dword_16190);
  return result;
}
// 16190: using guessed type int dword_16190[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00014E82) --------------------------------------------------------
int __stdcall ProgramDeviceForWake(int a1, int a2)
{
  int v2; // ebx@1
  void *v3; // eax@1

  v2 = 0;
  v3 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
  {
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 26, (int)dword_16190);
    v3 = WPP_GLOBAL_Control;
  }
  if ( *(_BYTE *)(a1 + 252) != 1 )
  {
    if ( *(_BYTE *)(a1 + 240) )
    {
      v2 = HidIrCallAtPassiveIrql(*(PDEVICE_OBJECT *)(a1 + 24), HidIrProgramDeviceWorker, a2);
      if ( v2 < 0 )
      {
        v3 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
          return v2;
        if ( !(*((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80) || *((_BYTE *)WPP_GLOBAL_Control + 29) < 2u )
          goto LABEL_22;
        WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 29, (int)dword_16190, v2);
      }
    }
    else
    {
      if ( v3 == &WPP_GLOBAL_Control )
        return v2;
      if ( !(*((_BYTE *)v3 + 32) & 0x80) || *((_BYTE *)v3 + 29) < 4u )
        goto LABEL_22;
      WPP_SF_(*((_DWORD *)v3 + 4), *((_DWORD *)v3 + 5), 28, (int)dword_16190);
    }
    goto LABEL_21;
  }
  if ( v3 == &WPP_GLOBAL_Control )
    return v2;
  if ( *((_BYTE *)v3 + 32) & 0x80 && *((_BYTE *)v3 + 29) >= 4u )
  {
    WPP_SF_(*((_DWORD *)v3 + 4), *((_DWORD *)v3 + 5), 27, (int)dword_16190);
LABEL_21:
    v3 = WPP_GLOBAL_Control;
  }
LABEL_22:
  if ( v3 != &WPP_GLOBAL_Control && *((_BYTE *)v3 + 32) & 0x80 && *((_BYTE *)v3 + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)v3 + 4), *((_DWORD *)v3 + 5), 30, (int)dword_16190, v2);
  return v2;
}
// 16190: using guessed type int dword_16190[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00018006) --------------------------------------------------------
int __stdcall HidIrStartDevice(int a1)
{
  int v1; // esi@1
  int v2; // ebx@5
  void *v3; // eax@8

  v1 = *(_DWORD *)(*(_DWORD *)(a1 + 40) + 8);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_q(
      *((_DWORD *)WPP_GLOBAL_Control + 4),
      *((_DWORD *)WPP_GLOBAL_Control + 5),
      10,
      (int)dword_1612C,
      *(_DWORD *)(*(_DWORD *)(a1 + 40) + 8));
  v2 = *(_DWORD *)v1;
  *(_DWORD *)v1 = 1;
  KeResetEvent((PRKEVENT)(v1 + 8));
  if ( v2 != 3 && v2 != 4 && v2 != 5 )
    goto LABEL_12;
  HidIrIncrementPendingRequestCount(v1);
  v3 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
    return 0;
  if ( *((_BYTE *)WPP_GLOBAL_Control + 32) & 2 && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
  {
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 11, (int)dword_1612C);
LABEL_12:
    v3 = WPP_GLOBAL_Control;
  }
  if ( v3 != &WPP_GLOBAL_Control && *((_BYTE *)v3 + 32) & 2 && *((_BYTE *)v3 + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)v3 + 4), *((_DWORD *)v3 + 5), 12, (int)dword_1612C, 0);
  return 0;
}
// 1612C: using guessed type int dword_1612C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (000180CA) --------------------------------------------------------
NTSTATUS __stdcall HidIrQueryDeviceKey(HANDLE KeyHandle, PCWSTR SourceString, int a3, int a4)
{
  NTSTATUS v4; // eax@1
  PVOID v5; // esi@5
  PVOID v6; // eax@7
  UNICODE_STRING DestinationString; // [sp+Ch] [bp-30h]@1
  HANDLE v9; // [sp+14h] [bp-28h]@1
  ULONG ResultLength; // [sp+18h] [bp-24h]@1
  NTSTATUS v11; // [sp+1Ch] [bp-20h]@1
  char KeyValueInformation; // [sp+20h] [bp-1Ch]@1

  *(_DWORD *)a3 = 0;
  *(_DWORD *)a4 = 0;
  v9 = KeyHandle;
  RtlInitUnicodeString(&DestinationString, SourceString);
  v4 = ZwQueryValueKey(
         KeyHandle,
         &DestinationString,
         KeyValueFullInformation,
         &KeyValueInformation,
         0x18u,
         &ResultLength);
  v11 = v4;
  if ( v4 == -1073741789 || v4 == -2147483643 )
  {
    v5 = ExAllocatePoolWithTag(PagedPool, ResultLength, 0x49646948u);
    if ( v5 )
    {
      v11 = ZwQueryValueKey(v9, &DestinationString, KeyValueFullInformation, v5, ResultLength, &ResultLength);
      if ( v11 >= 0 )
      {
        *(_DWORD *)a4 = *((_DWORD *)v5 + 3);
        v6 = ExAllocatePoolWithTag(0, *((_DWORD *)v5 + 3), 0x49646948u);
        *(_DWORD *)a3 = v6;
        if ( v6 )
          memcpy(v6, (char *)v5 + *((_DWORD *)v5 + 2), *((_DWORD *)v5 + 3));
        else
          v11 = -1073741670;
      }
      ExFreePool(v5);
    }
    else
    {
      v11 = -1073741670;
    }
  }
  else if ( v4 >= 0 )
  {
    v11 = -1073741823;
  }
  return v11;
}

//----- (000181CC) --------------------------------------------------------
NTSTATUS __stdcall HidIrEnumKeyInfo(HANDLE KeyHandle, __int16 a2, int a3)
{
  NTSTATUS v3; // ebx@1
  PVOID v4; // eax@3
  ULONG ResultLength; // [sp+Ch] [bp-4h]@1

  ResultLength = 0;
  v3 = ZwEnumerateKey(KeyHandle, (unsigned __int16)a2, 0, 0, 0, &ResultLength);
  if ( v3 == -1073741789 && ResultLength > 0 )
  {
    v4 = ExAllocatePoolWithTag(PagedPool, ResultLength, 0x49646948u);
    *(_DWORD *)a3 = v4;
    if ( v4 )
    {
      v3 = ZwEnumerateKey(KeyHandle, (unsigned __int16)a2, 0, v4, ResultLength, &ResultLength);
      if ( v3 < 0 )
      {
        ExFreePool(*(PVOID *)a3);
        *(_DWORD *)a3 = 0;
      }
    }
    else
    {
      v3 = -1073741670;
    }
  }
  return v3;
}

//----- (00018254) --------------------------------------------------------
NTSTATUS __stdcall HidIrEnumValueKeyInfo(HANDLE KeyHandle, __int16 a2, int a3)
{
  NTSTATUS v3; // ebx@1
  PVOID v4; // eax@3
  ULONG ResultLength; // [sp+Ch] [bp-4h]@1

  ResultLength = 0;
  v3 = ZwEnumerateValueKey(KeyHandle, (unsigned __int16)a2, KeyValuePartialInformation, 0, 0, &ResultLength);
  if ( v3 == -1073741789 && ResultLength )
  {
    v4 = ExAllocatePoolWithTag(PagedPool, ResultLength, 0x49646948u);
    *(_DWORD *)a3 = v4;
    if ( v4 )
    {
      v3 = ZwEnumerateValueKey(
             KeyHandle,
             (unsigned __int16)a2,
             KeyValuePartialInformation,
             v4,
             ResultLength,
             &ResultLength);
      if ( v3 < 0 )
      {
        ExFreePool(*(PVOID *)a3);
        *(_DWORD *)a3 = 0;
      }
    }
    else
    {
      v3 = -1073741670;
    }
  }
  return v3;
}

//----- (000182DC) --------------------------------------------------------
int __stdcall HidIrOpenGlobalConfigKey(int a1, PCUNICODE_STRING SourceString, ACCESS_MASK DesiredAccess)
{
  WCHAR *v3; // eax@1
  signed int v4; // edi@2
  NTSTATUS v5; // eax@4
  OBJECT_ATTRIBUTES ObjectAttributes; // [sp+Ch] [bp-24h]@3
  UNICODE_STRING DestinationString; // [sp+24h] [bp-Ch]@1
  HANDLE KeyHandle; // [sp+2Ch] [bp-4h]@1

  *(_DWORD *)a1 = 0;
  DestinationString.MaximumLength = SourceString->Length + 24;
  KeyHandle = 0;
  DestinationString.Length = 0;
  v3 = (WCHAR *)ExAllocatePoolWithTag(0, DestinationString.MaximumLength, 0x49646948u);
  DestinationString.Buffer = v3;
  if ( v3 )
  {
    memset(v3, 0, DestinationString.MaximumLength);
    RtlCopyUnicodeString(&DestinationString, SourceString);
    RtlAppendUnicodeToString(&DestinationString, L"\\Parameters");
    ObjectAttributes.ObjectName = &DestinationString;
    ObjectAttributes.Length = 24;
    ObjectAttributes.RootDirectory = 0;
    ObjectAttributes.Attributes = 576;
    ObjectAttributes.SecurityDescriptor = 0;
    ObjectAttributes.SecurityQualityOfService = 0;
    if ( DesiredAccess & 6 )
      v5 = ZwCreateKey(&KeyHandle, DesiredAccess, &ObjectAttributes, 0, 0, 0, 0);
    else
      v5 = ZwOpenKey(&KeyHandle, DesiredAccess, &ObjectAttributes);
    v4 = v5;
    if ( v5 >= 0 )
    {
      v4 = 0;
      *(_DWORD *)a1 = KeyHandle;
      KeyHandle = 0;
    }
  }
  else
  {
    v4 = -1073741670;
  }
  if ( DestinationString.Buffer )
  {
    ExFreePool(DestinationString.Buffer);
    DestinationString.Buffer = 0;
  }
  if ( KeyHandle )
    ZwClose(KeyHandle);
  return v4;
}

//----- (000183D8) --------------------------------------------------------
NTSTATUS __userpurge HidIrReadRegULong@<eax>(int a1@<ebp>, void *a2, const WCHAR *a3, int a4)
{
  NTSTATUS result; // eax@1
  int v5; // [sp-64h] [bp-6Ch]@1
  int v6; // [sp-5Ch] [bp-64h]@2
  int v7; // [sp-58h] [bp-60h]@3
  int v8; // [sp-10h] [bp-18h]@1
  int v9; // [sp-8h] [bp-10h]@1
  int v10; // [sp-4h] [bp-Ch]@1
  int v11; // [sp+0h] [bp-8h]@1
  int retaddr; // [sp+8h] [bp+0h]@1

  v10 = a1;
  v11 = retaddr;
  RtlInitUnicodeString((PUNICODE_STRING)&v8, a3);
  v9 = 0;
  result = ZwQueryValueKey(a2, (PUNICODE_STRING)&v8, KeyValuePartialInformation, &v5, 0x50u, (PULONG)&v9);
  if ( result >= 0 && v6 == 4 )
    *(_DWORD *)a4 = v7;
  return result;
}
// 183D8: could not find valid save-restore pair for ebp

//----- (0001843C) --------------------------------------------------------
NTSTATUS __userpurge HidIrReadRegULongOrULongLong@<eax>(int a1@<ebp>, void *a2, const WCHAR *a3, int a4)
{
  NTSTATUS result; // eax@1
  int v5; // edx@3
  int v6; // [sp-64h] [bp-6Ch]@1
  int v7; // [sp-5Ch] [bp-64h]@2
  int v8; // [sp-58h] [bp-60h]@3
  int v9; // [sp-54h] [bp-5Ch]@5
  int v10; // [sp-10h] [bp-18h]@1
  int v11; // [sp-8h] [bp-10h]@1
  int v12; // [sp-4h] [bp-Ch]@1
  int v13; // [sp+0h] [bp-8h]@1
  int retaddr; // [sp+8h] [bp+0h]@1

  v12 = a1;
  v13 = retaddr;
  RtlInitUnicodeString((PUNICODE_STRING)&v10, a3);
  v11 = 0;
  result = ZwQueryValueKey(a2, (PUNICODE_STRING)&v10, KeyValuePartialInformation, &v6, 0x50u, (PULONG)&v11);
  if ( result >= 0 )
  {
    if ( v7 == 4 )
    {
      v5 = v8;
      *(_DWORD *)(a4 + 4) = 0;
      *(_DWORD *)a4 = v5;
    }
    else if ( v7 == 8 )
    {
      *(_DWORD *)a4 = v8;
      *(_DWORD *)(a4 + 4) = v9;
    }
  }
  return result;
}
// 1843C: could not find valid save-restore pair for ebp

//----- (000184BA) --------------------------------------------------------
int __stdcall HidIrStopDevice(int a1)
{
  void *v1; // eax@1
  int v2; // ecx@5
  int v3; // esi@5

  v1 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
  {
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 79, (int)dword_1612C);
    v1 = WPP_GLOBAL_Control;
  }
  v2 = *(_DWORD *)(a1 + 40);
  v3 = *(_DWORD *)(v2 + 8);
  if ( v1 != &WPP_GLOBAL_Control && *((_BYTE *)v1 + 32) & 2 && *((_BYTE *)v1 + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)v1 + 4), *((_DWORD *)v1 + 5), 80, (int)dword_1612C, *(_DWORD *)(v2 + 8));
  *(_DWORD *)v3 = 3;
  HidIrDecrementPendingRequestCount(v3);
  KeWaitForSingleObject((PVOID)(v3 + 8), 0, 0, 0, 0);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 81, (int)dword_1612C, 0);
  return 0;
}
// 1612C: using guessed type int dword_1612C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00018572) --------------------------------------------------------
void __stdcall HidIrFreeResources(int a1)
{
  if ( *(_DWORD *)(a1 + 40) )
  {
    ExFreePool(*(PVOID *)(a1 + 40));
    *(_DWORD *)(a1 + 40) = 0;
  }
  sub_11EF0(a1);
  *(_BYTE *)(a1 + 165) = 0;
  *(_BYTE *)(a1 + 167) = 0;
}

//----- (000185AA) --------------------------------------------------------
int __stdcall HidIrStopCompletion(int a1, int a2)
{
  void *v2; // eax@1
  int v3; // ecx@5
  int v4; // ebx@5
  int v6; // [sp+18h] [bp+Ch]@9

  v2 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
  {
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 82, (int)dword_1612C);
    v2 = WPP_GLOBAL_Control;
  }
  v3 = *(_DWORD *)(a1 + 40);
  v4 = *(_DWORD *)(v3 + 8);
  if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 32) & 2 && *((_BYTE *)v2 + 29) >= 4u )
  {
    WPP_SF_q(*((_DWORD *)v2 + 4), *((_DWORD *)v2 + 5), 83, (int)dword_1612C, *(_DWORD *)(v3 + 8));
    v2 = WPP_GLOBAL_Control;
  }
  v6 = *(_DWORD *)(a2 + 24);
  if ( v6 < 0 )
  {
    if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 32) & 2 && *((_BYTE *)v2 + 29) >= 2u )
      WPP_SF_q(*((_DWORD *)v2 + 4), *((_DWORD *)v2 + 5), 85, (int)dword_1612C, a1);
  }
  else if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 32) & 2 && *((_BYTE *)v2 + 29) >= 4u )
  {
    WPP_SF_q(*((_DWORD *)v2 + 4), *((_DWORD *)v2 + 5), 84, (int)dword_1612C, a1);
  }
  HidIrFreeResources(v4);
  *(_DWORD *)v4 = 4;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 86, (int)dword_1612C, v6);
  return v6;
}
// 1612C: using guessed type int dword_1612C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00018698) --------------------------------------------------------
int __stdcall HidIrCleanupDevice(int a1)
{
  int v1; // edi@5
  int v2; // esi@5
  int v3; // ebx@5
  PVOID v4; // eax@5
  PVOID v6; // [sp+8h] [bp+8h]@5

  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 87, (int)dword_1612C);
  v1 = a1;
  v2 = *(_DWORD *)(*(_DWORD *)(a1 + 40) + 8);
  v3 = *(_DWORD *)v2;
  *(_DWORD *)v2 = 5;
  v4 = IoGetDriverObjectExtension(*(PDRIVER_OBJECT *)(a1 + 8), (PVOID)0x68694465);
  v6 = v4;
  if ( v3 == 2 )
  {
    HidIrDecrementPendingRequestCount(v2);
    v4 = v6;
  }
  if ( *((_DWORD *)v4 + 4) == v1 )
    *((_DWORD *)v4 + 4) = 0;
  return 0;
}
// 1612C: using guessed type int dword_1612C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00018712) --------------------------------------------------------
int __stdcall HidIrRemoveDevice(int a1)
{
  void *v1; // eax@1
  int v2; // ecx@5
  int v3; // esi@5

  v1 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
  {
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 88, (int)dword_1612C);
    v1 = WPP_GLOBAL_Control;
  }
  v2 = *(_DWORD *)(a1 + 40);
  v3 = *(_DWORD *)(v2 + 8);
  if ( v1 != &WPP_GLOBAL_Control && *((_BYTE *)v1 + 32) & 2 && *((_BYTE *)v1 + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)v1 + 4), *((_DWORD *)v1 + 5), 89, (int)dword_1612C, *(_DWORD *)(v2 + 8));
  HidIrCleanupDevice(a1);
  KeWaitForSingleObject((PVOID)(v3 + 8), 0, 0, 0, 0);
  KeCancelTimer((PKTIMER)(v3 + 200));
  HidIrFreeResources(v3);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 90, (int)dword_1612C, 0);
  return 0;
}
// 1612C: using guessed type int dword_1612C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (000187D6) --------------------------------------------------------
size_t __stdcall HidIrReadDecoderCfg(HANDLE KeyHandle, size_t a2, PVOID a3, int a4)
{
  int v4; // ebp@0
  size_t v5; // esi@1
  int v7; // ebx@3
  int v8; // edi@5
  PVOID v9; // edi@6
  __int16 v10; // ax@6
  PVOID v11; // edi@30
  PVOID v12; // eax@31
  int v13; // eax@52
  int v14; // eax@66
  int v15; // eax@73
  NTSTATUS v16; // eax@75
  bool v17; // sf@75
  int v18; // eax@75
  PVOID v19; // edx@144
  int v20; // ecx@144
  int v21; // eax@161
  int v22; // ecx@161
  PVOID v23; // edx@181
  int v24; // ecx@181
  int v25; // eax@198
  int v26; // ecx@198
  OBJECT_ATTRIBUTES ObjectAttributes; // [sp+4h] [bp-40h]@6
  UNICODE_STRING DestinationString; // [sp+1Ch] [bp-28h]@31
  __int16 v29; // [sp+24h] [bp-20h]@6
  __int16 v30; // [sp+26h] [bp-1Eh]@6
  char *v31; // [sp+28h] [bp-1Ch]@6
  UNICODE_STRING String; // [sp+2Ch] [bp-18h]@30
  UNICODE_STRING Destination; // [sp+34h] [bp-10h]@30
  PVOID P; // [sp+3Ch] [bp-8h]@5
  int v35; // [sp+40h] [bp-4h]@12

  v5 = a2;
  if ( (unsigned __int16)a3 >= *(_WORD *)(a2 + 58) )
    return -1073741811;
  v7 = 4 * (unsigned __int16)a3;
  *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) = ExAllocatePoolWithTag(0, 0x90u, 0x49646948u);
  if ( !*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) )
    return -1073741670;
  memset(*(void **)(v7 + *(_DWORD *)(v5 + 60)), 0, 0x90u);
  v8 = *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 48;
  *(_DWORD *)v8 = -1;
  v8 += 4;
  *(_DWORD *)v8 = -1;
  v8 += 4;
  *(_DWORD *)v8 = -1;
  *(_DWORD *)(v8 + 4) = -1;
  a2 = HidIrEnumKeyInfo(KeyHandle, (__int16)a3, (int)&P);
  if ( (a2 & 0x80000000) != 0 )
    goto LABEL_228;
  v9 = P;
  v10 = *((_WORD *)P + 6);
  ObjectAttributes.SecurityDescriptor = 0;
  ObjectAttributes.SecurityQualityOfService = 0;
  v29 = v10;
  v30 = v10;
  v31 = (char *)P + 16;
  ObjectAttributes.RootDirectory = KeyHandle;
  ObjectAttributes.ObjectName = (PUNICODE_STRING)&v29;
  ObjectAttributes.Length = 24;
  ObjectAttributes.Attributes = 576;
  a2 = ZwOpenKey(&KeyHandle, 0x20019u, &ObjectAttributes);
  ExFreePool(v9);
  if ( (a2 & 0x80000000) != 0 )
    goto LABEL_228;
  *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 100) = 0x7FFF;
  if ( HidIrReadRegULong(v4, KeyHandle, L"Priority", *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 100) >= 0
    && WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_q(
      *((_DWORD *)WPP_GLOBAL_Control + 4),
      *((_DWORD *)WPP_GLOBAL_Control + 5),
      32,
      (int)dword_1612C,
      *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 100));
  if ( HidIrReadRegULong(v4, KeyHandle, L"Enabled", (int)&v35) >= 0 && !v35 )
  {
    a2 = -1073741823;
    goto LABEL_227;
  }
  a2 = HidIrReadRegULong(v4, KeyHandle, L"DecoderID", *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)));
  if ( (a2 & 0x80000000) == 0 )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
      WPP_SF_q(
        *((_DWORD *)WPP_GLOBAL_Control + 4),
        *((_DWORD *)WPP_GLOBAL_Control + 5),
        33,
        (int)dword_1612C,
        **(_DWORD **)(v7 + *(_DWORD *)(v5 + 60)));
    a2 = HidIrReadRegULong(v4, KeyHandle, L"CodeSetID", *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 4);
    if ( (a2 & 0x80000000) == 0 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_q(
          *((_DWORD *)WPP_GLOBAL_Control + 4),
          *((_DWORD *)WPP_GLOBAL_Control + 5),
          34,
          (int)dword_1612C,
          *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 4));
      a2 = HidIrReadRegULong(v4, KeyHandle, L"CodeBitLen", *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 8);
      if ( (a2 & 0x80000000) == 0 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
          WPP_SF_q(
            *((_DWORD *)WPP_GLOBAL_Control + 4),
            *((_DWORD *)WPP_GLOBAL_Control + 5),
            35,
            (int)dword_1612C,
            *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 8));
        String.Buffer = 0;
        v11 = ExAllocatePoolWithTag(PagedPool, 0x1Eu, 0x49646948u);
        Destination.Buffer = (PWSTR)v11;
        if ( v11
          && (memset(v11, 0, 0x1Cu),
              *((_WORD *)v11 + 14) = 0,
              Destination.MaximumLength = 30,
              Destination.Length = 0,
              RtlInitUnicodeString(&DestinationString, L"CodeSetNum"),
              v12 = ExAllocatePoolWithTag(PagedPool, 6u, 0x49646948u),
              (String.Buffer = (PWSTR)v12) != 0) )
        {
          *(_DWORD *)v12 = 0;
          *((_WORD *)v12 + 2) = 0;
          String.MaximumLength = 6;
          String.Length = 0;
        }
        else
        {
          a2 = -1073741670;
        }
        P = 0;
        do
        {
          if ( (a2 & 0x80000000) != 0 )
            break;
          RtlCopyUnicodeString(&Destination, &DestinationString);
          RtlIntegerToUnicodeString((unsigned __int16)P, 0xAu, &String);
          a2 = RtlAppendUnicodeStringToString(&Destination, &String);
          if ( (a2 & 0x80000000) == 0 )
          {
            a2 = HidIrReadRegULong(
                   v4,
                   KeyHandle,
                   Destination.Buffer,
                   4 * (unsigned __int16)P + 48 + *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)));
            if ( (a2 & 0x80000000) == 0
              && WPP_GLOBAL_Control != &WPP_GLOBAL_Control
              && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
              && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
              WPP_SF_dd(
                *((_DWORD *)WPP_GLOBAL_Control + 4),
                *((_DWORD *)WPP_GLOBAL_Control + 5),
                36,
                (int)dword_1612C,
                (unsigned __int16)P,
                *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 4 * (unsigned __int16)P + 48));
          }
          P = (char *)P + 1;
        }
        while ( (unsigned __int16)P < 4u );
        if ( Destination.Buffer )
          ExFreePool(Destination.Buffer);
        if ( String.Buffer )
          ExFreePool(String.Buffer);
        a2 = HidIrReadRegULong(v4, KeyHandle, L"EnableDebounce", (int)&v35);
        if ( (a2 & 0x80000000) != 0 )
        {
          v13 = *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60));
          a2 = 0;
          *(_BYTE *)(v13 + 97) = 0;
        }
        else
        {
          *(_BYTE *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 97) = v35 != 0;
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
            && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
            && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
            WPP_SF_q(
              *((_DWORD *)WPP_GLOBAL_Control + 4),
              *((_DWORD *)WPP_GLOBAL_Control + 5),
              37,
              (int)dword_1612C,
              *(_BYTE *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 97));
        }
        if ( (a2 & 0x80000000) == 0 )
        {
          a2 = HidIrReadRegULong(v4, KeyHandle, L"ForceUniqueReport", (int)&v35);
          if ( (a2 & 0x80000000) != 0 )
          {
            *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 136) = 0;
            a2 = 0;
          }
          else
          {
            *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 136) = v35 != 0;
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
              && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
              && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
              WPP_SF_q(
                *((_DWORD *)WPP_GLOBAL_Control + 4),
                *((_DWORD *)WPP_GLOBAL_Control + 5),
                38,
                (int)dword_1612C,
                *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 136));
          }
          if ( (a2 & 0x80000000) == 0 )
          {
            a2 = HidIrReadRegULong(v4, KeyHandle, L"DataSwapBytes", (int)&v35);
            if ( (a2 & 0x80000000) != 0 )
            {
              v14 = *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60));
              a2 = 0;
              *(_BYTE *)(v14 + 44) = 0;
            }
            else
            {
              *(_BYTE *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 44) = v35 != 0;
              if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
                WPP_SF_q(
                  *((_DWORD *)WPP_GLOBAL_Control + 4),
                  *((_DWORD *)WPP_GLOBAL_Control + 5),
                  39,
                  (int)dword_1612C,
                  *(_BYTE *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 44));
            }
            if ( (a2 & 0x80000000) == 0 )
            {
              a2 = HidIrReadRegULong(v4, KeyHandle, L"EnableVendorPassThrough", (int)&v35);
              if ( (a2 & 0x80000000) != 0 )
              {
                v15 = *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60));
                a2 = 0;
                *(_BYTE *)(v15 + 98) = 0;
              }
              else
              {
                *(_BYTE *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 98) = v35 != 0;
                if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                  && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                  && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
                  WPP_SF_q(
                    *((_DWORD *)WPP_GLOBAL_Control + 4),
                    *((_DWORD *)WPP_GLOBAL_Control + 5),
                    40,
                    (int)dword_1612C,
                    *(_BYTE *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 98));
              }
              if ( (a2 & 0x80000000) == 0 )
              {
                v16 = HidIrReadRegULong(v4, KeyHandle, L"EnablePassThrough", (int)&v35);
                a2 = v16;
                v17 = v16 < 0;
                v18 = *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60));
                if ( v17 )
                {
                  *(_DWORD *)(v18 + 104) = 0;
                  a2 = 0;
                }
                else
                {
                  *(_DWORD *)(v18 + 104) = v35;
                  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
                    WPP_SF_q(
                      *((_DWORD *)WPP_GLOBAL_Control + 4),
                      *((_DWORD *)WPP_GLOBAL_Control + 5),
                      41,
                      (int)dword_1612C,
                      *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 104));
                  if ( v35 )
                  {
                    *(_BYTE *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 98) = 1;
                    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
                      WPP_SF_q(
                        *((_DWORD *)WPP_GLOBAL_Control + 4),
                        *((_DWORD *)WPP_GLOBAL_Control + 5),
                        42,
                        (int)dword_1612C,
                        *(_BYTE *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 98));
                  }
                }
                if ( (a2 & 0x80000000) == 0 )
                {
                  a2 = HidIrReadRegULong(v4, KeyHandle, L"ReportLength", (int)&v35);
                  if ( (a2 & 0x80000000) == 0 )
                  {
                    *(_WORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 86) = v35;
                    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
                      WPP_SF_q(
                        *((_DWORD *)WPP_GLOBAL_Control + 4),
                        *((_DWORD *)WPP_GLOBAL_Control + 5),
                        43,
                        (int)dword_1612C,
                        *(_WORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 86));
                    if ( HidIrReadRegULongOrULongLong(
                           v4,
                           KeyHandle,
                           L"CodeMatchMask",
                           *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 16) >= 0
                      && WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
                      WPP_SF_x(
                        *((_DWORD *)WPP_GLOBAL_Control + 4),
                        *((_DWORD *)WPP_GLOBAL_Control + 5),
                        44,
                        (int)dword_1612C,
                        *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 16),
                        *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 20));
                    if ( HidIrReadRegULongOrULongLong(
                           v4,
                           KeyHandle,
                           L"CodeMatchValue",
                           *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 24) >= 0
                      && WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
                      WPP_SF_x(
                        *((_DWORD *)WPP_GLOBAL_Control + 4),
                        *((_DWORD *)WPP_GLOBAL_Control + 5),
                        45,
                        (int)dword_1612C,
                        *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 24),
                        *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 28));
                    if ( HidIrReadRegULongOrULongLong(
                           v4,
                           KeyHandle,
                           L"DataMask",
                           *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 32) >= 0
                      && WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
                      WPP_SF_x(
                        *((_DWORD *)WPP_GLOBAL_Control + 4),
                        *((_DWORD *)WPP_GLOBAL_Control + 5),
                        46,
                        (int)dword_1612C,
                        *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 32),
                        *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 36));
                    if ( HidIrReadRegULong(v4, KeyHandle, L"DataShiftBits", *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 40) >= 0
                      && WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
                      WPP_SF_q(
                        *((_DWORD *)WPP_GLOBAL_Control + 4),
                        *((_DWORD *)WPP_GLOBAL_Control + 5),
                        47,
                        (int)dword_1612C,
                        *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 40));
                    if ( HidIrReadRegULongOrULongLong(
                           v4,
                           KeyHandle,
                           L"CodeSetNumMask",
                           *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 64) >= 0
                      && WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
                      WPP_SF_x(
                        *((_DWORD *)WPP_GLOBAL_Control + 4),
                        *((_DWORD *)WPP_GLOBAL_Control + 5),
                        48,
                        (int)dword_1612C,
                        *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 64),
                        *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 68));
                    a2 = HidIrReadRegULong(
                           v4,
                           KeyHandle,
                           L"CodeSetNumShiftBits",
                           *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 72);
                    if ( (a2 & 0x80000000) == 0 )
                    {
                      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
                        WPP_SF_q(
                          *((_DWORD *)WPP_GLOBAL_Control + 4),
                          *((_DWORD *)WPP_GLOBAL_Control + 5),
                          49,
                          (int)dword_1612C,
                          *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 72));
                      P = 0;
                      a2 = HidIrReadRegULong(v4, KeyHandle, L"CheckSumOperation", (int)&P);
                      if ( (a2 & 0x80000000) != 0 )
                      {
                        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
                          WPP_SF_q(
                            *((_DWORD *)WPP_GLOBAL_Control + 4),
                            *((_DWORD *)WPP_GLOBAL_Control + 5),
                            52,
                            (int)dword_1612C,
                            0);
                        *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 108) = 0;
                        a2 = 0;
                      }
                      else if ( (unsigned int)P >= 4 )
                      {
                        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
                          WPP_SF_(
                            *((_DWORD *)WPP_GLOBAL_Control + 4),
                            *((_DWORD *)WPP_GLOBAL_Control + 5),
                            51,
                            (int)dword_1612C);
                        a2 = -1073741823;
                      }
                      else
                      {
                        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
                          WPP_SF_q(
                            *((_DWORD *)WPP_GLOBAL_Control + 4),
                            *((_DWORD *)WPP_GLOBAL_Control + 5),
                            50,
                            (int)dword_1612C,
                            (int)P);
                        *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 108) = P;
                      }
                      if ( (a2 & 0x80000000) == 0 )
                      {
                        if ( !*(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 108) )
                          goto LABEL_158;
                        a2 = HidIrQueryDeviceKey(KeyHandle, L"CheckSumWordsMasks", (int)&P, (int)&v35);
                        if ( (a2 & 0x80000000) != 0 )
                        {
                          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                            && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                            && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
                            WPP_SF_(
                              *((_DWORD *)WPP_GLOBAL_Control + 4),
                              *((_DWORD *)WPP_GLOBAL_Control + 5),
                              55,
                              (int)dword_1612C);
                        }
                        else
                        {
                          if ( v35 && !(v35 & 7) )
                          {
                            v19 = P;
                            v20 = (unsigned int)v35 >> 3;
                            *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 120) = (unsigned int)v35 >> 3;
                            *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 112) = v19;
                            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                              && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                              && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
                              WPP_SF_q(
                                *((_DWORD *)WPP_GLOBAL_Control + 4),
                                *((_DWORD *)WPP_GLOBAL_Control + 5),
                                53,
                                (int)dword_1612C,
                                v20);
LABEL_158:
                            if ( (a2 & 0x80000000) != 0 )
                              goto LABEL_227;
                            if ( *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 108) )
                            {
                              a2 = HidIrQueryDeviceKey(KeyHandle, L"CheckSumWordsShiftBits", (int)&P, (int)&v35);
                              if ( (a2 & 0x80000000) != 0 )
                              {
                                if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                                  && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                                  && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
                                  WPP_SF_(
                                    *((_DWORD *)WPP_GLOBAL_Control + 4),
                                    *((_DWORD *)WPP_GLOBAL_Control + 5),
                                    58,
                                    (int)dword_1612C);
                              }
                              else
                              {
                                v21 = *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60));
                                v22 = v35;
                                if ( v35 == *(_DWORD *)(v21 + 120) )
                                {
                                  *(_DWORD *)(v21 + 116) = P;
                                  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                                    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                                    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
                                    WPP_SF_q(
                                      *((_DWORD *)WPP_GLOBAL_Control + 4),
                                      *((_DWORD *)WPP_GLOBAL_Control + 5),
                                      56,
                                      (int)dword_1612C,
                                      v22);
                                  goto LABEL_176;
                                }
                                if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                                  && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                                  && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
                                  WPP_SF_(
                                    *((_DWORD *)WPP_GLOBAL_Control + 4),
                                    *((_DWORD *)WPP_GLOBAL_Control + 5),
                                    57,
                                    (int)dword_1612C);
                                ExFreePool(P);
                              }
                              a2 = -1073741762;
                            }
LABEL_176:
                            if ( (a2 & 0x80000000) != 0 )
                              goto LABEL_227;
                            if ( *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 108) )
                            {
                              a2 = HidIrQueryDeviceKey(KeyHandle, L"CheckSumResultsMasks", (int)&P, (int)&v35);
                              if ( (a2 & 0x80000000) != 0 )
                              {
                                if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                                  && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                                  && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
                                  WPP_SF_(
                                    *((_DWORD *)WPP_GLOBAL_Control + 4),
                                    *((_DWORD *)WPP_GLOBAL_Control + 5),
                                    61,
                                    (int)dword_1612C);
                              }
                              else
                              {
                                if ( v35 && !(v35 & 7) )
                                {
                                  v23 = P;
                                  v24 = (unsigned int)v35 >> 3;
                                  *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 132) = (unsigned int)v35 >> 3;
                                  *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 124) = v23;
                                  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                                    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                                    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
                                    WPP_SF_q(
                                      *((_DWORD *)WPP_GLOBAL_Control + 4),
                                      *((_DWORD *)WPP_GLOBAL_Control + 5),
                                      59,
                                      (int)dword_1612C,
                                      v24);
                                  goto LABEL_195;
                                }
                                if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                                  && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                                  && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
                                  WPP_SF_(
                                    *((_DWORD *)WPP_GLOBAL_Control + 4),
                                    *((_DWORD *)WPP_GLOBAL_Control + 5),
                                    60,
                                    (int)dword_1612C);
                                ExFreePool(P);
                              }
                              a2 = -1073741762;
                            }
LABEL_195:
                            if ( (a2 & 0x80000000) != 0 )
                              goto LABEL_227;
                            if ( !*(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 108) )
                              goto LABEL_213;
                            a2 = HidIrQueryDeviceKey(KeyHandle, L"CheckSumResultsShiftBits", (int)&P, (int)&v35);
                            if ( (a2 & 0x80000000) != 0 )
                            {
                              if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                                && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                                && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
                                WPP_SF_(
                                  *((_DWORD *)WPP_GLOBAL_Control + 4),
                                  *((_DWORD *)WPP_GLOBAL_Control + 5),
                                  64,
                                  (int)dword_1612C);
                            }
                            else
                            {
                              v25 = *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60));
                              v26 = v35;
                              if ( v35 == *(_DWORD *)(v25 + 132) )
                              {
                                *(_DWORD *)(v25 + 128) = P;
                                if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                                  && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                                  && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
                                  WPP_SF_q(
                                    *((_DWORD *)WPP_GLOBAL_Control + 4),
                                    *((_DWORD *)WPP_GLOBAL_Control + 5),
                                    62,
                                    (int)dword_1612C,
                                    v26);
                                goto LABEL_213;
                              }
                              if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                                && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                                && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
                                WPP_SF_(
                                  *((_DWORD *)WPP_GLOBAL_Control + 4),
                                  *((_DWORD *)WPP_GLOBAL_Control + 5),
                                  63,
                                  (int)dword_1612C);
                              ExFreePool(P);
                            }
                            a2 = -1073741762;
LABEL_213:
                            if ( (a2 & 0x80000000) == 0 )
                            {
                              a2 = HidIrReadBaseReportMappingTables(v5, (int)a3, KeyHandle);
                              if ( (a2 & 0x80000000) == 0 )
                              {
                                a2 = HidIrReadAdditionalReportMappings(v5, (int)a3, (int)KeyHandle);
                                if ( (a2 & 0x80000000) == 0 )
                                {
                                  a2 = HidIrQueryDeviceKey(KeyHandle, L"ReportDescriptor", (int)&a3, (int)&P);
                                  if ( (a2 & 0x80000000) == 0 )
                                  {
                                    a2 = MergeReportDescriptors(
                                           *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)),
                                           a4,
                                           (int)a3,
                                           (unsigned __int16)P);
                                    ExFreePool(a3);
                                  }
                                }
                                else if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                                       && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                                       && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
                                {
                                  WPP_SF_(
                                    *((_DWORD *)WPP_GLOBAL_Control + 4),
                                    *((_DWORD *)WPP_GLOBAL_Control + 5),
                                    66,
                                    (int)dword_1612C);
                                }
                              }
                              else if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                                     && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                                     && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
                              {
                                WPP_SF_(
                                  *((_DWORD *)WPP_GLOBAL_Control + 4),
                                  *((_DWORD *)WPP_GLOBAL_Control + 5),
                                  65,
                                  (int)dword_1612C);
                              }
                            }
                            goto LABEL_227;
                          }
                          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                            && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
                            && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
                            WPP_SF_(
                              *((_DWORD *)WPP_GLOBAL_Control + 4),
                              *((_DWORD *)WPP_GLOBAL_Control + 5),
                              54,
                              (int)dword_1612C);
                          ExFreePool(P);
                        }
                        a2 = -1073741762;
                        goto LABEL_158;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_227:
  ZwClose(KeyHandle);
  if ( (a2 & 0x80000000) != 0 )
  {
LABEL_228:
    if ( *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 76) )
    {
      ExFreePool(*(PVOID *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 76));
      *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 76) = 0;
    }
    if ( *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 112) )
    {
      ExFreePool(*(PVOID *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 112));
      *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 112) = 0;
    }
    if ( *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 116) )
    {
      ExFreePool(*(PVOID *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 116));
      *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 116) = 0;
    }
    if ( *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 124) )
    {
      ExFreePool(*(PVOID *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 124));
      *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 124) = 0;
    }
    if ( *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 128) )
    {
      ExFreePool(*(PVOID *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 128));
      *(_DWORD *)(*(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) + 128) = 0;
    }
    ExFreePool(*(PVOID *)(v7 + *(_DWORD *)(v5 + 60)));
    *(_DWORD *)(v7 + *(_DWORD *)(v5 + 60)) = 0;
  }
  return a2;
}
// 1612C: using guessed type int dword_1612C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;
// 1ACFC: using guessed type wchar_t aChecksumoperat[18];
// 1AD20: using guessed type wchar_t aCodesetnumshif[20];
// 1AD48: using guessed type wchar_t aCodesetnummask[15];
// 1AD66: using guessed type wchar_t aDatashiftbits[14];
// 1AD82: using guessed type wchar_t aDatamask[9];
// 1AD94: using guessed type wchar_t aCodematchvalue[15];
// 1ADB2: using guessed type wchar_t aCodematchmask[14];
// 1ADCE: using guessed type wchar_t aReportlength[13];
// 1ADE8: using guessed type wchar_t aEnablepassthro[18];
// 1AE0C: using guessed type wchar_t aEnablevendorpa[24];
// 1AE3C: using guessed type wchar_t aDataswapbytes[14];
// 1AE58: using guessed type wchar_t aForceuniquerep[18];
// 1AE7C: using guessed type wchar_t aEnabledebounce[15];
// 1AEB0: using guessed type wchar_t aCodebitlen[11];
// 1AEC6: using guessed type wchar_t aCodesetid[10];
// 1AEDA: using guessed type wchar_t aDecoderid[10];
// 1AEEE: using guessed type wchar_t aEnabled[8];
// 1AEFE: using guessed type wchar_t aPriority[9];

//----- (000195DA) --------------------------------------------------------
NTSTATUS __stdcall HidIrReadAllDecoderCfg(HANDLE KeyHandle, size_t a2)
{
  PVOID v2; // eax@1
  size_t v3; // esi@1
  PVOID v4; // edi@1
  PVOID v5; // ST10_4@5
  PVOID v6; // eax@9
  int v7; // edi@10
  int i; // edi@19
  int v9; // eax@20
  unsigned int v10; // ecx@21
  unsigned __int8 v11; // cl@23
  PVOID v12; // eax@31
  int v13; // eax@31
  char *v14; // edi@33
  int v15; // edi@50
  void *v16; // eax@50
  NTSTATUS result; // eax@53
  PVOID P; // [sp+Ch] [bp-Ch]@3
  SIZE_T NumberOfBytes; // [sp+10h] [bp-8h]@1
  int v20; // [sp+14h] [bp-4h]@1
  int KeyHandlea; // [sp+20h] [bp+8h]@31
  NTSTATUS v22; // [sp+24h] [bp+Ch]@3

  NumberOfBytes = 0;
  v20 = 0;
  v2 = ExAllocatePoolWithTag(PagedPool, 0x214u, 0x49646948u);
  v3 = a2;
  v4 = v2;
  if ( v2 )
  {
    memset(v2, 0, 0x214u);
    *((_DWORD *)v4 + 3) = 0;
    *(_WORD *)v4 = -68;
    *((_WORD *)v4 + 1) = 137;
    *((_DWORD *)v4 + 1) = 1;
    *((_DWORD *)v4 + 4) = 1;
    *((_DWORD *)v4 + 6) = 1;
    *((_WORD *)v4 + 14) = 2;
    *((_DWORD *)v4 + 2) = 8;
    *((_WORD *)v4 + 10) = 1;
    *((_WORD *)v4 + 11) = 8;
    *((_BYTE *)v4 + 30) = GetAvailableReportId((int)&v20);
    *((_WORD *)v4 + 18) = 0;
    *((_WORD *)v4 + 24) = 0;
    *(_BYTE *)(a2 + 192) = *((_BYTE *)v4 + 30);
    *((_WORD *)v4 + 26) = -68;
    *((_DWORD *)v4 + 15) = 255;
    *((_DWORD *)v4 + 17) = 255;
    *((_WORD *)v4 + 36) = 8;
    *((_WORD *)v4 + 37) = 24;
    *((_WORD *)v4 + 40) = 0;
    *((_BYTE *)v4 + 82) = *((_BYTE *)v4 + 30);
    *((_WORD *)v4 + 27) = 137;
    *((_WORD *)v4 + 44) = 0;
    *((_WORD *)v4 + 50) = 0;
    *((_WORD *)v4 + 261) = 2;
    *((_WORD *)v4 + 262) = 192;
    *((_DWORD *)v4 + 14) = 0;
    *((_DWORD *)v4 + 16) = 0;
    *((_DWORD *)v4 + 19) = 0;
    *((_BYTE *)v4 + 520) = 1;
    *((_DWORD *)v4 + 132) = 0;
    v20 = (int)((char *)v4 + 528);
  }
  v22 = HidIrQueryKeyInfo(KeyHandle, (int)&P);
  if ( v22 >= 0 )
  {
    if ( *((_DWORD *)P + 5) > 0u )
    {
      v5 = P;
      *(_WORD *)(v3 + 58) = *((_WORD *)P + 10);
      ExFreePool(v5);
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_q(
          *((_DWORD *)WPP_GLOBAL_Control + 4),
          *((_DWORD *)WPP_GLOBAL_Control + 5),
          67,
          (int)dword_1612C,
          *(_WORD *)(v3 + 58));
      sub_11EF0(v3);
      v6 = ExAllocatePoolWithTag(0, 4 * *(_WORD *)(v3 + 58), 0x49646948u);
      *(_DWORD *)(v3 + 60) = v6;
      if ( v6 )
      {
        memset(v6, 0, 4 * *(_WORD *)(v3 + 58));
        v7 = 0;
        if ( *(_WORD *)(v3 + 58) > 0u )
        {
          do
            HidIrReadDecoderCfg(KeyHandle, v3, (PVOID)v7++, (int)&v20);
          while ( (unsigned __int16)v7 < *(_WORD *)(v3 + 58) );
        }
      }
      else
      {
        v22 = -1073741670;
      }
    }
    if ( v22 >= 0 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 68, (int)dword_1612C);
      HidIrSortDecodersByPriority(v3);
      *(_DWORD *)(v3 + 48) = 0;
      memset((void *)(v3 + 64), 0, 0x64u);
      for ( i = v20; i; i = *(_DWORD *)i )
      {
        v9 = i - 528;
        if ( i != 528 )
        {
          NumberOfBytes += 156 * (unsigned int)*(_WORD *)(v9 + 522) >> 1;
          v10 = (unsigned int)*(_WORD *)(v9 + 524) >> 3;
          if ( v10 > *(_DWORD *)(v3 + 48) )
            *(_DWORD *)(v3 + 48) = v10 + 1;
          v11 = *(_BYTE *)(v9 + 30);
          if ( *(_WORD *)(v9 + 522) > 0u && v11 < 0x32u )
            *(_WORD *)(v3 + 2 * v11 + 64) = *(_WORD *)(v9 + 524) >> 3;
        }
      }
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
        WPP_SF_q(
          *((_DWORD *)WPP_GLOBAL_Control + 4),
          *((_DWORD *)WPP_GLOBAL_Control + 5),
          69,
          (int)dword_1612C,
          *(_DWORD *)(v3 + 48));
      v12 = ExAllocatePoolWithTag(0, NumberOfBytes, 0x49646948u);
      *(_DWORD *)(v3 + 40) = v12;
      KeyHandlea = (int)v12;
      v13 = v20;
      NumberOfBytes = 0;
      while ( 1 )
      {
        P = (PVOID)v13;
        if ( !v13 )
          break;
        if ( !KeyHandlea )
          goto LABEL_45;
        v14 = (char *)P - 528;
        if ( P != (PVOID)528 )
        {
          KeyHandlea = HidParse_WriteReportCollection((int)((char *)P - 528), KeyHandlea, (int)&NumberOfBytes);
          if ( *((_WORD *)v14 + 261) > 0u && *(_WORD *)v14 == 1 && *((_WORD *)v14 + 1) == 128 )
          {
            *(_BYTE *)(v3 + 166) = v14[30];
            *(_BYTE *)(v3 + 165) = 1;
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
              && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x20
              && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
              WPP_SF_q(
                *((_DWORD *)WPP_GLOBAL_Control + 4),
                *((_DWORD *)WPP_GLOBAL_Control + 5),
                70,
                (int)dword_1612C,
                *(_BYTE *)(v3 + 166));
          }
        }
        v13 = *(_DWORD *)P;
      }
      if ( KeyHandlea )
      {
        *(_WORD *)(v3 + 35) = NumberOfBytes;
        goto LABEL_48;
      }
LABEL_45:
      if ( *(_DWORD *)(v3 + 40) )
      {
        ExFreePool(*(PVOID *)(v3 + 40));
        *(_DWORD *)(v3 + 40) = 0;
      }
      v22 = -1073741670;
LABEL_48:
      if ( v20 )
      {
        do
        {
          if ( !v20 )
            break;
          v15 = *(_DWORD *)v20;
          v16 = (void *)(v20 - 528);
          v20 = *(_DWORD *)v20;
          if ( v16 )
            ExFreePool(v16);
        }
        while ( v15 );
      }
    }
  }
  result = v22;
  *(_BYTE *)(v3 + 164) = 0;
  return result;
}
// 1612C: using guessed type int dword_1612C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (0001998C) --------------------------------------------------------
int __stdcall HidIrInitDevice(int a1)
{
  int v1; // ebp@0
  int v2; // eax@5
  size_t v3; // ebx@5
  int v4; // esi@5
  PVOID v5; // eax@8
  const UNICODE_STRING *v6; // esi@8
  OBJECT_ATTRIBUTES ObjectAttributes; // [sp+0h] [bp-2Ch]@11
  UNICODE_STRING DestinationString; // [sp+18h] [bp-14h]@1
  __int16 v10; // [sp+20h] [bp-Ch]@6
  HANDLE KeyHandle; // [sp+24h] [bp-8h]@1
  HANDLE DevInstRegKey; // [sp+28h] [bp-4h]@1

  DevInstRegKey = 0;
  KeyHandle = 0;
  DestinationString.MaximumLength = 0;
  DestinationString.Length = 0;
  DestinationString.Buffer = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 71, (int)dword_1612C);
  v2 = *(_DWORD *)(a1 + 40);
  v3 = *(_DWORD *)(v2 + 8);
  *(_DWORD *)(v3 + 28) = HidIrHidDescriptor[0];
  *(_DWORD *)(v3 + 32) = HidIrHidDescriptor[1];
  *(_BYTE *)(v3 + 36) = LOBYTE(HidIrHidDescriptor[2]);
  v4 = IoOpenDeviceRegistryKey(*(PDEVICE_OBJECT *)v2, 1u, 0x20000u, &DevInstRegKey);
  if ( v4 >= 0 )
  {
    v4 = HidIrReadRegULong(v1, DevInstRegKey, L"VendorID", (int)&v10);
    if ( v4 >= 0 )
    {
      *(_WORD *)(v3 + 52) = v10;
      v4 = HidIrReadRegULong(v1, DevInstRegKey, L"ProductID", (int)&v10);
      if ( v4 >= 0 )
      {
        *(_WORD *)(v3 + 54) = v10;
        v5 = IoGetDriverObjectExtension(*(PDRIVER_OBJECT *)(a1 + 8), (PVOID)0x68694465);
        v6 = (const UNICODE_STRING *)v5;
        if ( v5 )
        {
          DestinationString.MaximumLength = *(_WORD *)v5 + 18;
          DestinationString.Length = 0;
          DestinationString.Buffer = (PWSTR)ExAllocatePoolWithTag(0, DestinationString.MaximumLength, 0x49646948u);
          memset(DestinationString.Buffer, 0, DestinationString.MaximumLength);
          if ( DestinationString.Buffer )
          {
            RtlCopyUnicodeString(&DestinationString, v6);
            RtlAppendUnicodeToString(&DestinationString, L"\\Remotes");
            ObjectAttributes.ObjectName = &DestinationString;
            ObjectAttributes.Length = 24;
            ObjectAttributes.RootDirectory = 0;
            ObjectAttributes.Attributes = 576;
            ObjectAttributes.SecurityDescriptor = 0;
            ObjectAttributes.SecurityQualityOfService = 0;
            v4 = ZwOpenKey(&KeyHandle, 0x20019u, &ObjectAttributes);
            if ( v4 >= 0 )
            {
              v4 = HidIrReadAllDecoderCfg(KeyHandle, v3);
              if ( v4 >= 0 )
              {
                v4 = HidIrReadWakePatternConfigurationFromRegistry(v3);
                if ( v4 >= 0 )
                {
                  v4 = ProgramDeviceForWake(v3, 0);
                  if ( v4 < 0
                    && WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
                    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
                    WPP_SF_q(
                      *((_DWORD *)WPP_GLOBAL_Control + 4),
                      *((_DWORD *)WPP_GLOBAL_Control + 5),
                      73,
                      (int)dword_1612C,
                      v4);
                }
                else if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
                       && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
                       && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
                {
                  WPP_SF_q(
                    *((_DWORD *)WPP_GLOBAL_Control + 4),
                    *((_DWORD *)WPP_GLOBAL_Control + 5),
                    72,
                    (int)dword_1612C,
                    v4);
                }
              }
            }
          }
          else
          {
            v4 = -1073741670;
          }
        }
        else
        {
          v4 = -1073741823;
        }
      }
    }
  }
  if ( DestinationString.Buffer )
  {
    ExFreePool(DestinationString.Buffer);
    DestinationString.Buffer = 0;
  }
  if ( DevInstRegKey )
  {
    ZwClose(DevInstRegKey);
    DevInstRegKey = 0;
  }
  if ( KeyHandle )
    ZwClose(KeyHandle);
  return v4;
}
// 1612C: using guessed type int dword_1612C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;
// 17004: using guessed type int HidIrHidDescriptor[3];
// 1AF22: using guessed type wchar_t aProductid[10];
// 1AF36: using guessed type wchar_t aVendorid[9];

//----- (00019BB4) --------------------------------------------------------
int __stdcall HidIrStartCompletion(int a1, int a2)
{
  int v2; // edi@5
  void *v3; // eax@10
  int v5; // [sp+Ch] [bp-4h]@9

  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 74, (int)dword_1612C);
  v2 = *(_DWORD *)(*(_DWORD *)(a1 + 40) + 8);
  *(_DWORD *)v2 = 2;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 75, (int)dword_1612C, a1);
  v5 = HidIrInitDevice(a1);
  if ( v5 < 0 )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
      WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 77, (int)dword_1612C, a1);
    *(_DWORD *)v2 = 3;
    goto LABEL_19;
  }
  v3 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
    return v5;
  if ( *((_BYTE *)WPP_GLOBAL_Control + 32) & 2 && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
  {
    WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 76, (int)dword_1612C, a1);
LABEL_19:
    v3 = WPP_GLOBAL_Control;
  }
  if ( v3 != &WPP_GLOBAL_Control && *((_BYTE *)v3 + 32) & 2 && *((_BYTE *)v3 + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)v3 + 4), *((_DWORD *)v3 + 5), 78, (int)dword_1612C, v5);
  return v5;
}
// 1612C: using guessed type int dword_1612C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00019CB6) --------------------------------------------------------
int __stdcall HidIrPnP(int a1, PIRP Irp)
{
  int v2; // esi@1
  int v3; // ecx@1
  int v4; // edi@1
  int v5; // eax@11
  int v6; // esi@17
  char v7; // al@19
  int v9; // [sp+Ch] [bp-4h]@1

  v2 = a1;
  v3 = *(_DWORD *)(*(_DWORD *)(a1 + 40) + 8);
  v4 = *((_DWORD *)Irp + 24);
  v9 = *(_DWORD *)(*(_DWORD *)(a1 + 40) + 8);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
  {
    WPP_SF_Dqq(
      *((_DWORD *)WPP_GLOBAL_Control + 4),
      *((_DWORD *)WPP_GLOBAL_Control + 5),
      91,
      (int)dword_1612C,
      *(_BYTE *)(v4 + 1),
      a1,
      v3);
    v3 = v9;
  }
  if ( *(_BYTE *)(v4 + 1) )
  {
    if ( *(_BYTE *)(v4 + 1) == 1 )
    {
      *(_BYTE *)(v3 + 44) = 1;
      goto LABEL_19;
    }
    if ( *(_BYTE *)(v4 + 1) == 2 )
    {
      v5 = HidIrRemoveDevice(a1);
    }
    else
    {
      if ( *(_BYTE *)(v4 + 1) == 3 )
      {
        *(_BYTE *)(v3 + 44) = 0;
        goto LABEL_19;
      }
      if ( *(_BYTE *)(v4 + 1) == 4 )
      {
        v5 = HidIrStopDevice(a1);
      }
      else
      {
        if ( *(_BYTE *)(v4 + 1) != 23 )
          goto LABEL_19;
        v5 = HidIrCleanupDevice(a1);
      }
    }
  }
  else
  {
    v5 = HidIrStartDevice(a1);
  }
  v6 = v5;
  if ( v5 < 0 )
    goto LABEL_25;
  v2 = a1;
LABEL_19:
  v6 = HidIrCallDriverSynchronous(v2, Irp);
  v7 = *(_BYTE *)(v4 + 1);
  if ( v7 )
  {
    if ( v7 == 4 )
      v6 = HidIrStopCompletion(a1, (int)Irp);
  }
  else if ( v6 < 0 || (v6 = HidIrStartCompletion(a1, (int)Irp), *((_DWORD *)Irp + 6) = v6, v6 < 0) )
  {
    HidIrDecrementPendingRequestCount(v9);
  }
LABEL_25:
  *((_DWORD *)Irp + 6) = v6;
  IofCompleteRequest(Irp, 0);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 92, (int)dword_1612C, v6);
  return v6;
}
// 1612C: using guessed type int dword_1612C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00019DD8) --------------------------------------------------------
int __stdcall HidIrPower(int a1, PIRP Irp)
{
  int v2; // ebx@5
  int v3; // edi@5
  int v4; // esi@11

  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 10, (int)dword_1613C);
  v2 = *(_DWORD *)(*(_DWORD *)(a1 + 40) + 8);
  v3 = *((_DWORD *)Irp + 24);
  if ( *(_BYTE *)(v3 + 1) == 2 && *(_DWORD *)(v3 + 8) == 1 )
  {
    if ( *(_DWORD *)(v2 + 196) != 1 && *(_DWORD *)(v3 + 12) == 1 )
      KeSetTimer((PKTIMER)(v2 + 200), (LARGE_INTEGER)-50000000i64, 0);
    *(_DWORD *)(v2 + 196) = *(_DWORD *)(v3 + 12);
  }
  ++*((_BYTE *)Irp + 35);
  *((_DWORD *)Irp + 24) += 36;
  v4 = PoCallDriver(*(PDEVICE_OBJECT *)(*(_DWORD *)(a1 + 40) + 4), Irp);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 11, (int)dword_1613C, v4);
  return v4;
}
// 1613C: using guessed type int dword_1613C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (00019EAA) --------------------------------------------------------
int __stdcall WppLoadTracingSupport()
{
  int result; // eax@1
  UNICODE_STRING DestinationString; // [sp+8h] [bp-Ch]@1
  unsigned int v2; // [sp+10h] [bp-4h]@1

  v2 = 0;
  RtlInitUnicodeString(&DestinationString, L"PsGetVersion");
  pfnWppGetVersion = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD))MmGetSystemRoutineAddress(&DestinationString);
  RtlInitUnicodeString(&DestinationString, L"WmiTraceMessage");
  result = (int)MmGetSystemRoutineAddress(&DestinationString);
  pfnWppTraceMessage = (int (__cdecl *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))result;
  if ( result )
  {
    RtlInitUnicodeString(&DestinationString, L"WmiQueryTraceInformation");
    pfnWppQueryTraceInformation = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))MmGetSystemRoutineAddress(&DestinationString);
    result = (int)pfnWppGetVersion;
    WPPTraceSuite = 2;
    if ( pfnWppGetVersion )
      result = pfnWppGetVersion(&v2, 0, 0, 0);
    if ( v2 >= 6 )
    {
      RtlInitUnicodeString(&DestinationString, L"EtwRegisterClassicProvider");
      result = (int)MmGetSystemRoutineAddress(&DestinationString);
      pfnEtwRegisterClassicProvider = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))result;
      if ( result )
      {
        RtlInitUnicodeString(&DestinationString, L"EtwUnregister");
        result = (int)MmGetSystemRoutineAddress(&DestinationString);
        pfnEtwUnregister = (int (__fastcall *)(_DWORD, _DWORD, _DWORD, _DWORD))result;
        WPPTraceSuite = 4;
      }
    }
  }
  else
  {
    pfnWppTraceMessage = (int (__cdecl *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))W2kTraceMessage;
    WPPTraceSuite = 1;
  }
  return result;
}
// 17040: using guessed type int (__stdcall *pfnWppQueryTraceInformation)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 17044: using guessed type int (__cdecl *pfnWppTraceMessage)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 17048: using guessed type int (__fastcall *pfnEtwUnregister)(_DWORD, _DWORD, _DWORD, _DWORD);
// 1704C: using guessed type int (__stdcall *pfnEtwRegisterClassicProvider)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 17050: using guessed type int (__stdcall *pfnWppGetVersion)(_DWORD, _DWORD, _DWORD, _DWORD);
// 17054: using guessed type int WPPTraceSuite;

//----- (00019F88) --------------------------------------------------------
int __stdcall WppTraceCallback(int a1, int a2, size_t a3, void *a4, int a5, int a6)
{
  int v6; // eax@1
  void *v7; // edi@1
  int v8; // edx@2
  void *v9; // ebx@2
  int v10; // esi@2
  unsigned int v11; // ecx@3
  int v12; // ecx@4
  int v13; // esi@8
  char *v14; // edi@8
  int v15; // edx@9
  int v16; // esi@14
  size_t v17; // edi@14
  int v18; // esi@18
  void *v19; // ecx@19
  int v20; // eax@19
  int v21; // ebx@20
  int v22; // esi@21
  int v23; // esi@26
  void *v24; // edi@29
  char *v25; // ebx@29
  int v26; // edx@35
  int v27; // ecx@35
  int v29; // [sp+14h] [bp-4h]@1
  int v30; // [sp+14h] [bp-4h]@9
  int v31; // [sp+20h] [bp+8h]@14

  v6 = a6;
  v7 = 0;
  v29 = 0;
  *(_DWORD *)a6 = 0;
  switch ( (unsigned __int8)a1 )
  {
    case 8u:
      v8 = a5;
      v9 = a4;
      v10 = a5;
      if ( WPPTraceSuite != 1 || (v11 = *((_DWORD *)a4 + 4), v11 <= 1) )
      {
        v15 = *(_DWORD *)(a5 + 24);
        v30 = *(_DWORD *)(a5 + 24);
        do
        {
          v10 = *(_DWORD *)(v10 + 8);
          v7 = (char *)v7 + 1;
        }
        while ( v10 );
        a4 = v7;
        if ( (unsigned int)v7 > 0x3F )
          goto LABEL_12;
        if ( v15 )
        {
          v16 = 28 * (_DWORD)v7 + 20;
          v31 = *(_WORD *)v15 + v16 + 2;
          v17 = *(_WORD *)v15 + v16 + 2;
        }
        else
        {
          v16 = 0;
          v17 = 28 * (_DWORD)v7 + 20;
          v31 = v17;
        }
        if ( v17 > a3 )
        {
          v29 = -1073741789;
          if ( a3 >= 4 )
          {
            *(_DWORD *)v9 = v17;
LABEL_7:
            *(_DWORD *)v6 = 4;
            return v29;
          }
        }
        else
        {
          memset(v9, 0, a3);
          *((_DWORD *)v9 + 4) = a4;
          *(_DWORD *)v9 = v17;
          *((_DWORD *)v9 + 2) = v16;
          if ( v30 )
          {
            v18 = (int)((char *)v9 + v16);
            *(_WORD *)v18 = *(_WORD *)v30;
            memcpy((void *)(v18 + 2), *(const void **)(v30 + 4), *(_WORD *)v30);
          }
          v19 = a4;
          v20 = a5;
          if ( a4 )
          {
            v21 = (int)((char *)v9 + 36);
            do
            {
              v22 = *(_DWORD *)(v20 + 4);
              *(_DWORD *)(v21 - 16) = *(_DWORD *)v22;
              v22 += 4;
              *(_DWORD *)(v21 - 16 + 4) = *(_DWORD *)v22;
              v22 += 4;
              *(_DWORD *)(v21 - 16 + 8) = *(_DWORD *)v22;
              *(_DWORD *)(v21 - 16 + 12) = *(_DWORD *)(v22 + 4);
              *(_DWORD *)v21 = 528384;
              *(_DWORD *)(v20 + 32) = 0;
              v21 += 28;
              v19 = (char *)v19 - 1;
              *(_BYTE *)(v20 + 29) = 0;
              v20 = *(_DWORD *)(v20 + 8);
            }
            while ( v19 );
            v17 = v31;
          }
          v29 = 0;
          *(_DWORD *)a6 = v17;
        }
      }
      else
      {
        v12 = 28 * v11;
        if ( v12 + 20 > a3 )
        {
          v29 = -1073741789;
          if ( a3 < 4 )
            return v29;
          *(_DWORD *)a4 = v12 + 20;
          goto LABEL_7;
        }
        v13 = *(_DWORD *)(a5 + 4);
        v14 = (char *)a4 + v12 - 8;
        *(_DWORD *)v14 = *(_DWORD *)v13;
        v13 += 4;
        v14 += 4;
        *(_DWORD *)v14 = *(_DWORD *)v13;
        v13 += 4;
        v14 += 4;
        *(_DWORD *)v14 = *(_DWORD *)v13;
        *((_DWORD *)v14 + 1) = *(_DWORD *)(v13 + 4);
        *((_DWORD *)v9 + 7 * *((_DWORD *)v9 + 4) + 2) = 528384;
        *(_DWORD *)(v8 + 32) = 0;
        *(_BYTE *)(v8 + 29) = 0;
      }
      return v29;
    case 4u:
    case 5u:
      v23 = a5;
      if ( !a5 )
        goto LABEL_27;
      if ( a3 < 0x30 )
      {
LABEL_12:
        v29 = -1073741811;
      }
      else
      {
        v24 = a4;
        v25 = (char *)a4 + 24;
        do
        {
          if ( RtlCompareMemory(*(const void **)(v23 + 4), v25, 0x10u) == 16 )
            break;
          v23 = *(_DWORD *)(v23 + 8);
        }
        while ( v23 );
        if ( v23 )
        {
          v29 = 0;
          if ( (_BYTE)a1 == 5 )
          {
            *(_BYTE *)(v23 + 29) = 0;
            *(_DWORD *)(v23 + 32) = 0;
            *(_DWORD *)(v23 + 16) = 0;
            *(_DWORD *)(v23 + 20) = 0;
          }
          else
          {
            v26 = *((_DWORD *)v24 + 2);
            v27 = *((_DWORD *)v24 + 3);
            *(_DWORD *)(v23 + 16) = v26;
            *(_DWORD *)(v23 + 20) = v27;
            if ( WPPTraceSuite == 2 )
            {
              if ( !pfnWppQueryTraceInformation(3, &a3, 4, &a5, v24) )
                *(_BYTE *)(v23 + 29) = a3;
              v29 = pfnWppQueryTraceInformation(2, v23 + 32, 4, &a5, v24);
            }
            else
            {
              *(_DWORD *)(v23 + 32) = v27;
              *(_BYTE *)(v23 + 29) = BYTE2(v26);
            }
          }
        }
        else
        {
LABEL_27:
          v29 = -1073741163;
        }
      }
      return v29;
    case 6u:
    case 7u:
      return 0;
    default:
      return -1073741808;
  }
}
// 17040: using guessed type int (__stdcall *pfnWppQueryTraceInformation)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 17054: using guessed type int WPPTraceSuite;

//----- (0001A1E4) --------------------------------------------------------
NTSTATUS __stdcall WppInitKm(PDEVICE_OBJECT DeviceObject, int a2)
{
  int *v2; // esi@1
  int v3; // eax@3
  NTSTATUS result; // eax@3

  v2 = &WPP_MAIN_CB;
  if ( WPP_GLOBAL_Control != &WPP_MAIN_CB )
  {
    WPP_GLOBAL_Control = &WPP_MAIN_CB;
    if ( WPPTraceSuite == 4 )
    {
      do
      {
        v3 = (int)(v2 + 10);
        *(_DWORD *)v3 = 0;
        *(_DWORD *)(v3 + 4) = 0;
        result = pfnEtwRegisterClassicProvider(v2[1], 0, WppClassicProviderCallback, v2, v2 + 10);
        v2 = (int *)v2[2];
      }
      while ( v2 );
    }
    else if ( WPPTraceSuite == 2 )
    {
      WPP_MAIN_CB = (int)WppTraceCallback;
      result = IoWMIRegistrationControl((PDEVICE_OBJECT)&WPP_MAIN_CB, 0x80010001);
    }
    else
    {
      WPP_MAIN_CB = 0;
      result = IoWMIRegistrationControl(DeviceObject, 1u);
    }
  }
  return result;
}
// 1704C: invalid function type has been ignored
// 17000: using guessed type void *WPP_GLOBAL_Control;
// 1704C: using guessed type int (__stdcall *pfnEtwRegisterClassicProvider)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 17054: using guessed type int WPPTraceSuite;
// 17060: using guessed type int WPP_MAIN_CB;

//----- (0001A260) --------------------------------------------------------
void __stdcall WppCleanupKm(PDEVICE_OBJECT DeviceObject)
{
  void *v1; // esi@1

  v1 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
  {
    if ( WPPTraceSuite == 4 )
    {
      while ( v1 )
      {
        if ( *((_QWORD *)v1 + 5) )
          pfnEtwUnregister(
            *((_DWORD *)v1 + 11),
            *((_DWORD *)v1 + 11) | *((_DWORD *)v1 + 10),
            *((_DWORD *)v1 + 10),
            *((_DWORD *)v1 + 11));
        v1 = (void *)*((_DWORD *)v1 + 2);
      }
    }
    else if ( WPPTraceSuite == 2 )
    {
      IoWMIRegistrationControl((PDEVICE_OBJECT)WPP_GLOBAL_Control, 0x80000002);
    }
    else
    {
      IoWMIRegistrationControl(DeviceObject, 2u);
    }
    WPP_GLOBAL_Control = &WPP_GLOBAL_Control;
  }
}
// 17000: using guessed type void *WPP_GLOBAL_Control;
// 17048: using guessed type int (__fastcall *pfnEtwUnregister)(_DWORD, _DWORD, _DWORD, _DWORD);
// 17054: using guessed type int WPPTraceSuite;

//----- (0001A2C6) --------------------------------------------------------
signed int __stdcall HidIrGetHidDescriptor(int a1, int a2, unsigned __int16 a3)
{
  int v3; // eax@5
  size_t v4; // esi@5
  size_t v5; // ecx@7
  const void *v6; // eax@7
  void *v7; // ecx@13
  signed int result; // eax@14

  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 10, (int)dword_1616C, a3);
  v3 = *(_DWORD *)(*(_DWORD *)(a1 + 40) + 8);
  v4 = *(_DWORD *)(*(_DWORD *)(a2 + 96) + 4);
  if ( a3 == 33 )
  {
    v6 = (const void *)(v3 + 28);
    v5 = *(_BYTE *)v6;
  }
  else
  {
    if ( a3 != 34 )
      return -1073741823;
    v5 = *(_WORD *)(v3 + 35);
    v6 = *(const void **)(v3 + 40);
  }
  if ( !v5 || !v6 )
    return -1073741823;
  if ( v4 > v5 )
    v4 = v5;
  v7 = *(void **)(a2 + 60);
  if ( v7 )
  {
    memcpy(v7, v6, v4);
    *(_DWORD *)(a2 + 28) = v4;
    result = 0;
  }
  else
  {
    result = -1073741592;
  }
  return result;
}
// 1616C: using guessed type int dword_1616C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (0001A368) --------------------------------------------------------
signed int __stdcall HidIrGetDeviceAttributes(int a1, int a2)
{
  int v2; // eax@5
  int v3; // ecx@7
  signed int result; // eax@7

  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 4
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 11, (int)dword_1616C);
  v2 = *(_DWORD *)(a2 + 60);
  if ( v2 )
  {
    if ( *(_DWORD *)(*(_DWORD *)(a2 + 96) + 4) < 0x20u )
    {
      result = -1073741306;
    }
    else
    {
      v3 = *(_DWORD *)(*(_DWORD *)(a1 + 40) + 8);
      *(_DWORD *)(a2 + 28) = 32;
      *(_DWORD *)v2 = 32;
      *(_WORD *)(v2 + 4) = *(_WORD *)(v3 + 52);
      *(_WORD *)(v2 + 6) = *(_WORD *)(v3 + 54);
      *(_WORD *)(v2 + 8) = *(_WORD *)(v3 + 56);
      result = 0;
    }
  }
  else
  {
    result = -1073741592;
  }
  return result;
}
// 1616C: using guessed type int dword_1616C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (0001A3EE) --------------------------------------------------------
NTSTATUS __stdcall HidIrSystemControl(int a1, PIRP Irp)
{
  const void *v2; // esi@1

  v2 = (const void *)*((_DWORD *)Irp + 24);
  qmemcpy((char *)v2 - 36, v2, 0x1Cu);
  *((char *)v2 - 33) = 0;
  return IofCallDriver(*(PDEVICE_OBJECT *)(*(_DWORD *)(a1 + 40) + 4), Irp);
}

//----- (0001A424) --------------------------------------------------------
int __stdcall HidIrReadDefaultWakeKeysFromRegistry(PCUNICODE_STRING SourceString)
{
  int v1; // ebp@0
  PCUNICODE_STRING v2; // esi@5
  void *v3; // eax@6
  WCHAR *v5; // [sp+8h] [bp-8h]@1
  HANDLE Handle; // [sp+Ch] [bp-4h]@1
  int SourceStringa; // [sp+18h] [bp+8h]@5

  Handle = 0;
  v5 = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 10, (int)dword_16190);
  v2 = SourceString;
  LOBYTE(SourceString[5].Length) = 0;
  SourceStringa = HidIrOpenGlobalConfigKey((int)&Handle, SourceString, 0x80000000);
  if ( SourceStringa >= 0 )
  {
    SourceStringa = HidIrReadRegULong(v1, Handle, L"DefaultWakeProtocol", (int)&v5);
    if ( SourceStringa < 0 )
    {
      v3 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
      {
        WPP_SF_q(
          *((_DWORD *)WPP_GLOBAL_Control + 4),
          *((_DWORD *)WPP_GLOBAL_Control + 5),
          12,
          (int)dword_16190,
          SourceStringa);
        goto LABEL_26;
      }
    }
    else
    {
      HIBYTE(v2[5].Length) = (_BYTE)v5;
      SourceStringa = HidIrReadRegULong(v1, Handle, L"DefaultWakePayload", (int)&v5);
      if ( SourceStringa < 0 )
      {
        v3 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
        {
          WPP_SF_q(
            *((_DWORD *)WPP_GLOBAL_Control + 4),
            *((_DWORD *)WPP_GLOBAL_Control + 5),
            13,
            (int)dword_16190,
            SourceStringa);
          goto LABEL_26;
        }
      }
      else
      {
        v2[5].Buffer = v5;
        SourceStringa = HidIrReadRegULong(v1, Handle, L"DefaultWakeAddress", (int)&v5);
        if ( SourceStringa >= 0 )
        {
          *(_DWORD *)&v2[6].Length = v5;
          LOBYTE(v2[5].Length) = 1;
          goto LABEL_26;
        }
        v3 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
        {
          WPP_SF_q(
            *((_DWORD *)WPP_GLOBAL_Control + 4),
            *((_DWORD *)WPP_GLOBAL_Control + 5),
            14,
            (int)dword_16190,
            SourceStringa);
          goto LABEL_26;
        }
      }
    }
  }
  else
  {
    v3 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
    {
      WPP_SF_q(
        *((_DWORD *)WPP_GLOBAL_Control + 4),
        *((_DWORD *)WPP_GLOBAL_Control + 5),
        11,
        (int)dword_16190,
        SourceStringa);
LABEL_26:
      v3 = WPP_GLOBAL_Control;
      goto LABEL_27;
    }
  }
LABEL_27:
  if ( Handle )
  {
    ZwClose(Handle);
    Handle = 0;
    v3 = WPP_GLOBAL_Control;
  }
  if ( v3 != &WPP_GLOBAL_Control && *((_BYTE *)v3 + 32) & 0x80 && *((_BYTE *)v3 + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)v3 + 4), *((_DWORD *)v3 + 5), 15, (int)dword_16190, SourceStringa);
  return SourceStringa;
}
// 16190: using guessed type int dword_16190[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;
// 1B006: using guessed type wchar_t aDefaultwakeadd[19];
// 1B02C: using guessed type wchar_t aDefaultwakepay[19];
// 1B052: using guessed type wchar_t aDefaultwakepro[20];

//----- (0001A5BE) --------------------------------------------------------
void __stdcall HidIrWriteWakePatternToRegistryWorker(PDEVICE_OBJECT DeviceObject, PVOID Context)
{
  void *v2; // eax@1
  PVOID v3; // ecx@5
  int v4; // ebx@5
  UNICODE_STRING DestinationString; // [sp+8h] [bp-14h]@16
  int Data; // [sp+10h] [bp-Ch]@16
  HANDLE DevInstRegKey; // [sp+14h] [bp-8h]@1
  int v8; // [sp+18h] [bp-4h]@1

  v8 = 0;
  DevInstRegKey = 0;
  v2 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
  {
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 19, (int)dword_16190);
    v2 = WPP_GLOBAL_Control;
  }
  v3 = DeviceObject->DeviceExtension;
  v4 = *((_DWORD *)v3 + 2);
  if ( *(_BYTE *)(v4 + 240) )
  {
    v8 = IoOpenDeviceRegistryKey(*(PDEVICE_OBJECT *)v3, 1u, 0x20000u, &DevInstRegKey);
    if ( v8 >= 0 )
    {
      Data = *(_BYTE *)(v4 + 241);
      RtlInitUnicodeString(&DestinationString, L"WakeProtocol");
      v8 = ZwSetValueKey(DevInstRegKey, &DestinationString, 0, 4u, &Data, 4u);
      if ( v8 >= 0 )
      {
        Data = *(_DWORD *)(v4 + 244);
        RtlInitUnicodeString(&DestinationString, L"WakePayload");
        v8 = ZwSetValueKey(DevInstRegKey, &DestinationString, 0, 4u, &Data, 4u);
        if ( v8 >= 0 )
        {
          Data = *(_DWORD *)(v4 + 248);
          RtlInitUnicodeString(&DestinationString, L"WakeAddress");
          v8 = ZwSetValueKey(DevInstRegKey, &DestinationString, 0, 4u, &Data, 4u);
          if ( v8 >= 0 )
          {
            v8 = 0;
            goto LABEL_32;
          }
          v2 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
            && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
            && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
          {
            WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 24, (int)dword_16190, v8);
            goto LABEL_32;
          }
        }
        else
        {
          v2 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
            && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
            && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
          {
            WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 23, (int)dword_16190, v8);
            goto LABEL_32;
          }
        }
      }
      else
      {
        v2 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
          && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
          && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
        {
          WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 22, (int)dword_16190, v8);
          goto LABEL_32;
        }
      }
    }
    else
    {
      v2 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
      {
        WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 21, (int)dword_16190, v8);
        goto LABEL_32;
      }
    }
  }
  else if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 32) & 0x80 && *((_BYTE *)v2 + 29) >= 2u )
  {
    WPP_SF_(*((_DWORD *)v2 + 4), *((_DWORD *)v2 + 5), 20, (int)dword_16190);
LABEL_32:
    v2 = WPP_GLOBAL_Control;
    goto LABEL_33;
  }
LABEL_33:
  if ( DevInstRegKey )
  {
    ZwClose(DevInstRegKey);
    v2 = WPP_GLOBAL_Control;
    DevInstRegKey = 0;
  }
  if ( Context )
  {
    if ( *(_DWORD *)Context )
    {
      IoFreeWorkItem(*(PIO_WORKITEM *)Context);
      *(_DWORD *)Context = 0;
    }
    ExFreePool(Context);
    v2 = WPP_GLOBAL_Control;
  }
  if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 32) & 0x80 && *((_BYTE *)v2 + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)v2 + 4), *((_DWORD *)v2 + 5), 25, (int)dword_16190, v8);
}
// 16190: using guessed type int dword_16190[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (0001A828) --------------------------------------------------------
void __stdcall HidIrProgramDeviceWorker(PDEVICE_OBJECT DeviceObject, PVOID Context)
{
  PDEVICE_OBJECT v2; // esi@5
  int v3; // eax@5
  struct _KEVENT *v4; // ebx@5
  NTSTATUS v5; // eax@9
  int v6; // ecx@9
  void *v7; // eax@10
  void *v8; // ecx@16
  int InputBuffer; // [sp+Ch] [bp-14h]@5
  int v10; // [sp+10h] [bp-10h]@5
  int v11; // [sp+14h] [bp-Ch]@5
  struct _IO_STATUS_BLOCK IoStatusBlock; // [sp+18h] [bp-8h]@5
  PIRP Irp; // [sp+28h] [bp+8h]@5
  int Irpa; // [sp+28h] [bp+8h]@9

  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 31, (int)dword_16190);
  v2 = DeviceObject;
  v3 = *((_DWORD *)DeviceObject->DeviceExtension + 2);
  InputBuffer = *(_BYTE *)(v3 + 241);
  v10 = *(_DWORD *)(v3 + 244);
  v4 = (struct _KEVENT *)(v3 + 256);
  v11 = *(_DWORD *)(v3 + 248);
  KeResetEvent((PRKEVENT)(v3 + 256));
  Irp = IoBuildDeviceIoControlRequest(
          0xF608038u,
          *((PDEVICE_OBJECT *)DeviceObject->DeviceExtension + 1),
          &InputBuffer,
          0xCu,
          0,
          0,
          0,
          v4,
          &IoStatusBlock);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 32, (int)dword_16190, (int)Irp);
  v5 = IofCallDriver(*((PDEVICE_OBJECT *)v2->DeviceExtension + 1), Irp);
  v6 = v5;
  Irpa = v5;
  if ( v5 >= 0 )
  {
    if ( v5 != 259 )
      goto LABEL_14;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
      WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 34, (int)dword_16190);
    Irpa = KeWaitForSingleObject(v4, 0, 0, 0, &Timeout);
    if ( Irpa < 0 )
    {
      v7 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
      {
        WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 36, (int)dword_16190);
        v7 = WPP_GLOBAL_Control;
      }
      Irpa = 0;
    }
    else
    {
      v7 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
        && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
        && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
      {
        WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 35, (int)dword_16190);
        goto LABEL_14;
      }
    }
  }
  else
  {
    v7 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 2u )
    {
      WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 33, (int)dword_16190, v6);
LABEL_14:
      v7 = WPP_GLOBAL_Control;
      goto LABEL_15;
    }
  }
LABEL_15:
  if ( Context )
  {
    v8 = (void *)*((_DWORD *)Context + 1);
    if ( v8 )
      IofCompleteRequest(v8, 0);
    if ( *(_DWORD *)Context )
    {
      IoFreeWorkItem(*(PIO_WORKITEM *)Context);
      *(_DWORD *)Context = 0;
    }
    ExFreePool(Context);
    v7 = WPP_GLOBAL_Control;
  }
  if ( v7 != &WPP_GLOBAL_Control && *((_BYTE *)v7 + 32) & 0x80 && *((_BYTE *)v7 + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)v7 + 4), *((_DWORD *)v7 + 5), 37, (int)dword_16190, Irpa);
}
// 16190: using guessed type int dword_16190[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;

//----- (0001AA40) --------------------------------------------------------
int __stdcall HidIrReadWakePatternConfigurationFromRegistry(int a1)
{
  int v1; // ebp@0
  int v2; // eax@5
  void *v3; // ecx@6
  HANDLE v4; // ST08_4@13
  int v5; // edi@19
  PVOID v6; // eax@25
  int v8; // [sp+8h] [bp-8h]@10
  HANDLE DevInstRegKey; // [sp+Ch] [bp-4h]@1

  DevInstRegKey = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80
    && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
    WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 16, (int)dword_16190);
  v2 = IoOpenDeviceRegistryKey(**(PDEVICE_OBJECT **)(*(_DWORD *)(a1 + 24) + 40), 1u, 0x20000u, &DevInstRegKey);
  if ( v2 >= 0 )
  {
    if ( HidIrReadRegULong(v1, DevInstRegKey, L"DontChangeWakePattern", (int)&v8) >= 0 && v8 )
      *(_BYTE *)(a1 + 252) = 1;
    v4 = DevInstRegKey;
    *(_BYTE *)(a1 + 240) = 1;
    if ( HidIrReadRegULong(v1, v4, L"WakeProtocol", (int)&v8) < 0 )
      *(_BYTE *)(a1 + 240) = 0;
    else
      *(_BYTE *)(a1 + 241) = v8;
    if ( HidIrReadRegULong(v1, DevInstRegKey, L"WakePayload", (int)&v8) < 0 )
      *(_BYTE *)(a1 + 240) = 0;
    else
      *(_DWORD *)(a1 + 244) = v8;
    v5 = HidIrReadRegULong(v1, DevInstRegKey, L"WakeAddress", (int)&v8);
    if ( v5 >= 0 )
    {
      *(_DWORD *)(a1 + 248) = v8;
      v3 = WPP_GLOBAL_Control;
      goto LABEL_24;
    }
    *(_BYTE *)(a1 + 240) = 0;
  }
  else
  {
    v3 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control
      || !(*((_BYTE *)WPP_GLOBAL_Control + 32) & 0x80)
      || *((_BYTE *)WPP_GLOBAL_Control + 29) < 2u )
      goto LABEL_23;
    WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 17, (int)dword_16190, v2);
  }
  v3 = WPP_GLOBAL_Control;
LABEL_23:
  v5 = 0;
LABEL_24:
  if ( !*(_BYTE *)(a1 + 240) )
  {
    v6 = IoGetDriverObjectExtension(*(PDRIVER_OBJECT *)(*(_DWORD *)(a1 + 24) + 8), (PVOID)0x68694465);
    if ( *((_BYTE *)v6 + 40) )
    {
      *(_BYTE *)(a1 + 241) = *((_BYTE *)v6 + 41);
      *(_DWORD *)(a1 + 244) = *((_DWORD *)v6 + 11);
      *(_DWORD *)(a1 + 248) = *((_DWORD *)v6 + 12);
      *(_BYTE *)(a1 + 240) = 1;
      HidIrWriteWakePatternToRegistry(a1);
    }
    v3 = WPP_GLOBAL_Control;
  }
  if ( DevInstRegKey )
  {
    ZwClose(DevInstRegKey);
    v3 = WPP_GLOBAL_Control;
    DevInstRegKey = 0;
  }
  if ( v3 != &WPP_GLOBAL_Control && *((_BYTE *)v3 + 32) & 0x80 && *((_BYTE *)v3 + 29) >= 4u )
    WPP_SF_q(*((_DWORD *)v3 + 4), *((_DWORD *)v3 + 5), 18, (int)dword_16190, v5);
  return v5;
}
// 16190: using guessed type int dword_16190[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;
// 1B0C4: using guessed type wchar_t aDontchangewake[22];

//----- (0001C006) --------------------------------------------------------
int __stdcall DriverEntry(PDRIVER_OBJECT DriverObject, int a2)
{
  void *v2; // eax@1
  int result; // eax@14
  PDRIVER_EXTENSION v4; // eax@15
  void *v5; // eax@15
  int v6; // esi@23
  int v7; // [sp+Ch] [bp-20h]@9
  PVOID DriverObjectExtension; // [sp+10h] [bp-1Ch]@9
  struct _HID_MINIDRIVER_REGISTRATION MinidriverRegistration; // [sp+14h] [bp-18h]@15

  WPP_INIT_CONTROL_ARRAY((int)&WPP_MAIN_CB);
  WppLoadTracingSupport();
  dword_17078 = 0;
  WppInitKm((PDEVICE_OBJECT)DriverObject, a2);
  v2 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
  {
    if ( *((_BYTE *)WPP_GLOBAL_Control + 32) & 2 && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
    {
      WPP_SF_(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 10, (int)dword_1614C);
      v2 = WPP_GLOBAL_Control;
    }
    if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 32) & 2 && *((_BYTE *)v2 + 29) >= 5u )
      WPP_SF_q(*((_DWORD *)v2 + 4), *((_DWORD *)v2 + 5), 11, (int)dword_1614C, (int)DriverObject);
  }
  v7 = IoAllocateDriverObjectExtension(DriverObject, (PVOID)0x68694465, *(_WORD *)a2 + 56, &DriverObjectExtension);
  if ( v7 >= 0 )
  {
    memset(DriverObjectExtension, 0, 0x38u);
    *(_DWORD *)DriverObjectExtension = *(_DWORD *)a2;
    *((_DWORD *)DriverObjectExtension + 1) = *(_DWORD *)(a2 + 4);
    *((_DWORD *)DriverObjectExtension + 1) = (char *)DriverObjectExtension + 56;
    memcpy((char *)DriverObjectExtension + 56, *(const void **)(a2 + 4), *(_WORD *)a2);
    *((_WORD *)DriverObjectExtension + 1) = *(_WORD *)a2;
    KeInitializeSpinLock((PKSPIN_LOCK)DriverObjectExtension + 2);
    *((_DWORD *)DriverObjectExtension + 3) = 0;
    *((_DWORD *)DriverObjectExtension + 4) = 0;
    *((_DWORD *)DriverObjectExtension + 6) = 0;
    *((_DWORD *)DriverObjectExtension + 7) = 0;
    *((_BYTE *)DriverObjectExtension + 32) = 1;
    *((_DWORD *)DriverObjectExtension + 9) = KeQueryTimeIncrement();
    HidIrReadDefaultWakeKeysFromRegistry((PCUNICODE_STRING)DriverObjectExtension);
    v4 = DriverObject->DriverExtension;
    DriverObject->MajorFunction[15] = (PDRIVER_DISPATCH)HidIrIoctl;
    DriverObject->MajorFunction[27] = (PDRIVER_DISPATCH)HidIrPnP;
    DriverObject->MajorFunction[22] = (PDRIVER_DISPATCH)HidIrPower;
    DriverObject->MajorFunction[23] = (PDRIVER_DISPATCH)HidIrSystemControl;
    v4->AddDevice = (PDRIVER_ADD_DEVICE)HidIrAddDevice;
    DriverObject->DriverUnload = (PDRIVER_UNLOAD)HidIrUnload;
    MinidriverRegistration.Revision = 1;
    MinidriverRegistration.DriverObject = DriverObject;
    MinidriverRegistration.RegistryPath = (PUNICODE_STRING)a2;
    MinidriverRegistration.DeviceExtensionSize = 272;
    MinidriverRegistration.DevicesArePolled = 0;
    v5 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
    {
      if ( *((_BYTE *)WPP_GLOBAL_Control + 32) & 2 && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
      {
        WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 13, (int)dword_1614C, 272);
        v5 = WPP_GLOBAL_Control;
      }
      if ( v5 != &WPP_GLOBAL_Control && *((_BYTE *)v5 + 32) & 2 && *((_BYTE *)v5 + 29) >= 5u )
        WPP_SF_(*((_DWORD *)v5 + 4), *((_DWORD *)v5 + 5), 14, (int)dword_1614C);
    }
    v6 = HidRegisterMinidriver(&MinidriverRegistration);
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 4u )
      WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 15, (int)dword_1614C, v6);
    result = v6;
  }
  else
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control
      && *((_BYTE *)WPP_GLOBAL_Control + 32) & 2
      && *((_BYTE *)WPP_GLOBAL_Control + 29) >= 5u )
      WPP_SF_q(*((_DWORD *)WPP_GLOBAL_Control + 4), *((_DWORD *)WPP_GLOBAL_Control + 5), 12, (int)dword_1614C, v7);
    WppCleanupKm((PDEVICE_OBJECT)DriverObject);
    result = v7;
  }
  return result;
}
// 1614C: using guessed type int dword_1614C[4];
// 17000: using guessed type void *WPP_GLOBAL_Control;
// 17060: using guessed type int WPP_MAIN_CB;
// 17078: using guessed type int dword_17078;

//----- (0001C258) --------------------------------------------------------
void __cdecl __security_init_cookie()
{
  ULONG v0; // eax@1

  v0 = __security_cookie;
  if ( !__security_cookie || __security_cookie == -1153374642 )
  {
    v0 = (unsigned int)&__security_cookie ^ _KeTickCount.LowPart;
    __security_cookie = (unsigned int)&__security_cookie ^ _KeTickCount.LowPart;
    if ( &__security_cookie == (ULONG_PTR *)_KeTickCount.LowPart )
    {
      v0 = -1153374642;
      __security_cookie = -1153374642;
    }
  }
  __security_cookie_complement = ~v0;
}

// ALL OK, 94 function(s) have been successfully decompiled
