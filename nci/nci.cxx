/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: Visual C++
*/

#include <windows.h>
#include <defs.h>

#include <stdarg.h>


//-------------------------------------------------------------------------
// Function declarations

// ULONG __stdcall RegisterTraceGuidsW(WMIDPREQUEST RequestAddress, PVOID RequestContext, LPCGUID ControlGuid, ULONG GuidCount, PTRACE_GUID_REGISTRATION TraceGuidReg, LPCWSTR MofImagePath, LPCWSTR MofResourceName, PTRACEHANDLE RegistrationHandle);
// LSTATUS __stdcall RegEnumValueW(HKEY hKey, DWORD dwIndex, LPWSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
// BOOL __stdcall AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount, DWORD nSubAuthority0, DWORD nSubAuthority1, DWORD nSubAuthority2, DWORD nSubAuthority3, DWORD nSubAuthority4, DWORD nSubAuthority5, DWORD nSubAuthority6, DWORD nSubAuthority7, PSID *pSid);
// BOOL __stdcall IsValidSid(PSID pSid);
// DWORD __stdcall GetLengthSid(PSID pSid);
// BOOL __stdcall InitializeAcl(PACL pAcl, DWORD nAclLength, DWORD dwAclRevision);
// BOOL __stdcall AddAccessAllowedAce(PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid);
// BOOL __stdcall InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD dwRevision);
// BOOL __stdcall SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, BOOL bDaclPresent, PACL pDacl, BOOL bDaclDefaulted);
// BOOL __stdcall SetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pOwner, BOOL bOwnerDefaulted);
// BOOL __stdcall SetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pGroup, BOOL bGroupDefaulted);
// PVOID __stdcall FreeSid(PSID pSid);
// LSTATUS __stdcall RegCreateKeyExW(HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition);
// LSTATUS __stdcall RegQueryInfoKeyW(HKEY hKey, LPWSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime);
// LSTATUS __stdcall RegEnumKeyExW(HKEY hKey, DWORD dwIndex, LPWSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPWSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime);
// ULONG __stdcall UnregisterTraceGuids(TRACEHANDLE RegistrationHandle);
// TRACEHANDLE __stdcall GetTraceLoggerHandle(PVOID Buffer);
// UCHAR __stdcall GetTraceEnableLevel(TRACEHANDLE TraceHandle);
// ULONG __stdcall GetTraceEnableFlags(TRACEHANDLE TraceHandle);
// LSTATUS __stdcall RegOpenKeyExW(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult);
// LSTATUS __stdcall RegCloseKey(HKEY hKey);
// LSTATUS __stdcall RegQueryValueExW(HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
// LSTATUS __stdcall RegSetValueExW(HKEY hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE *lpData, DWORD cbData);
// BOOL __stdcall SetThreadPreferredUILanguages(DWORD dwFlags, PCZZWSTR pwszLanguagesBuffer, PULONG pulNumLanguages);
// BOOL __stdcall GetThreadPreferredUILanguages(DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer);
// int __stdcall lstrlenW(LPCWSTR lpString);
// int __stdcall CompareStringW(LCID Locale, DWORD dwCmpFlags, PCNZWCH lpString1, int cchCount1, PCNZWCH lpString2, int cchCount2);
// void __stdcall SetLastError(DWORD dwErrCode);
// LONG __stdcall InterlockedExchange(volatile LONG *Target, LONG Value);
// void __stdcall Sleep(DWORD dwMilliseconds);
// LONG __stdcall InterlockedCompareExchange(volatile LONG *Destination, LONG Exchange, LONG Comperand);
// BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount);
// DWORD __stdcall GetTickCount();
// DWORD __stdcall GetCurrentThreadId();
// DWORD __stdcall GetCurrentProcessId();
// void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime);
// int __stdcall lstrcmpW(LPCWSTR lpString1, LPCWSTR lpString2);
// HANDLE __stdcall CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
// BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped);
// HANDLE __stdcall CreateMutexW(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCWSTR lpName);
// BOOL __stdcall DisableThreadLibraryCalls(HMODULE hLibModule);
// BOOL __stdcall CloseHandle(HANDLE hObject);
// HLOCAL __stdcall LocalAlloc(UINT uFlags, SIZE_T uBytes);
// void __stdcall GetSystemTime(LPSYSTEMTIME lpSystemTime);
// HLOCAL __stdcall LocalFree(HLOCAL hMem);
// DWORD __stdcall GetLastError();
// int __stdcall lstrcmpiW(LPCWSTR lpString1, LPCWSTR lpString2);
// BOOL __stdcall ReleaseMutex(HANDLE hMutex);
// RPC_STATUS __stdcall UuidFromStringW(RPC_WSTR StringUuid, UUID *Uuid);
// BOOL __stdcall SetupDiGetDevicePropertyW(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, const DEVPROPKEY *PropertyKey, DEVPROPTYPE *PropertyType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize, DWORD Flags);
// BOOL __stdcall SetupFindFirstLineW(HINF InfHandle, PCWSTR Section, PCWSTR Key, PINFCONTEXT Context);
// BOOL __stdcall SetupGetIntField(PINFCONTEXT Context, DWORD FieldIndex, PINT IntegerValue);
// BOOL __stdcall SetupDiGetSelectedDriverW(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_DRVINFO_DATA_W DriverInfoData);
// CONFIGRET __stdcall CM_Get_Parent_Ex(PDEVINST pdnDevInst, DEVINST dnDevInst, ULONG ulFlags, HMACHINE hMachine);
// BOOL __stdcall SetupDiGetDeviceRegistryPropertyW(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Property, PDWORD PropertyRegDataType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize);
// CONFIGRET __stdcall CM_Get_Device_ID_ExW(DEVINST dnDevInst, PWCHAR Buffer, ULONG BufferLen, ULONG ulFlags, HMACHINE hMachine);
// CONFIGRET __stdcall CM_Get_DevNode_Registry_Property_ExW(DEVINST dnDevInst, ULONG ulProperty, PULONG pulRegDataType, PVOID Buffer, PULONG pulLength, ULONG ulFlags, HMACHINE hMachine);
// BOOL __stdcall SetupDiOpenDeviceInfoW(HDEVINFO DeviceInfoSet, PCWSTR DeviceInstanceId, HWND hwndParent, DWORD OpenFlags, PSP_DEVINFO_DATA DeviceInfoData);
// BOOL __stdcall SetupDiGetDeviceInfoListDetailW(HDEVINFO DeviceInfoSet, PSP_DEVINFO_LIST_DETAIL_DATA_W DeviceInfoSetDetailData);
// HDEVINFO __stdcall SetupDiGetClassDevsExW(const GUID *ClassGuid, PCWSTR Enumerator, HWND hwndParent, DWORD Flags, HDEVINFO DeviceInfoSet, PCWSTR MachineName, PVOID Reserved);
// HDEVINFO __stdcall SetupDiCreateDeviceInfoListExW(const GUID *ClassGuid, HWND hwndParent, PCWSTR MachineName, PVOID Reserved);
// HINF __stdcall SetupOpenInfFileW(PCWSTR FileName, PCWSTR InfClass, DWORD InfStyle, PUINT ErrorLine);
// void __stdcall SetupCloseInfFile(HINF InfHandle);
// BOOL __stdcall SetupDiGetDriverInfoDetailW(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_DRVINFO_DATA_W DriverInfoData, PSP_DRVINFO_DETAIL_DATA_W DriverInfoDetailData, DWORD DriverInfoDetailDataSize, PDWORD RequiredSize);
// HDEVINFO __stdcall SetupDiCreateDeviceInfoList(const GUID *ClassGuid, HWND hwndParent);
// BOOL __stdcall SetupDiGetActualSectionToInstallW(HINF InfHandle, PCWSTR InfSectionName, PWSTR InfSectionWithExt, DWORD InfSectionWithExtSize, PDWORD RequiredSize, PWSTR *Extension);
// void _SetupWriteTextLog(SP_LOG_TOKEN LogToken, DWORD Category, DWORD Flags, PCSTR MessageStr, ...);
// SP_LOG_TOKEN __stdcall SetupGetThreadLogToken();
// BOOL __stdcall SetupDiDestroyDeviceInfoList(HDEVINFO DeviceInfoSet);
// BOOL __stdcall SetupDiCallClassInstaller(DI_FUNCTION InstallFunction, HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData);
// BOOL __stdcall SetupDiSetClassInstallParamsW(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_CLASSINSTALL_HEADER ClassInstallParams, DWORD ClassInstallParamsSize);
// HKEY __stdcall SetupDiOpenDevRegKey(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Scope, DWORD HwProfile, DWORD KeyType, REGSAM samDesired);
// BOOL __stdcall SetupDiEnumDeviceInfo(HDEVINFO DeviceInfoSet, DWORD MemberIndex, PSP_DEVINFO_DATA DeviceInfoData);
// HDEVINFO __stdcall SetupDiGetClassDevsW(const GUID *ClassGuid, PCWSTR Enumerator, HWND hwndParent, DWORD Flags);
// BOOL __stdcall SetupDiGetDeviceInstanceIdW(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PWSTR DeviceInstanceId, DWORD DeviceInstanceIdSize, PDWORD RequiredSize);
// int __stdcall LoadStringW(HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int cchBufferMax);
// BOOL __stdcall PeekMessageW(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);
// LRESULT __stdcall DispatchMessageW(const MSG *lpMsg);
// DWORD __stdcall MsgWaitForMultipleObjects(DWORD nCount, const HANDLE *pHandles, BOOL fWaitAll, DWORD dwMilliseconds, DWORD dwWakeMask);
// wchar_t *__cdecl _wcschr(const wchar_t *Str, wchar_t Ch);
// int __cdecl __vsnwprintf(wchar_t *Dest, size_t Count, const wchar_t *Format, va_list Args);
// int __cdecl __wcsicmp(const wchar_t *, const wchar_t *);
// int __cdecl __wcsnicmp(const wchar_t *, const wchar_t *, size_t);
// void __cdecl _free(void *Memory);
// void __stdcall RtlInitUnicodeString(PUNICODE_STRING DestinationString, PCWSTR SourceString);
// HRESULT __stdcall CoCreateGuid(GUID *pguid);
// int __stdcall StringFromGUID2(const GUID *const rguid, LPOLESTR lpsz, int cchMax);
// __int32 __cdecl StringLengthWorkerW();
ULONG __stdcall WPP_SF_(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid);
ULONG __stdcall WPP_SF_q(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, char a4);
ULONG __stdcall WPP_SF_S(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, int a4);
ULONG __stdcall WPP_SF_h(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, char a4);
ULONG __stdcall WPP_SF_qqLq(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, char a4, char a5, char a6, char a7);
ULONG __stdcall WPP_SF_qqq(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, char a4, char a5, char a6);
int __stdcall NcipHandleInstallPostProcessing(void *a1, struct _SP_DEVINFO_DATA *a2, int a3);
signed int __stdcall NcipHandleRemovePreProcessing(int a2, int a3, int a4);
int __stdcall NcipHandleRemovePostProcessing(int a2, int a3, int a4);
int __stdcall OnMachineUILanguageSwitch(LPCWSTR lpString1, LPCWSTR lpString2, int); // idb
int __stdcall OnMachineUILanguageInit(const wchar_t *a1, int a2);
LPCWSTR __stdcall UpdateAdvancedParameter(int a1, int a2, DWORD dwType, int a4, DWORD a5);
HRESULT __stdcall StringCchCopyW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszSrc);
// HRESULT __stdcall StringCchLengthW(STRSAFE_PCNZWCH psz, size_t cchMax, size_t *pcchLength);
int __stdcall NciGetConnectionName(GUID *rguid, int a2, int a3, int a4);
size_t __stdcall NciSetConnectionName(int a1, STRSAFE_PCNZWCH psz);
int __stdcall NcipHandleInstallPreProcessing(void *a1, struct _SP_DEVINFO_DATA *a2, int a3);
int __stdcall NciDeviceInstall(HLOCAL hMem, HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, int a4);
int __stdcall WPP_INIT_CONTROL_ARRAY(int a1);
signed int __stdcall WppControlCallback(WMIDPREQUESTCODE RequestCode, PVOID RequestContext, ULONG *BufferSize, PVOID Buffer);
ULONG __stdcall WppInitUm(int a1);
void __stdcall WppCleanupUm();
signed int __stdcall DllProcessAttach(HINSTANCE a1);
signed int __stdcall DllProcessDetach(int a1);
BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved);
// signed int __userpurge sub_32E8D9B@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4, int a5);
ULONG __stdcall WPP_SF_dL(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, char a4, char a5);
ULONG __stdcall WPP_SF_qLDDDD(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, char a4, char a5, char a6, char a7, char a8, char a9);
ULONG __stdcall WPP_SF_qLDDDDq(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, char a4, char a5, char a6, char a7, char a8, char a9, char a10);
ULONG __stdcall WPP_SF_qLLDDqqq(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, char a4, char a5, char a6, char a7, char a8, char a9, char a10, char a11);
ULONG __stdcall WPP_SF_qqqqq(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, char a4, char a5, char a6, char a7, char a8);
HRESULT ULongLongToULong(ULONGLONG ullOperand, ULONG *pulResult);
DWORD __stdcall NcipGetDefaultName(__int16 a1, char a2, int a3, char a4, LPWSTR lpBuffer, int a6);
HLOCAL __stdcall NcipUpdateIfDescr(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData);
HRESULT __stdcall StringCchCatW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszSrc);
HRESULT StringCchPrintfW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszFormat, ...);
SIZE_T __stdcall NcipIsNameDuplicate(const WCHAR *a1, const WCHAR *a2, int a3);
LSTATUS __stdcall NcipUpdateConnectionName(int a1, const wchar_t *a2, BYTE *a3, BYTE *a4, char a5, char a6);
int __stdcall NcipGetConnectionNameInternal(int a1, int a2, int a3, BYTE *a4, BYTE *a5);
signed int __stdcall NcipConnectionNameFromDownlevel(int a1, int a2);
SIZE_T __stdcall NcipGenerateUniqueIfAlias(int a1, __int16 a2, char a3, int a4, char a5, int a6, int a7, int a8);
int __stdcall NcipCreateConnectionName(int a1, __int16 a2, char a3, char a4, int a5, char a6);
int __stdcall NcipCheckAndCreateConnectionName(int a1, __int16 a2, char a3, char a4, int a5, char a6, int a7, int a8);
int __stdcall NcipGenerateUniqueGuid(LPOLESTR lpsz); // idb
bool __stdcall NcipIsValidHandle(int a1);
signed int __stdcall NcipWaitForMultipleObjects();
int __stdcall NcipCreateGlobalMutex();
char __stdcall NcipIsInUpgrade();
DWORD __stdcall NcipGetDeviceInstanceId(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, int a3);
HLOCAL __stdcall NcipGetDeviceRegistryProperty(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Property, int a4, int a5);
DWORD __stdcall NcipSetInterfaceDescription(__int16 a1, int a2, PCWSTR SourceString);
char __stdcall NcipIsNullDriverInstall(HDEVINFO DeviceInfoSet, int a2);
LSTATUS __stdcall NcipSetEnableDhcp(LPCWSTR lpSubKey, int a2);
int __stdcall NcipOpenDriverRegistryKey(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Scope, DWORD HwProfile, DWORD KeyType, REGSAM samDesired, int a7);
int __stdcall NcipQueryRegistryWithType(HKEY hKey, LPCWSTR lpValueName, int a3, LPBYTE lpData, LPDWORD lpcbData);
DWORD __stdcall NcipGetIntFromInf(HINF InfHandle, PCWSTR Section, PCWSTR Key, int a4);
DWORD __stdcall NcipGetDriverInfoDetail(void *a1, struct _SP_DEVINFO_DATA *a2, int a3);
DWORD __stdcall NcipGetActualSectionToInstall(HINF InfHandle, PCWSTR InfSectionName, int a3);
DWORD __stdcall NcipAllocateNetLuidIndex(__int16 InBuffer, LPVOID lpOutBuffer);
int __stdcall NcipFreeNetLuidIndex(__int16 a1, int a2);
DWORD __stdcall NcipCreatePersistedInterface(__int16 a1, int a2, PCWSTR SourceString, int a4, int a5, int a6, int a7);
DWORD __stdcall NcipDeletePersistedInterface(__int16 a1, int a2);
char __stdcall NcipGetUniqueMatchingDevice(int a1, int a2, const WCHAR *a3, char a4, int a5, unsigned int a6, void *a7);
signed int __stdcall NcipIsBridgeMiniport(int a1, struct _SP_DEVINFO_DATA *a2, int a3);
signed int __stdcall NcipSetiScsiFlags(void *a1, struct _SP_DEVINFO_DATA *a2);
PSP_DEVINFO_DATA __stdcall NcipSetNewDeviceInstall(void *a1, struct _SP_DEVINFO_DATA *a2);
DWORD __stdcall NcipProcessInf(int a1, int a2, HKEY hKey, int a4, int a5);
int __stdcall NcipGetUpgradeKey(HDEVINFO, PSP_DEVINFO_DATA, int, int); // idb
int __stdcall NcipUpgradeAdapterSettings(HDEVINFO DeviceInfoSet, DWORD dwIndex); // idb
ULONG __stdcall WPP_SF_SS(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, int a4, int a5);
ULONG __stdcall WPP_SF_SL(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, int a4, char a5);
ULONG __stdcall WPP_SF_SdL(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, int a4, char a5, char a6);
int __stdcall NcipOnMachineUILanguageSwitch(const wchar_t *a1, const wchar_t *a2, int a3);
int __stdcall NcipOnMachineUILanguageInit(const wchar_t *a1, int a2);
signed int __stdcall IsSystemUpgradeInProgress();
int __stdcall DoPass(int a1, void *a2, void *a3, int a4, void *a5);
DWORD __stdcall DiGetMatchingDevices_BestGuess(HDEVINFO DeviceInfoSet, int a2);
int __stdcall DiGetMatchingDevices(HDEVINFO DeviceInfoSet, int, int, int); // idb
void *__stdcall _GetDeviceProperty(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Property);
int __stdcall _CopyDeviceInfoSet(HDEVINFO DeviceInfoSet, int); // idb
int __stdcall _MarkAsMatched(HDEVINFO DeviceInfoSet, PCWSTR DeviceInstanceId, int); // idb
signed int __stdcall _StringEndingsIdentical(int *a1, int *a2);
int __stdcall _GetPseudoLocationPath_Internal(DEVINST dnDevInst, int, int, int, HMACHINE hMachine); // idb
int __stdcall _GetPseudoLocationPath(DEVINST dnDevInst, int, int, HMACHINE hMachine); // idb
int __stdcall _GetPseudoLocationPathLength(DEVINST dnDevInst, int, HMACHINE hMachine); // idb
// _DWORD __cdecl _initterm_e(_DWORD, _DWORD); weak
signed int __stdcall _CRT_INIT(int a1, int a2, int a3);
int __stdcall sub_32F11A8(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved); // idb
// void *__cdecl memset(void *Dst, int Val, size_t Size);
// void *__cdecl memcpy(void *Dst, const void *Src, size_t Size);
// int __cdecl tolower(int C);
// _DWORD __cdecl _ValidateImageBase(_DWORD); weak
// _DWORD __cdecl _FindPESection(_DWORD, _DWORD); weak
int __cdecl _IsNonwritableInCurrentImage(int a1);
// int __cdecl _initterm(_DWORD); weak
// int __cdecl _amsg_exit(_DWORD); weak
void __cdecl __security_init_cookie();
// ULONG TraceMessage(TRACEHANDLE LoggerHandle, ULONG MessageFlags, LPCGUID MessageGuid, USHORT MessageNumber, ...);
// _DWORD __stdcall NdispUnicodeStringToVar(_DWORD, _DWORD, _DWORD); weak
int __stdcall NdisHandlePnPEvent(int, int, int, int, int, void *Src, size_t Size); // idb

//-------------------------------------------------------------------------
// Data declarations

int __xc_a = 0; // weak
int __xi_a = 0; // weak
int __xi_z[4] = { 0, 0, 0, 0 }; // weak
BYTE Data = 16u; // idb
const GUID MessageGuid = { 557175758u, 47643u, 64684u, { 200u, 203u, 134u, 65u, 8u, 190u, 74u, 69u } }; // idb
int WPP_ThisDir_CTLGUID_NCITraceGuid[4] = { 3154801574, 1127154750, 406711741, 551803842 }; // weak
const GUID stru_32E3840 =
{
  3476267252u,
  55948u,
  61300u,
  { 158u, 202u, 197u, 247u, 95u, 46u, 209u, 238u }
}; // idb
const GUID stru_32E3F48 = { 969970325u, 15982u, 42944u, { 187u, 220u, 28u, 116u, 36u, 81u, 24u, 149u } }; // idb
__int16 IfAliasTable[] = { 6 }; // weak
int dword_32E3F5C[] = { 1803 }; // weak
const GUID o_1_a_87_s_0_tpsig2 = { 504069274u, 9473u, 59931u, { 27u, 180u, 45u, 156u, 220u, 18u, 122u, 49u } }; // idb
const DEVPROPKEY DEVPKEY_Device_Service =
{
  {
    2757502286u,
    57116u,
    20221u,
    { 128u, 32u, 103u, 209u, 70u, 168u, 80u, 224u }
  },
  6u
};
const GUID stru_32E5D00 = { 2014494197u, 44019u, 3371u, { 130u, 24u, 248u, 248u, 75u, 100u, 180u, 54u } }; // idb
GUID GUID_NULL = { 0u, 0u, 0u, { 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u } };
GUID GUID_DEVCLASS_INFRARED = { 1809653701u, 33039u, 4560u, { 190u, 199u, 8u, 0u, 43u, 226u, 9u, 47u } };
GUID GUID_DEVCLASS_NET = { 1295444338u, 58149u, 4558u, { 191u, 193u, 8u, 0u, 43u, 225u, 3u, 24u } };
PVOID WPP_GLOBAL_Control = &WPP_GLOBAL_Control; // idb
uintptr_t __security_cookie = 3141592654u;
int __security_cookie_complement = 1153374641; // weak
int __native_dllmain_reason = 4294967295; // weak
HINSTANCE g_hInst = NULL; // idb
HANDLE g_hMutex = NULL; // idb
int g_IsInUpgrade = 0; // weak
int dword_32F306C = 0; // weak
int dword_32F3070 = 0; // weak
int WPP_MAIN_CB[8]; // weak
int WPP_REGISTRATION_GUIDS; // weak
int __native_startup_state; // weak
volatile LONG __native_startup_lock; // idb
int __onexitend; // weak
void *__onexitbegin; // idb
int (__stdcall *_pRawDllMain)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *__dyn_tls_init_callback)(_DWORD, _DWORD, _DWORD); // weak


//----- (032E5E4C) --------------------------------------------------------
ULONG __stdcall WPP_SF_(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid)
{
  return TraceMessage(LoggerHandle, 0x2Bu, MessageGuid, MessageNumber, 0);
}

//----- (032E5E72) --------------------------------------------------------
ULONG __stdcall WPP_SF_q(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, char a4)
{
  return TraceMessage(LoggerHandle, 0x2Bu, MessageGuid, MessageNumber, &a4, 4, 0);
}

//----- (032E5E9E) --------------------------------------------------------
ULONG __stdcall WPP_SF_S(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, int a4)
{
  int v4; // edx@1
  unsigned int v5; // eax@4
  signed int v7; // [sp-4h] [bp-4h]@3

  v4 = a4;
  if ( a4 )
  {
    if ( *(_WORD *)a4 )
    {
      v5 = 2 * wcslen((const unsigned __int16 *)a4) + 2;
      goto LABEL_7;
    }
    v7 = 14;
  }
  else
  {
    v7 = 10;
  }
  v5 = v7;
LABEL_7:
  if ( a4 )
  {
    if ( !*(_WORD *)a4 )
      v4 = (int)L"<NULL>";
  }
  else
  {
    v4 = (int)L"NULL";
  }
  return TraceMessage(LoggerHandle, 0x2Bu, MessageGuid, MessageNumber, v4, v5, 0);
}
// 32E18D0: using guessed type wchar_t aNull[5];
// 32E18DC: using guessed type wchar_t aNull_0[7];

//----- (032E5F0B) --------------------------------------------------------
ULONG __stdcall WPP_SF_h(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, char a4)
{
  return TraceMessage(LoggerHandle, 0x2Bu, MessageGuid, MessageNumber, &a4, 2, 0);
}

//----- (032E5F37) --------------------------------------------------------
ULONG __stdcall WPP_SF_qqLq(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, char a4, char a5, char a6, char a7)
{
  return TraceMessage(LoggerHandle, 0x2Bu, MessageGuid, MessageNumber, &a4, 4, &a5, 4, &a6, 4, &a7, 4, 0);
}

//----- (032E5F74) --------------------------------------------------------
ULONG __stdcall WPP_SF_qqq(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, char a4, char a5, char a6)
{
  return TraceMessage(LoggerHandle, 0x2Bu, MessageGuid, MessageNumber, &a4, 4, &a5, 4, &a6, 4, 0);
}

//----- (032E5FAC) --------------------------------------------------------
int __stdcall NcipHandleInstallPostProcessing(void *a1, struct _SP_DEVINFO_DATA *a2, int a3)
{
  int v3; // esi@46
  DWORD v4; // esi@56
  DWORD v5; // esi@64
  LSTATUS v7; // eax@101
  DWORD v8; // [sp-Ch] [bp-4ACh]@12
  const CHAR *v9; // [sp-8h] [bp-4A8h]@11
  DWORD v10; // [sp-8h] [bp-4A8h]@44
  const CHAR *v11; // [sp-8h] [bp-4A8h]@80
  int v12; // [sp-4h] [bp-4A4h]@11
  const CHAR *v13; // [sp-4h] [bp-4A4h]@44
  int v14; // [sp-4h] [bp-4A4h]@80
  char v15; // [sp+10h] [bp-490h]@1
  BYTE v16[4]; // [sp+14h] [bp-48Ch]@46
  char v17[4]; // [sp+18h] [bp-488h]@1
  HDEVINFO DeviceInfoSet; // [sp+1Ch] [bp-484h]@1
  BYTE v19[4]; // [sp+20h] [bp-480h]@62
  PSP_DEVINFO_DATA DeviceInfoData; // [sp+24h] [bp-47Ch]@1
  BYTE Data[4]; // [sp+28h] [bp-478h]@38
  HLOCAL hMem; // [sp+2Ch] [bp-474h]@1
  DWORD cbData; // [sp+30h] [bp-470h]@14
  HKEY hKey; // [sp+34h] [bp-46Ch]@1
  SP_LOG_TOKEN LogToken; // [sp+38h] [bp-468h]@4
  char v26[4]; // [sp+40h] [bp-460h]@7
  WCHAR String1; // [sp+44h] [bp-45Ch]@56
  WCHAR String2; // [sp+248h] [bp-258h]@64
  WCHAR Dst[40]; // [sp+44Ch] [bp-54h]@14

  hKey = 0;
  hMem = 0;
  DeviceInfoSet = a1;
  DeviceInfoData = a2;
  v17[0] = 0;
  v15 = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x4Au, &MessageGuid);
  LogToken = SetupGetThreadLogToken();
  _SetupWriteTextLog(
    LogToken,
    0x40000000u,
    2 * (g_IsInUpgrade == 0) + 4,
    "[NdisCoinst: Enter NcipHandleInstallPostProcessing]");
  if ( NcipIsValidHandle((int)DeviceInfoSet) && DeviceInfoData && a3 )
  {
    *(_DWORD *)v26 = NcipOpenDriverRegistryKey(DeviceInfoSet, DeviceInfoData, 1u, 0, 2u, 0x2001Bu, (int)&hKey);
    if ( *(_DWORD *)v26 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x4Cu, &MessageGuid, v26[0]);
      v12 = *(_DWORD *)v26;
      v9 = "NdisCoinst: NcipOpenDriverRegistryKey failed with error code 0x%lx";
LABEL_12:
      v8 = 1;
LABEL_13:
      _SetupWriteTextLog(LogToken, 0x40000000u, v8, v9, v12);
      goto LABEL_83;
    }
    cbData = 78;
    memset(Dst, 0, 0x4Eu);
    *(_DWORD *)v26 = NcipQueryRegistryWithType(hKey, L"NetCfgInstanceId", 1, (LPBYTE)Dst, &cbData);
    if ( *(_DWORD *)v26 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x4Du, &MessageGuid, v26[0]);
      v12 = *(_DWORD *)v26;
      v9 = "NdisCoinst: NcipQueryRegistryWithType (NetCfgInstanceID) failed with error code 0x%lx";
      goto LABEL_12;
    }
    if ( *(_DWORD *)(a3 + 524) != 2 )
    {
      *(_DWORD *)v26 = NcipSetEnableDhcp(Dst, *(_DWORD *)(a3 + 524));
      if ( *(_DWORD *)v26 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x4Eu, &MessageGuid, v26[0]);
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          1u,
          "NdisCoinst: NcipSetEnableDhcp failed with error code 0x%lx",
          *(_DWORD *)v26);
        *(_DWORD *)v26 = 0;
      }
      else
      {
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          5 - (g_IsInUpgrade != 0),
          "NdisCoinst: Set EnableDhcp to %d",
          *(_DWORD *)(a3 + 524));
      }
    }
    if ( *(_BYTE *)(a3 + 520) & 1 )
    {
      _SetupWriteTextLog(
        LogToken,
        0x40000000u,
        4u,
        "NdisCoinst: Delete interface IfType %d, NetLuidIndex %d",
        *(_WORD *)(a3 + 514),
        *(_DWORD *)(a3 + 516));
      *(_DWORD *)v26 = NcipDeletePersistedInterface(*(_WORD *)(a3 + 514), *(_DWORD *)(a3 + 516));
      if ( *(_DWORD *)v26 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x4Fu, &MessageGuid, v26[0]);
        v12 = *(_DWORD *)v26;
        v9 = "NdisCoinst: NcipDeletePersistedInterface failed with error code 0x%lx";
        goto LABEL_12;
      }
      *(_DWORD *)v26 = NcipFreeNetLuidIndex(*(_WORD *)(a3 + 514), *(_DWORD *)(a3 + 516));
      if ( *(_DWORD *)v26 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x50u, &MessageGuid, v26[0]);
        v12 = *(_DWORD *)v26;
        v9 = "NdisCoinst: NcipFreeNetLuidIndex failed with error code 0x%lx";
        goto LABEL_12;
      }
    }
    if ( *(_BYTE *)(a3 + 520) & 2 )
    {
      _SetupWriteTextLog(
        LogToken,
        0x40000000u,
        5 - (g_IsInUpgrade != 0),
        "NdisCoinst: Update connection name - %ws",
        a3);
      cbData = 4;
      *(_DWORD *)v26 = NcipQueryRegistryWithType(hKey, L"*IfType", 4, Data, &cbData);
      if ( *(_DWORD *)v26 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x51u, &MessageGuid, v26[0]);
        v12 = *(_DWORD *)v26;
        v9 = "NdisCoinst: NcipQueryRegistryWithType (IfType) failed with error code 0x%lx";
        goto LABEL_12;
      }
      if ( *(_DWORD *)Data == 1 )
      {
        v13 = "NdisCoinst: IfType is still IF_TYPE_OTHER";
        v10 = 4;
LABEL_45:
        _SetupWriteTextLog(LogToken, 0x40000000u, v10, v13);
        goto LABEL_83;
      }
      cbData = 4;
      v3 = NcipQueryRegistryWithType(hKey, L"Characteristics", 4, v16, &cbData);
      *(_DWORD *)v26 = v3;
      if ( v3 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x52u, &MessageGuid, v3);
        v12 = v3;
        v9 = "NdisCoinst: NcipQueryRegistryWithType (Characteristics) failed with error code 0x%lx";
        goto LABEL_12;
      }
      if ( !memcmp(&DeviceInfoData->ClassGuid, &GUID_DEVCLASS_INFRARED, 0x10u) )
        v15 = 1;
      if ( v16[0] & 8 || v15 )
        v17[0] = 1;
      v4 = NcipGetDefaultName(1, v17[0], -1, 0, &String1, 0);
      *(_DWORD *)v26 = v4;
      if ( v4 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x53u, &MessageGuid, v4);
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          1u,
          "NdisCoinst: NcipGetDefaultName (old) failed with error code 0x%lx",
          v4);
        goto LABEL_83;
      }
      cbData = 4;
      if ( NcipQueryRegistryWithType(hKey, L"*PhysicalMediaType", 4, v19, &cbData) )
        *(_DWORD *)v19 = -1;
      v5 = NcipGetDefaultName(*(__int16 *)Data, v17[0], *(int *)v19, 0, &String2, 0);
      *(_DWORD *)v26 = v5;
      if ( v5 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x54u, &MessageGuid, v5);
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          1u,
          "NdisCoinst: NcipGetDefaultName (new) failed with error code 0x%lx",
          v5);
        goto LABEL_83;
      }
      _SetupWriteTextLog(
        LogToken,
        0x40000000u,
        5 - (g_IsInUpgrade != 0),
        "NdisCoinst: IfType %d, IsHiddenDevice %d, PhysicalMediaType %d OldDefaultName %ws, NewDefaultName %ws",
        *(_DWORD *)Data,
        (unsigned __int8)v17[0],
        *(_DWORD *)v19,
        &String1,
        &String2);
      if ( !lstrcmpiW(&String1, &String2) )
      {
        v13 = "NdisCoinst: Old and new default names are the same";
        v10 = 5 - (g_IsInUpgrade != 0);
        goto LABEL_45;
      }
      *(_DWORD *)v26 = NcipWaitForMultipleObjects();
      if ( *(_DWORD *)v26 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x55u, &MessageGuid, v26[0]);
        v12 = *(_DWORD *)v26;
        v9 = "NdisCoinst: NcipWaitForMultipleObjects failed with error code 0x%lx";
        v8 = 5 - (g_IsInUpgrade != 0);
        goto LABEL_13;
      }
      *(_DWORD *)v26 = NcipGetConnectionNameInternal(
                         (int)Dst,
                         (int)L"System\\CurrentControlSet\\Control\\Network\\{4D36E972-E325-11CE-BFC1-08002BE10318}",
                         (int)&hMem,
                         0,
                         0);
      if ( *(_DWORD *)v26 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x56u, &MessageGuid, v26[0]);
        v14 = *(_DWORD *)v26;
        v11 = "NdisCoinst: NcipGetConnectionNameInternal failed with error code 0x%lx";
      }
      else
      {
        if ( lstrcmpiW((LPCWSTR)hMem, (LPCWSTR)a3) )
        {
          _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NdisCoinst: Default name has been modified %ws", hMem);
          goto LABEL_82;
        }
        *(_DWORD *)v26 = NcipCreateConnectionName((int)Dst, *(__int16 *)Data, v16[0], v15, *(int *)v19, 0);
        if ( !*(_DWORD *)v26 )
        {
          if ( v16[0] & 4 )
          {
            if ( *(_DWORD *)Data == 71 )
            {
              *(_DWORD *)v26 = RegQueryValueExW(hKey, L"PnPCapabilities", 0, 0, 0, 0);
              if ( *(_DWORD *)v26 )
              {
                v7 = RegSetValueExW(hKey, L"PnPCapabilities", 0, 4u, &::Data, 4u);
                *(_DWORD *)v26 = v7;
                if ( v7 )
                  _SetupWriteTextLog(
                    LogToken,
                    0x40000000u,
                    5 - (g_IsInUpgrade != 0),
                    "NdisCoinst: Failed to disable WoL for legacy FAT device with error code 0x%lx",
                    v7);
              }
            }
          }
          goto LABEL_82;
        }
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x57u, &MessageGuid, v26[0]);
        v14 = *(_DWORD *)v26;
        v11 = "NdisCoinst: NcipCreateConnectionName failed with error code 0x%lx";
      }
      _SetupWriteTextLog(LogToken, 0x40000000u, 1u, v11, v14);
LABEL_82:
      ReleaseMutex(g_hMutex);
      goto LABEL_83;
    }
  }
  else
  {
    *(_DWORD *)v26 = 87;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_qqq(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x4Bu,
        &MessageGuid,
        (char)DeviceInfoSet,
        (char)DeviceInfoData,
        a3);
    _SetupWriteTextLog(
      LogToken,
      0x40000000u,
      1u,
      "NdisCoinst: Invalid parameter DeviceInfoSet 0x%p, DeviceInfoData 0x%p, PrivateData 0x%p",
      DeviceInfoSet,
      DeviceInfoData,
      a3);
  }
LABEL_83:
  if ( NcipIsValidHandle((int)hKey) )
    RegCloseKey(hKey);
  if ( hMem )
  {
    LocalFree(hMem);
    hMem = 0;
  }
  _SetupWriteTextLog(
    LogToken,
    0x40000000u,
    2 * (g_IsInUpgrade == 0) + 4,
    "[NdisCoinst: Exit NcipHandleInstallPostProcessing]");
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x58u, &MessageGuid);
  return *(_DWORD *)v26;
}
// 32E12B8: using guessed type wchar_t aSystemCurren_0[80];
// 32F3068: using guessed type int g_IsInUpgrade;

//----- (032E68B1) --------------------------------------------------------
signed int __stdcall NcipHandleRemovePreProcessing(int a2, int a3, int a4)
{
  SP_LOG_TOKEN v4; // kr00_8@1

  v4 = SetupGetThreadLogToken();
  _SetupWriteTextLog(v4, 0x40000000u, 2 * (g_IsInUpgrade == 0) + 4, "[NdisCoinst: Enter NcipHandleRemovePreProcessing]");
  _SetupWriteTextLog(v4, 0x40000000u, 2 * (g_IsInUpgrade == 0) + 4, "[NdisCoinst: Exit NcipHandleRemovePreProcessing]");
  return -536870362;
}
// 32F3068: using guessed type int g_IsInUpgrade;

//----- (032E691B) --------------------------------------------------------
int __stdcall NcipHandleRemovePostProcessing(int a2, int a3, int a4)
{
  SP_LOG_TOKEN v4; // kr00_8@1

  v4 = SetupGetThreadLogToken();
  _SetupWriteTextLog(
    v4,
    0x40000000u,
    2 * (g_IsInUpgrade == 0) + 4,
    "[NdisCoinst: Enter NcipHandleRemovePostProcessing]");
  _SetupWriteTextLog(v4, 0x40000000u, 2 * (g_IsInUpgrade == 0) + 4, "[NdisCoinst: Exit NcipHandleRemovePostProcessing]");
  return 0;
}
// 32F3068: using guessed type int g_IsInUpgrade;

//----- (032E6982) --------------------------------------------------------
int __stdcall OnMachineUILanguageSwitch(LPCWSTR lpString1, LPCWSTR lpString2, int a3)
{
  PVOID v3; // eax@1
  char v4; // bl@4
  int lpString2a; // [sp+18h] [bp+Ch]@7

  v3 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x59u, &MessageGuid);
    v3 = WPP_GLOBAL_Control;
  }
  v4 = (char)lpString2;
  if ( !lpString1 || !lpString2 )
  {
    lpString2a = 2;
    if ( v3 == &WPP_GLOBAL_Control )
      return lpString2a;
    if ( !(*((_BYTE *)v3 + 28) & 1) )
      goto LABEL_15;
    WPP_SF_dL(*((_QWORD *)v3 + 2), 0x5Au, &MessageGuid, (char)lpString1, v4);
    goto LABEL_14;
  }
  if ( lstrcmpiW(lpString1, lpString2) )
  {
    lpString2a = NcipOnMachineUILanguageSwitch(lpString1, lpString2, a3);
    goto LABEL_14;
  }
  lpString2a = 0;
  v3 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
    return lpString2a;
  if ( *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
  {
    WPP_SF_S(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x5Bu, &MessageGuid, (int)lpString1);
LABEL_14:
    v3 = WPP_GLOBAL_Control;
  }
LABEL_15:
  if ( v3 != &WPP_GLOBAL_Control && *((_BYTE *)v3 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v3 + 2), 0x5Cu, &MessageGuid);
  return lpString2a;
}

//----- (032E6A56) --------------------------------------------------------
int __stdcall OnMachineUILanguageInit(const wchar_t *a1, int a2)
{
  PVOID v2; // eax@1
  DWORD cbData; // [sp+Ch] [bp-10h]@14
  BYTE Data[4]; // [sp+10h] [bp-Ch]@1
  int v6; // [sp+14h] [bp-8h]@1
  HKEY phkResult; // [sp+18h] [bp-4h]@1

  v6 = 0;
  *(_DWORD *)Data = 0;
  phkResult = 0;
  v2 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x5Du, &MessageGuid);
    v2 = WPP_GLOBAL_Control;
  }
  if ( a1 )
  {
    if ( a2 & 1 )
    {
      if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 28) & 0x10 )
        WPP_SF_(*((_QWORD *)v2 + 2), 0x5Fu, &MessageGuid);
    }
    else if ( RegOpenKeyExW(
                HKEY_LOCAL_MACHINE,
                L"System\\CurrentControlSet\\Services\\NDIS\\Parameters",
                0,
                0x20019u,
                &phkResult)
           || (cbData = 4, NcipQueryRegistryWithType(HKEY_LOCAL_MACHINE, L"IgnoreMuiInit", 4, Data, &cbData))
           || !*(_DWORD *)Data )
    {
      v6 = NcipOnMachineUILanguageInit(a1, a2);
    }
    else if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x60u, &MessageGuid);
    }
  }
  else
  {
    v6 = 2;
    if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 28) & 1 )
      WPP_SF_q(*((_QWORD *)v2 + 2), 0x5Eu, &MessageGuid, 0);
  }
  if ( NcipIsValidHandle((int)phkResult) )
    RegCloseKey(phkResult);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x61u, &MessageGuid);
  return v6;
}

//----- (032E6B8F) --------------------------------------------------------
LPCWSTR __stdcall UpdateAdvancedParameter(int a1, int a2, DWORD dwType, int a4, DWORD a5)
{
  LSTATUS v5; // eax@11
  DWORD v6; // eax@17
  const CHAR *v8; // [sp-8h] [bp-C0h]@17
  DWORD v9; // [sp-4h] [bp-BCh]@17
  DWORD cbData; // [sp+10h] [bp-A8h]@11
  LPCWSTR lpString2; // [sp+14h] [bp-A4h]@1
  struct _SP_CLASSINSTALL_HEADER ClassInstallParams; // [sp+18h] [bp-A0h]@1
  int v13; // [sp+20h] [bp-98h]@1
  int v14; // [sp+24h] [bp-94h]@1
  int v15; // [sp+28h] [bp-90h]@1
  DWORD Type; // [sp+2Ch] [bp-8Ch]@1
  DWORD MemberIndex; // [sp+30h] [bp-88h]@1
  HDEVINFO DeviceInfoSet; // [sp+34h] [bp-84h]@4
  HKEY hKey; // [sp+38h] [bp-80h]@1
  SP_LOG_TOKEN LogToken; // [sp+3Ch] [bp-7Ch]@4
  LPCWSTR lpValueName; // [sp+44h] [bp-74h]@1
  struct _SP_DEVINFO_DATA DeviceInfoData; // [sp+48h] [bp-70h]@8
  WCHAR Dst[40]; // [sp+64h] [bp-54h]@11

  MemberIndex = 0;
  hKey = 0;
  lpValueName = (LPCWSTR)a2;
  ClassInstallParams.cbSize = 8;
  ClassInstallParams.InstallFunction = 0;
  v13 = 0;
  v14 = 0;
  lpString2 = (LPCWSTR)a1;
  v15 = 0;
  Type = 1;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x62u, &MessageGuid);
  LogToken = SetupGetThreadLogToken();
  _SetupWriteTextLog(
    LogToken,
    0x40000000u,
    2 * (g_IsInUpgrade == 0) + 4,
    "[NdisCoinst: Enter UpdateAdvancedParameter] GUID %ws, Keyword %ws",
    a1,
    lpValueName);
  DeviceInfoSet = SetupDiGetClassDevsW(&GUID_DEVCLASS_NET, 0, 0, 0xAu);
  if ( DeviceInfoSet == (HDEVINFO)-1 )
  {
    lpValueName = (LPCWSTR)GetLastError();
    _SetupWriteTextLog(
      LogToken,
      0x40000000u,
      1u,
      "NDISCOINST: SetupDiGetClassDevs failed with error 0x%lx",
      lpValueName);
    goto LABEL_29;
  }
  while ( 1 )
  {
    if ( hKey )
    {
      RegCloseKey(hKey);
      hKey = 0;
    }
    DeviceInfoData.cbSize = 28;
    if ( !SetupDiEnumDeviceInfo(DeviceInfoSet, MemberIndex, &DeviceInfoData) )
      break;
    ++MemberIndex;
    hKey = SetupDiOpenDevRegKey(DeviceInfoSet, &DeviceInfoData, 1u, 0, 2u, 0x2001Fu);
    if ( hKey == (HKEY)-1 )
    {
      hKey = 0;
    }
    else
    {
      cbData = 78;
      memset(Dst, 0, 0x4Eu);
      v5 = RegQueryValueExW(hKey, L"NetCfgInstanceId", 0, &Type, (LPBYTE)Dst, &cbData);
      if ( v5 )
      {
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          1u,
          "NDISCOINST: RegQueryValueEx to query the GUID failed with errorcode 0x%lx for device %d",
          v5,
          MemberIndex - 1);
      }
      else if ( !lstrcmpiW(Dst, lpString2) )
      {
        lpValueName = (LPCWSTR)RegSetValueExW(hKey, lpValueName, 0, dwType, (const BYTE *)a4, a5);
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          2 * (g_IsInUpgrade == 0) + 4,
          "NDISCOINST: Found matching device and set the keyword with errorCode 0x%lx for device %d",
          lpValueName,
          MemberIndex - 1);
        goto LABEL_15;
      }
    }
  }
  lpValueName = (LPCWSTR)GetLastError();
  _SetupWriteTextLog(
    LogToken,
    0x40000000u,
    1u,
    "NDISCOINST: Failed to find a matching device. Errorcode 0x%lx, devCount %d",
    lpValueName,
    MemberIndex);
LABEL_15:
  if ( !lpValueName )
  {
    ClassInstallParams.InstallFunction = 18;
    v14 = 1;
    v13 = 2;
    if ( !SetupDiSetClassInstallParamsW(DeviceInfoSet, &DeviceInfoData, &ClassInstallParams, 0x14u) )
    {
LABEL_17:
      v6 = GetLastError();
      v9 = v6;
      v8 = "NDISCOINST: SetupDiSetClassInstallParams failed with errorcode 0x%lx";
LABEL_18:
      lpValueName = (LPCWSTR)v6;
      _SetupWriteTextLog(LogToken, 0x40000000u, 1u, v8, v9);
      goto LABEL_25;
    }
    if ( SetupDiCallClassInstaller(0x12u, DeviceInfoSet, &DeviceInfoData) )
    {
      _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NDISCOINST: Disabled the adapter");
      ClassInstallParams.InstallFunction = 18;
      v14 = 1;
      v13 = 1;
      if ( !SetupDiSetClassInstallParamsW(DeviceInfoSet, &DeviceInfoData, &ClassInstallParams, 0x14u) )
        goto LABEL_17;
      if ( SetupDiCallClassInstaller(0x12u, DeviceInfoSet, &DeviceInfoData) )
      {
        lpValueName = 0;
        _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NDISCOINST: Enabled the device");
        goto LABEL_25;
      }
    }
    v6 = GetLastError();
    v9 = v6;
    v8 = "NDISCOINST: SetupDiCallClassInstaller failed with errorcode 0x%lx";
    goto LABEL_18;
  }
LABEL_25:
  if ( hKey )
    RegCloseKey(hKey);
  if ( DeviceInfoSet )
    SetupDiDestroyDeviceInfoList(DeviceInfoSet);
LABEL_29:
  _SetupWriteTextLog(
    LogToken,
    0x40000000u,
    2 * (g_IsInUpgrade == 0) + 4,
    "[NdisCoinst: Exit UpdateAdvancedParameter] ErrorCode 0x%lx",
    lpValueName);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x63u, &MessageGuid);
  return lpValueName;
}
// 32F3068: using guessed type int g_IsInUpgrade;

//----- (032E6F41) --------------------------------------------------------
HRESULT __stdcall StringCchCopyW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszSrc)
{
  HRESULT result; // eax@1
  STRSAFE_LPWSTR v4; // eax@5
  HRESULT v5; // ebx@5
  size_t v6; // esi@5
  wchar_t v7; // cx@7

  result = 0;
  if ( !cchDest || cchDest > 0x7FFFFFFF )
    result = -2147024809;
  if ( result >= 0 )
  {
    v4 = pszDest;
    v5 = 0;
    v6 = cchDest;
    if ( !cchDest )
      goto LABEL_14;
    do
    {
      if ( !(2147483646 - cchDest + v6) )
        break;
      v7 = *(STRSAFE_LPWSTR)((char *)v4 + (char *)pszSrc - (char *)pszDest);
      if ( !v7 )
        break;
      *v4 = v7;
      ++v4;
      --v6;
    }
    while ( v6 );
    if ( !v6 )
    {
LABEL_14:
      --v4;
      v5 = -2147024774;
    }
    *v4 = 0;
    result = v5;
  }
  return result;
}

//----- (032E6FEC) --------------------------------------------------------
int __stdcall NciGetConnectionName(GUID *rguid, int a2, int a3, int a4)
{
  PVOID v4; // eax@1
  signed int v5; // ebx@5
  HRESULT v6; // eax@21
  size_t v7; // edx@25
  HRESULT v8; // eax@32
  size_t pcchLength; // [sp+Ch] [bp-64h]@21
  char v11[4]; // [sp+10h] [bp-60h]@1
  STRSAFE_LPWSTR pszDest; // [sp+14h] [bp-5Ch]@1
  STRSAFE_PCNZWCH psz; // [sp+18h] [bp-58h]@1
  OLECHAR sz; // [sp+1Ch] [bp-54h]@8

  psz = 0;
  pszDest = (STRSAFE_LPWSTR)a2;
  *(_DWORD *)v11 = a4;
  v4 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x11u, &MessageGuid);
    v4 = WPP_GLOBAL_Control;
  }
  if ( !rguid )
  {
    v5 = 87;
    if ( v4 != &WPP_GLOBAL_Control && *((_BYTE *)v4 + 28) & 1 )
    {
      WPP_SF_qqLq(*((_QWORD *)v4 + 2), 0x12u, &MessageGuid, 0, (char)pszDest, a3, v11[0]);
LABEL_37:
      v4 = WPP_GLOBAL_Control;
      goto LABEL_38;
    }
    goto LABEL_38;
  }
  if ( !StringFromGUID2(rguid, &sz, 39) )
  {
    v5 = 122;
    v4 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
    {
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x13u, &MessageGuid, 122);
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  v5 = NcipWaitForMultipleObjects();
  if ( v5 )
  {
    v4 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
    {
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x14u, &MessageGuid, v5);
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  v5 = NcipGetConnectionNameInternal(
         (int)&sz,
         (int)L"System\\CurrentControlSet\\Control\\Network\\{4D36E972-E325-11CE-BFC1-08002BE10318}",
         (int)&psz,
         0,
         0);
  ReleaseMutex(g_hMutex);
  if ( v5 )
  {
    v4 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
    {
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x15u, &MessageGuid, v5);
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  v6 = StringCchLengthW(psz, 0x101u, &pcchLength);
  if ( v6 < 0 )
  {
    v5 = (unsigned __int16)v6;
    v4 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
    {
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x16u, &MessageGuid, v5);
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  v7 = pcchLength;
  if ( *(_DWORD *)v11 )
    **(_DWORD **)v11 = 2 * pcchLength + 2;
  if ( !pszDest )
  {
LABEL_36:
    v5 = 0;
    goto LABEL_37;
  }
  if ( a3 >= 2 * v7 + 2 )
  {
    v8 = StringCchCopyW(pszDest, (unsigned int)a3 >> 1, psz);
    if ( v8 < 0 )
    {
      v5 = (unsigned __int16)v8;
      v4 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      {
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x18u, &MessageGuid, v5);
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    goto LABEL_36;
  }
  v5 = 234;
  v4 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
  {
    WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x17u, &MessageGuid, a3, v7);
    goto LABEL_37;
  }
LABEL_38:
  if ( psz )
  {
    LocalFree((HLOCAL)psz);
    psz = 0;
    v4 = WPP_GLOBAL_Control;
  }
  if ( v4 != &WPP_GLOBAL_Control && *((_BYTE *)v4 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v4 + 2), 0x19u, &MessageGuid);
  return v5;
}
// 32E12B8: using guessed type wchar_t aSystemCurren_0[80];

//----- (032E721E) --------------------------------------------------------
size_t __stdcall NciSetConnectionName(int a1, STRSAFE_PCNZWCH psz)
{
  STRSAFE_PCNZWCH v2; // ebx@1
  HRESULT v3; // eax@11
  int v5; // [sp+Ch] [bp-6Ch]@1
  LPCWSTR lpString2; // [sp+18h] [bp-60h]@1
  char v7; // [sp+1Fh] [bp-59h]@1
  size_t pcchLength; // [sp+20h] [bp-58h]@4
  OLECHAR sz; // [sp+24h] [bp-54h]@28

  v5 = 0;
  lpString2 = 0;
  v2 = psz;
  v7 = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Au, &MessageGuid);
  pcchLength = NcipWaitForMultipleObjects();
  if ( pcchLength )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Bu, &MessageGuid, pcchLength);
  }
  else
  {
    if ( a1 && psz && *psz )
    {
      v3 = StringCchLengthW(psz, 0x101u, &pcchLength);
      if ( v3 >= 0 )
      {
        while ( !_wcschr(L"\\/:*?\"<>|\t", *v2) )
        {
          if ( *v2 != 32 )
            ++v5;
          ++v2;
          if ( !*v2 )
          {
            if ( v5 )
            {
              if ( StringFromGUID2((const GUID *const )a1, &sz, 39) )
              {
                pcchLength = NcipGetConnectionNameInternal(
                               (int)&sz,
                               (int)L"System\\CurrentControlSet\\Control\\Network\\{4D36E972-E325-11CE-BFC1-08002BE10318}",
                               (int)&lpString2,
                               0,
                               0);
                if ( pcchLength )
                {
                  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x21u, &MessageGuid, pcchLength);
                }
                else if ( lstrcmpiW(psz, lpString2) )
                {
                  pcchLength = NcipIsNameDuplicate(psz, &sz, (int)&v7);
                  if ( pcchLength )
                  {
                    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x23u, &MessageGuid, pcchLength);
                  }
                  else if ( v7 )
                  {
                    pcchLength = 52;
                    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                      WPP_SF_S(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x24u, &MessageGuid, (int)psz);
                  }
                  else
                  {
                    pcchLength = NcipUpdateConnectionName((int)&sz, psz, 0, 0, 1, 0);
                  }
                }
                else
                {
                  pcchLength = 0;
                  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x22u, &MessageGuid);
                }
              }
              else
              {
                pcchLength = 122;
                if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                  WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x20u, &MessageGuid, 122);
              }
            }
            else
            {
              pcchLength = 87;
              if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Fu, &MessageGuid);
            }
            goto LABEL_52;
          }
        }
        pcchLength = 87;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_h(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Eu, &MessageGuid, *v2);
      }
      else
      {
        pcchLength = (unsigned __int16)v3;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Du, &MessageGuid, v3);
      }
    }
    else
    {
      pcchLength = 87;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Cu, &MessageGuid, a1, (char)psz);
    }
LABEL_52:
    if ( lpString2 )
    {
      LocalFree((HLOCAL)lpString2);
      lpString2 = 0;
    }
    ReleaseMutex(g_hMutex);
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x25u, &MessageGuid);
  }
  return pcchLength;
}
// 32E12B8: using guessed type wchar_t aSystemCurren_0[80];

//----- (032E7539) --------------------------------------------------------
int __stdcall NcipHandleInstallPreProcessing(void *a1, struct _SP_DEVINFO_DATA *a2, int a3)
{
  int v3; // edi@4
  int v4; // ST30_4@7
  int v5; // edi@45
  LSTATUS v6; // eax@46
  HRESULT v7; // eax@52
  int v8; // eax@122
  HLOCAL v9; // eax@188
  HLOCAL v10; // edi@188
  bool v11; // zf@193
  LSTATUS v12; // eax@209
  LSTATUS v13; // eax@211
  DWORD v15; // [sp-8h] [bp-12Ch]@11
  const CHAR *v16; // [sp-8h] [bp-12Ch]@29
  const CHAR *v17; // [sp-8h] [bp-12Ch]@148
  const CHAR *v18; // [sp-4h] [bp-128h]@11
  int v19; // [sp-4h] [bp-128h]@29
  int v20; // [sp-4h] [bp-128h]@148
  struct _SYSTEMTIME SystemTime; // [sp+Ch] [bp-118h]@1
  BYTE Data[4]; // [sp+1Ch] [bp-108h]@46
  BYTE v23[4]; // [sp+20h] [bp-104h]@107
  int v24; // [sp+24h] [bp-100h]@1
  BYTE v25[4]; // [sp+28h] [bp-FCh]@102
  int v26; // [sp+2Ch] [bp-F8h]@1
  char v27[4]; // [sp+30h] [bp-F4h]@1
  BYTE v28[4]; // [sp+34h] [bp-F0h]@109
  int v29; // [sp+38h] [bp-ECh]@1
  BYTE *lpData; // [sp+3Ch] [bp-E8h]@1
  STRSAFE_LPCWSTR pszSrc; // [sp+40h] [bp-E4h]@1
  HDEVINFO DeviceInfoSet; // [sp+44h] [bp-E0h]@1
  int v33; // [sp+48h] [bp-DCh]@1
  HKEY v34; // [sp+4Ch] [bp-D8h]@1
  PSP_DEVINFO_DATA DeviceInfoData; // [sp+50h] [bp-D4h]@1
  char v36; // [sp+57h] [bp-CDh]@1
  char v37[4]; // [sp+58h] [bp-CCh]@32
  char v38; // [sp+5Dh] [bp-C7h]@1
  char v39; // [sp+5Eh] [bp-C6h]@1
  char v40; // [sp+5Fh] [bp-C5h]@1
  BYTE OutBuffer[4]; // [sp+60h] [bp-C4h]@135
  BYTE v42[4]; // [sp+64h] [bp-C0h]@81
  HKEY hKey; // [sp+68h] [bp-BCh]@1
  unsigned __int8 v44; // [sp+6Fh] [bp-B5h]@1
  DWORD cbData; // [sp+70h] [bp-B4h]@32
  char v46; // [sp+77h] [bp-ADh]@1
  SP_LOG_TOKEN LogToken; // [sp+78h] [bp-ACh]@4
  wchar_t Dst[40]; // [sp+80h] [bp-A4h]@32
  BYTE pszDest[80]; // [sp+D0h] [bp-54h]@45

  DeviceInfoSet = a1;
  DeviceInfoData = a2;
  *(_DWORD *)v27 = a3;
  SystemTime.wYear = 0;
  v24 = 0;
  hKey = 0;
  v40 = 0;
  v36 = 0;
  pszSrc = 0;
  lpData = 0;
  LOBYTE(v33) = 0;
  LOBYTE(v29) = 0;
  v34 = 0;
  v38 = 0;
  v44 = 0;
  v39 = 0;
  v46 = 0;
  *(_DWORD *)&SystemTime.wMonth = 0;
  *(_DWORD *)&SystemTime.wDay = 0;
  *(_DWORD *)&SystemTime.wMinute = 0;
  v26 = 2;
  SystemTime.wMilliseconds = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x26u, &MessageGuid);
  v3 = 0;
  LogToken = SetupGetThreadLogToken();
  _SetupWriteTextLog(
    LogToken,
    0x40000000u,
    2 * (g_IsInUpgrade == 0) + 4,
    "[NdisCoinst: Enter NcipHandleInstallPreProcessing]");
  if ( !NcipIsValidHandle((int)DeviceInfoSet) || !DeviceInfoData || !*(_DWORD *)v27 )
  {
    v3 = 87;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_qqq(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x27u,
        &MessageGuid,
        (char)DeviceInfoSet,
        (char)DeviceInfoData,
        v27[0]);
    _SetupWriteTextLog(
      LogToken,
      0x40000000u,
      1u,
      "NDISCOINST: Invalid parameters DeviceInfoSet 0x%p, DeviceInfoData 0x%p, ContextPrivateData 0x%p",
      DeviceInfoSet,
      DeviceInfoData,
      *(_DWORD *)v27);
    goto LABEL_218;
  }
  v4 = (int)DeviceInfoData;
  **(_DWORD **)v27 = 0;
  if ( NcipIsNullDriverInstall(DeviceInfoSet, v4) )
  {
    NcipSetNewDeviceInstall(DeviceInfoSet, DeviceInfoData);
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x28u, &MessageGuid);
    v18 = "NdisCoinst: Null driver install";
    v15 = 4;
LABEL_12:
    _SetupWriteTextLog(LogToken, 0x40000000u, v15, v18);
    goto LABEL_218;
  }
  if ( !memcmp(&DeviceInfoData->ClassGuid, &GUID_DEVCLASS_INFRARED, 0x10u) )
    LOBYTE(v33) = 1;
  if ( NcipIsInUpgrade() )
  {
    _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NdisCoinst: In upgrade");
    if ( NcipGetUpgradeKey(DeviceInfoSet, DeviceInfoData, v33, (int)&v34) )
    {
      v34 = 0;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Au, &MessageGuid);
      _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NdisCoinst: No matching device found in downlevel OS");
    }
    else
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x29u, &MessageGuid, (char)v34);
      _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NdisCoinst: Found matching device from downlevel OS");
    }
  }
  v3 = NcipOpenDriverRegistryKey(DeviceInfoSet, DeviceInfoData, 1u, 0, 2u, 0x2001Bu, (int)&hKey);
  if ( v3 )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Bu, &MessageGuid, v3);
    v19 = v3;
    v16 = "NdisCoinst: NcipOpenDriverRegistryKey failed with error code 0x%lx";
LABEL_30:
    _SetupWriteTextLog(LogToken, 0x40000000u, 1u, v16, v19);
    goto LABEL_218;
  }
  if ( NcipIsValidHandle((int)v34) )
  {
    cbData = 78;
    memset(Dst, 0, 0x4Eu);
    *(_DWORD *)v37 = NcipQueryRegistryWithType(v34, L"NetCfgInstanceId", 1, (LPBYTE)Dst, &cbData);
    if ( *(_DWORD *)v37 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Eu, &MessageGuid, v37[0]);
      _SetupWriteTextLog(
        LogToken,
        0x40000000u,
        1u,
        "NdisCoinst: NcipQueryRegistryWithType (NetCfgInstanceId from downlevel) failed with error code 0x%lx",
        *(_DWORD *)v37);
    }
    else
    {
      v44 = 1;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
        WPP_SF_S(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Cu, &MessageGuid, (int)Dst);
      _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NdisCoinst: Found NetCfgInstanceID from the downlevel OS %ws", Dst);
      cbData = 78;
      *(_DWORD *)v37 = RegSetValueExW(hKey, L"DownlevelNetCfgInstanceId", 0, 1u, (const BYTE *)Dst, 0x4Eu);
      if ( *(_DWORD *)v37 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Du, &MessageGuid, v37[0]);
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          1u,
          "NdisCoinst: RegSetValueEx (DownlevelAdapterGuid) failed with error code 0x%lx",
          *(_DWORD *)v37);
      }
    }
  }
  cbData = 78;
  memset(pszDest, 0, 0x4Eu);
  v5 = NcipQueryRegistryWithType(hKey, L"NetCfgInstanceId", 1, pszDest, &cbData);
  if ( v5 )
  {
    *(_DWORD *)Data = 1;
    v6 = RegSetValueExW(hKey, L"NewDeviceInstall", 0, 4u, Data, 4u);
    *(_DWORD *)v37 = v6;
    if ( v6 )
    {
      v3 = v6;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Fu, &MessageGuid, v6);
      v19 = *(_DWORD *)v37;
      v16 = "NdisCoinst: RegSetValueExW NewDeviceInstall = 1 failed with error code 0x%lx";
      goto LABEL_30;
    }
    _SetupWriteTextLog(LogToken, 0x40000000u, 5 - (g_IsInUpgrade != 0), "NdisCoinst: NetCfgInstanceId does not exist");
    if ( v44 )
    {
      v7 = StringCchCopyW((STRSAFE_LPWSTR)pszDest, 0x27u, Dst);
      if ( v7 >= 0 )
      {
        v5 = 0;
        _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NdisCoinst: Using Guid from downlevel");
      }
      else
      {
        v5 = (unsigned __int16)v7;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x30u, &MessageGuid, v7);
        _SetupWriteTextLog(LogToken, 0x40000000u, 1u, "NdisCoinst: StringCchCopyW failed with error code 0x%lx", v5);
      }
    }
    if ( v5 )
    {
      v3 = NcipGenerateUniqueGuid((LPOLESTR)pszDest);
      if ( v3 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x31u, &MessageGuid, v3);
        v19 = v3;
        v16 = "NdisCoinst: NcipGenerateUniqueGuid failed with error code 0x%lx";
        goto LABEL_30;
      }
    }
    _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NdisCoinst: Guid of the adapter is %ws", pszDest);
    cbData = 78;
    v3 = RegSetValueExW(hKey, L"NetCfgInstanceId", 0, 1u, pszDest, 0x4Eu);
    if ( v3 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x32u, &MessageGuid, v3);
      v19 = v3;
      v16 = "NdisCoinst: RegSetValueEx (NetCfgInstanceId) failed with error code 0x%lx";
      goto LABEL_30;
    }
  }
  else
  {
    *(_DWORD *)Data = 0;
    v3 = RegSetValueExW(hKey, L"NewDeviceInstall", 0, 4u, Data, 4u);
    if ( v3 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x33u, &MessageGuid, v3);
      v19 = v3;
      v16 = "NdisCoinst: RegSetValueExW NewDeviceInstall = 0 failed with error code 0x%lx";
      goto LABEL_30;
    }
    _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NdisCoinst: Guid of the adapter exists and is %ws", pszDest);
  }
  v3 = NcipProcessInf((int)DeviceInfoSet, (int)DeviceInfoData, hKey, (int)&v24, (int)&v26);
  if ( v3 )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x34u, &MessageGuid, v3);
    v19 = v3;
    v16 = "NdisCoinst: NcipProcessInf failed with error code 0x%lx";
    goto LABEL_30;
  }
  if ( NcipIsValidHandle((int)v34) )
  {
    cbData = 4;
    v3 = NcipQueryRegistryWithType(v34, L"*IfType", 4, v42, &cbData);
    if ( !v3 )
    {
      v38 = 1;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x35u, &MessageGuid, v42[0]);
      _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NdisCoinst: Found IfType %d from the downlevel OS", *(_DWORD *)v42);
      goto LABEL_91;
    }
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x36u, &MessageGuid, v3);
    _SetupWriteTextLog(
      LogToken,
      0x40000000u,
      1u,
      "NdisCoinst: NcipQueryRegistryWithType (IfType from downlevel) failed with error code 0x%lx",
      v3);
  }
  cbData = 4;
  v3 = NcipQueryRegistryWithType(hKey, L"*IfType", 4, v42, &cbData);
LABEL_91:
  if ( v3 )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x37u, &MessageGuid, v3);
    v19 = v3;
    v16 = "NdisCoinst: NcipQueryRegistryWithType (IfType) failed with error 0x%lx";
    goto LABEL_30;
  }
  _SetupWriteTextLog(
    LogToken,
    0x40000000u,
    5 - (g_IsInUpgrade != 0),
    "NdisCoinst: IfType from registry is %d",
    *(_DWORD *)v42);
  if ( *(_DWORD *)v42 == 1 && v24 == 71 )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x38u, &MessageGuid);
    _SetupWriteTextLog(
      LogToken,
      0x40000000u,
      4u,
      "NdisCoinst: This is a failed legacy FAT driver being upgraded to Native-Wifi driver",
      0);
    *(_DWORD *)v42 = v24;
    v46 = 1;
  }
  cbData = 4;
  v3 = NcipQueryRegistryWithType(hKey, L"Characteristics", 4, v25, &cbData);
  if ( v3 )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x39u, &MessageGuid, v3);
    v19 = v3;
    v16 = "NdisCoinst: NcipQueryRegistryWithType (Characteristics) failed with error 0x%lx";
    goto LABEL_30;
  }
  cbData = 4;
  if ( NcipQueryRegistryWithType(hKey, L"*MediaType", 4, v23, &cbData) )
    *(_DWORD *)v23 = -1;
  cbData = 4;
  if ( NcipQueryRegistryWithType(hKey, L"*PhysicalMediaType", 4, v28, &cbData) )
    *(_DWORD *)v28 = -1;
  v3 = NcipIsBridgeMiniport((int)DeviceInfoSet, DeviceInfoData, (int)&v29);
  if ( v3 )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x3Au, &MessageGuid, v3);
    v19 = v3;
    v16 = "NdisCoinst: NcipIsBridgeMiniport failed with error 0x%lx";
    goto LABEL_30;
  }
  v3 = NcipWaitForMultipleObjects();
  if ( v3 )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x3Bu, &MessageGuid, v3);
    v19 = v3;
    v16 = "NdisCoinst: NcipWaitForMultipleObjects failed with error 0x%lx";
    goto LABEL_30;
  }
  _SetupWriteTextLog(
    LogToken,
    0x40000000u,
    4u,
    "NdisCoinst: IfType %d, Characteristics 0x%lx, IsIrdaDevice %d, PhysicalMediaType %d, MediaType %d, IsBridge %d, FoundGuidInDownlevel %d, EnableDhcp %d",
    *(_DWORD *)v42,
    *(_DWORD *)v25,
    (unsigned __int8)v33,
    *(_DWORD *)v28,
    *(_DWORD *)v23,
    (unsigned __int8)v29,
    v44,
    v26);
  if ( v46 )
    v8 = NcipCreateConnectionName((int)pszDest, *(__int16 *)v42, v25[0], v33, *(int *)v28, v29);
  else
    v8 = NcipCheckAndCreateConnectionName(
           (int)pszDest,
           *(__int16 *)v42,
           v25[0],
           v33,
           *(int *)v28,
           v29,
           v44 != 0 ? (unsigned int)Dst : 0,
           (int)&v36);
  v3 = v8;
  if ( v8 )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x3Du, &MessageGuid, v8);
    _SetupWriteTextLog(
      LogToken,
      0x40000000u,
      1u,
      "NdisCoinst: NcipCheckAndCreateConnectionName failed with error 0x%lx",
      v3);
  }
  else
  {
    v3 = NcipGetConnectionNameInternal(
           (int)pszDest,
           (int)L"System\\CurrentControlSet\\Control\\Network\\{4D36E972-E325-11CE-BFC1-08002BE10318}",
           (int)&pszSrc,
           0,
           0);
    if ( v3 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x3Cu, &MessageGuid, v3);
      _SetupWriteTextLog(
        LogToken,
        0x40000000u,
        1u,
        "NdisCoinst: NcipGetConnectionNameInternal failed with error 0x%lx",
        v3);
    }
  }
  ReleaseMutex(g_hMutex);
  if ( !v3 )
  {
    _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NdisCoinst: Connection name is %ws", pszSrc);
    cbData = 4;
    *(_DWORD *)v37 = NcipQueryRegistryWithType(hKey, L"NetLuidIndex", 4, OutBuffer, &cbData);
    if ( *(_DWORD *)v37 || v46 == 1 )
    {
      if ( v46 )
      {
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          5 - (g_IsInUpgrade != 0),
          "NdisCoinst: NetLuidIndex exists - %d, but upgrading wireless adapter",
          *(_DWORD *)OutBuffer);
        v33 = *(_DWORD *)OutBuffer;
      }
      else
      {
        _SetupWriteTextLog(LogToken, 0x40000000u, 5 - (g_IsInUpgrade != 0), "NdisCoinst: NetLuidIndex does not exist");
      }
      if ( NcipIsValidHandle((int)v34) && v38 )
      {
        cbData = 4;
        *(_DWORD *)v37 = NcipQueryRegistryWithType(v34, L"NetLuidIndex", 4, OutBuffer, &cbData);
        if ( *(_DWORD *)v37 )
        {
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x40u, &MessageGuid, v37[0]);
          _SetupWriteTextLog(
            LogToken,
            0x40000000u,
            1u,
            "NdisCoinst: NcipQueryRegistryWithType (NetLuidIndex - downlevel) failed with error 0x%lx",
            *(_DWORD *)v37);
        }
        else
        {
          if ( v46 )
          {
            v33 = *(_DWORD *)OutBuffer;
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
              WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x3Eu, &MessageGuid, OutBuffer[0]);
            v20 = *(_DWORD *)OutBuffer;
            v17 = "NdisCoinst: Found NetLuidIndex %d from the downlevel OS, but upgrading wireless adapter";
          }
          else
          {
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
              WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x3Fu, &MessageGuid, OutBuffer[0]);
            v20 = *(_DWORD *)OutBuffer;
            v17 = "NdisCoinst: Found NetLuidIndex %d from downlevel OS";
          }
          _SetupWriteTextLog(LogToken, 0x40000000u, 4u, v17, v20);
        }
      }
      if ( *(_DWORD *)v37 || v46 == 1 )
      {
        v3 = NcipAllocateNetLuidIndex(*(__int16 *)v42, OutBuffer);
        if ( v3 )
        {
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x41u, &MessageGuid, v3);
          v19 = v3;
          v16 = "NdisCoinst: NcipAllocateNetLuidIndex failed with error 0x%lx";
          goto LABEL_30;
        }
      }
      _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NdisCoinst: Allocated NetLuidIndex is %d", *(_DWORD *)OutBuffer);
      v40 = 1;
      v3 = NcipCreatePersistedInterface(
             *(__int16 *)v42,
             *(int *)OutBuffer,
             pszSrc,
             (int)pszDest,
             *(int *)v23,
             *(int *)v28,
             *(int *)v25);
      if ( v3 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x42u, &MessageGuid, v3);
        v19 = v3;
        v16 = "NdisCoinst: NcipCreatePersistentInterface failed with error 0x%lx";
        goto LABEL_30;
      }
      v39 = 1;
      if ( v38 || v46 )
      {
        cbData = 4;
        v3 = RegSetValueExW(hKey, L"*IfType", 0, 4u, v42, 4u);
        if ( v3 )
        {
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x43u, &MessageGuid, v3);
          v19 = v3;
          v16 = "NdisCoinst: RegSetValueExW (IfType from downlevel or INF) failed with error 0x%lx";
          goto LABEL_30;
        }
      }
      cbData = 4;
      v3 = RegSetValueExW(hKey, L"NetLuidIndex", 0, 4u, OutBuffer, 4u);
      if ( v3 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x44u, &MessageGuid, v3);
        v19 = v3;
        v16 = "NdisCoinst: RegSetValueEx (NetLuidIndex) failed with error 0x%lx";
        goto LABEL_30;
      }
      v40 = 0;
      v39 = 0;
    }
    else
    {
      _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NdisCoinst: NetLuidIndex exists and is %d", *(_DWORD *)OutBuffer);
    }
    if ( *(_DWORD *)v42 == 1 && v36 == 1 && !(_BYTE)v29 || v26 != 2 || v46 == 1 )
    {
      _SetupWriteTextLog(
        LogToken,
        0x40000000u,
        5 - (g_IsInUpgrade != 0),
        "NdisCoinst: Creating private install data for post-proc");
      v9 = LocalAlloc(0, 0x210u);
      v10 = v9;
      if ( !v9 )
      {
        v3 = 14;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x45u, &MessageGuid);
        v18 = "NdisCoinst: Failed to allocate memory for PrivateData";
        v15 = 1;
        goto LABEL_12;
      }
      memset(v9, 0, 0x210u);
      v11 = v46 == 0;
      *((_DWORD *)v10 + 131) = v26;
      if ( v11 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x47u, &MessageGuid);
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          5 - (g_IsInUpgrade != 0),
          "NdisCoinst: Requesting the connection name to be updated in post-processing");
        v33 = StringCchCopyW((STRSAFE_LPWSTR)v10, 0x101u, pszSrc);
        if ( v33 < 0 )
        {
          LocalFree(v10);
          v3 = (unsigned __int16)v33;
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x48u, &MessageGuid, v33);
          v19 = v3;
          v16 = "NdisCoinst: StringCchCopy failed with error code 0x%lx";
          goto LABEL_30;
        }
        *((_DWORD *)v10 + 130) |= 2u;
      }
      else
      {
        *((_DWORD *)v10 + 129) = v33;
        *((_DWORD *)v10 + 130) |= 1u;
        *((_WORD *)v10 + 257) = 1;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x46u, &MessageGuid);
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          5 - (g_IsInUpgrade != 0),
          "NdisCoinst: Requesting the Old NetLuid to be freed in post-processing");
      }
      **(_DWORD **)v27 = v10;
    }
    if ( !NcipGetDeviceInstanceId(DeviceInfoSet, DeviceInfoData, (int)&lpData) )
    {
      v12 = RegSetValueExW(hKey, L"DeviceInstanceID", 0, 1u, lpData, 2 * wcslen((const unsigned __int16 *)lpData) + 2);
      if ( v12 )
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          1u,
          "NdisCoinst: NcipHandleInstallPreProcessing failed to save DeviceInstanceID. Error = %08xx",
          v12);
    }
    GetSystemTime(&SystemTime);
    v13 = RegSetValueExW(hKey, L"InstallTimeStamp", 0, 3u, (const BYTE *)&SystemTime, 0x10u);
    if ( v13 )
      _SetupWriteTextLog(
        LogToken,
        0x40000000u,
        1u,
        "NdisCoinst: NcipHandleInstallPreProcessing failed to save InstallTimeStamp. Error = %08xx",
        v13);
    v3 = -536870362;
  }
LABEL_218:
  if ( NcipIsValidHandle((int)hKey) )
    RegCloseKey(hKey);
  if ( NcipIsValidHandle((int)v34) )
    RegCloseKey(v34);
  if ( v39 )
  {
    _SetupWriteTextLog(
      LogToken,
      0x40000000u,
      4u,
      "NdisCoinst: Deleting the persisted interface IfType %d NetLuidIndex %d",
      *(_DWORD *)v42,
      *(_DWORD *)OutBuffer);
    NcipDeletePersistedInterface(*(__int16 *)v42, *(int *)OutBuffer);
  }
  if ( v40 )
  {
    _SetupWriteTextLog(
      LogToken,
      0x40000000u,
      4u,
      "NdisCoinst: Freeing the allocated NetLuid IfType %d NetLuidIndex %d",
      *(_DWORD *)v42,
      *(_DWORD *)OutBuffer);
    NcipFreeNetLuidIndex(*(__int16 *)v42, *(int *)OutBuffer);
  }
  if ( pszSrc )
  {
    LocalFree((HLOCAL)pszSrc);
    pszSrc = 0;
  }
  if ( lpData )
  {
    LocalFree(lpData);
    lpData = 0;
  }
  _SetupWriteTextLog(
    LogToken,
    0x40000000u,
    2 * (g_IsInUpgrade == 0) + 4,
    "[NdisCoinst: Exit NcipHandleInstallPreProcessing]");
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x49u, &MessageGuid);
  return v3;
}
// 32E12B8: using guessed type wchar_t aSystemCurren_0[80];
// 32F3068: using guessed type int g_IsInUpgrade;

//----- (032E88B4) --------------------------------------------------------
int __stdcall NciDeviceInstall(HLOCAL hMem, HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, int a4)
{
  int v4; // eax@14
  int v5; // esi@15
  int v6; // eax@16
  int v7; // esi@30
  SP_LOG_TOKEN LogToken; // [sp+Ch] [bp-Ch]@4
  signed int v10; // [sp+14h] [bp-4h]@1
  HLOCAL hMema; // [sp+20h] [bp+8h]@15

  v10 = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xAu, &MessageGuid);
  LogToken = SetupGetThreadLogToken();
  if ( NcipIsValidHandle((int)DeviceInfoSet) && a4 )
  {
    if ( hMem == (HLOCAL)2 )
    {
      if ( !DeviceInfoData )
      {
        v10 = 87;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_qqLq(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xCu, &MessageGuid, 2, (char)DeviceInfoSet, 0, a4);
        _SetupWriteTextLog(LogToken, 0x40000000u, 1u, "NdisCoinst: DIF_INSTALLDEVICE called with DeviceInfoData NULL");
        goto LABEL_42;
      }
      if ( !*(_DWORD *)a4 )
      {
        *(_DWORD *)(a4 + 8) = 0;
        v4 = NcipHandleInstallPreProcessing(DeviceInfoSet, DeviceInfoData, a4 + 8);
        goto LABEL_29;
      }
      NcipUpdateIfDescr(DeviceInfoSet, DeviceInfoData);
      NcipSetiScsiFlags(DeviceInfoSet, DeviceInfoData);
      v7 = *(_DWORD *)(a4 + 4);
      hMema = *(HLOCAL *)(a4 + 8);
      if ( v7 )
      {
        v10 = *(_DWORD *)(a4 + 4);
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xDu, &MessageGuid, v7);
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          1u,
          "NdisCoinst: DIF_INSTALLDEVICE Post-processing called with InstallResult 0x%lx",
          v7);
        goto LABEL_40;
      }
      if ( NcipIsInUpgrade() )
        NcipUpgradeAdapterSettings(DeviceInfoSet, (DWORD)DeviceInfoData);
      if ( !hMema )
        goto LABEL_42;
      v6 = NcipHandleInstallPostProcessing(DeviceInfoSet, DeviceInfoData, (int)hMema);
    }
    else
    {
      if ( hMem != (HLOCAL)5 )
      {
LABEL_42:
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
        {
          if ( *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
            WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x10u, &MessageGuid);
        }
        return v10;
      }
      if ( !DeviceInfoData )
      {
        v10 = 87;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_qqLq(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xEu, &MessageGuid, 5, (char)DeviceInfoSet, 0, a4);
        _SetupWriteTextLog(LogToken, 0x40000000u, 1u, "NdisCoinst: DIF_REMOVE called with DeviceInfoData NULL");
        goto LABEL_42;
      }
      if ( !*(_DWORD *)a4 )
      {
        *(_DWORD *)(a4 + 8) = 0;
        v4 = NcipHandleRemovePreProcessing((int)DeviceInfoSet, (int)DeviceInfoData, a4 + 8);
LABEL_29:
        v10 = v4;
        goto LABEL_42;
      }
      v5 = *(_DWORD *)(a4 + 4);
      hMema = *(HLOCAL *)(a4 + 8);
      if ( v5 )
      {
        v10 = *(_DWORD *)(a4 + 4);
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xFu, &MessageGuid, v5);
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          1u,
          "NdisCoinst: DIF_REMOVE Post-processing called with InstallResult 0x%lx",
          v5);
        goto LABEL_40;
      }
      v6 = NcipHandleRemovePostProcessing(*(_DWORD *)(a4 + 8), (int)DeviceInfoSet, (int)DeviceInfoData);
    }
    v10 = v6;
LABEL_40:
    if ( hMema )
      LocalFree(hMema);
    goto LABEL_42;
  }
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
    WPP_SF_qqLq(
      *((_QWORD *)WPP_GLOBAL_Control + 2),
      0xBu,
      &MessageGuid,
      (char)hMem,
      (char)DeviceInfoSet,
      (char)DeviceInfoData,
      a4);
  _SetupWriteTextLog(
    LogToken,
    0x40000000u,
    1u,
    "NdisCoinst: Invalid parameter InstallFunction %d, DeviceInfoSet 0x%p, DeviceInfoData 0x%p, Context 0x%p",
    hMem,
    DeviceInfoSet,
    DeviceInfoData,
    a4);
  return 87;
}

//----- (032E8B4D) --------------------------------------------------------
int __stdcall WPP_INIT_CONTROL_ARRAY(int a1)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 25) = 0;
  *(_WORD *)(a1 + 26) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  return result;
}

//----- (032E8B75) --------------------------------------------------------
signed int __stdcall WppControlCallback(WMIDPREQUESTCODE RequestCode, PVOID RequestContext, ULONG *BufferSize, PVOID Buffer)
{
  int v4; // edx@1
  PVOID v5; // esi@1
  PVOID v6; // edi@1
  int v8; // ebx@4
  ULONG v9; // eax@4
  TRACEHANDLE v10; // kr00_8@5
  __int16 v11; // cx@6
  int v12; // ecx@8
  void *v13; // esi@10
  UCHAR RequestContext_3; // [sp+23h] [bp+Fh]@4

  v4 = 0;
  *BufferSize = 0;
  v5 = RequestContext;
  v6 = RequestContext;
  if ( RequestCode == 4 )
  {
    v10 = GetTraceLoggerHandle(Buffer);
    v8 = v10;
    RequestContext_3 = GetTraceEnableLevel(v10);
    v9 = GetTraceEnableFlags(v10);
    v4 = HIDWORD(v10);
  }
  else
  {
    if ( RequestCode != 5 )
      return 87;
    v8 = 0;
    v9 = 0;
    RequestContext_3 = 0;
  }
  v11 = *((_WORD *)v5 + 13);
  if ( v11 & 1 && *((_DWORD *)v5 + 4) )
  {
    v12 = *((_DWORD *)v5 + 4);
    *(_DWORD *)v12 = v8;
    *(_DWORD *)(v12 + 4) = v4;
    *(_DWORD *)(*((_DWORD *)v5 + 4) + 12) = RequestContext_3;
    *(_DWORD *)(*((_DWORD *)v5 + 4) + 8) = v9;
  }
  else
  {
    if ( v11 & 2 )
    {
      v13 = (void *)*((_DWORD *)v5 + 4);
      if ( v13 )
        v6 = v13;
    }
    *((_DWORD *)v6 + 4) = v8;
    *((_DWORD *)v6 + 5) = v4;
    *((_BYTE *)v6 + 25) = RequestContext_3;
    *((_DWORD *)v6 + 7) = v9;
  }
  return 0;
}

//----- (032E8C1E) --------------------------------------------------------
ULONG __stdcall WppInitUm(int a1)
{
  PVOID v1; // esi@1
  int *v2; // edi@1
  const GUID *v3; // eax@2
  ULONG result; // eax@2
  struct _TRACE_GUID_REGISTRATION TraceGuidReg; // [sp+8h] [bp-8h]@2

  v1 = WPP_GLOBAL_Control;
  v2 = &WPP_REGISTRATION_GUIDS;
  while ( v1 )
  {
    v3 = (const GUID *)*v2;
    TraceGuidReg.RegHandle = 0;
    ++v2;
    TraceGuidReg.Guid = v3;
    result = RegisterTraceGuidsW(
               (WMIDPREQUEST)WppControlCallback,
               v1,
               v3,
               1u,
               &TraceGuidReg,
               0,
               0,
               (PTRACEHANDLE)v1 + 1);
    v1 = *(PVOID *)v1;
  }
  return result;
}
// 32F33C0: using guessed type int WPP_REGISTRATION_GUIDS;

//----- (032E8C6C) --------------------------------------------------------
void __stdcall WppCleanupUm()
{
  PVOID v0; // esi@1

  v0 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
  {
    while ( v0 )
    {
      if ( *((_QWORD *)v0 + 1) )
      {
        UnregisterTraceGuids(*((_QWORD *)v0 + 1));
        *((_DWORD *)v0 + 2) = 0;
        *((_DWORD *)v0 + 3) = 0;
      }
      v0 = *(PVOID *)v0;
    }
    WPP_GLOBAL_Control = &WPP_GLOBAL_Control;
  }
}

//----- (032E8CB1) --------------------------------------------------------
signed int __stdcall DllProcessAttach(HINSTANCE a1)
{
  signed int v1; // edi@1
  int v2; // eax@3

  v1 = 1;
  if ( IsSystemUpgradeInProgress() )
    g_IsInUpgrade = 1;
  g_hInst = a1;
  WPP_INIT_CONTROL_ARRAY((int)WPP_MAIN_CB);
  WPP_REGISTRATION_GUIDS = (int)WPP_ThisDir_CTLGUID_NCITraceGuid;
  WPP_GLOBAL_Control = WPP_MAIN_CB;
  WppInitUm((int)L"Microsoft\\NetCoInstaller");
  v2 = NcipCreateGlobalMutex();
  if ( v2 )
  {
    v1 = 0;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
    {
      if ( *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xAu, &stru_32E3840, v2);
    }
  }
  return v1;
}
// 32E18C0: using guessed type int WPP_ThisDir_CTLGUID_NCITraceGuid[4];
// 32E3850: using guessed type wchar_t aMicrosoftNetco[25];
// 32F3068: using guessed type int g_IsInUpgrade;
// 32F33A0: using guessed type int WPP_MAIN_CB[8];
// 32F33C0: using guessed type int WPP_REGISTRATION_GUIDS;

//----- (032E8D36) --------------------------------------------------------
signed int __stdcall DllProcessDetach(int a1)
{
  WppCleanupUm();
  if ( g_hMutex )
  {
    CloseHandle(g_hMutex);
    g_hMutex = 0;
  }
  g_hInst = 0;
  return 1;
}

//----- (032E8D64) --------------------------------------------------------
BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
  BOOL result; // eax@1

  result = 1;
  if ( fdwReason )
  {
    if ( fdwReason == 1 )
    {
      DisableThreadLibraryCalls(hinstDLL);
      result = DllProcessAttach(hinstDLL);
    }
  }
  else
  {
    result = DllProcessDetach((int)hinstDLL);
  }
  return result;
}

//----- (032E8D9B) --------------------------------------------------------
signed int __userpurge sub_32E8D9B@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4, int a5)
{
  int v5; // ebx@1
  int v6; // esi@1
  signed int result; // eax@1
  int v8; // edi@1

  v5 = a1;
  v6 = a2;
  result = 0;
  v8 = 0;
  if ( !a2 )
    goto LABEL_11;
  do
  {
    if ( !a5 )
      break;
    if ( !*(_WORD *)v5 )
      break;
    *(_WORD *)a3 = *(_WORD *)v5;
    a3 += 2;
    v5 += 2;
    --v6;
    --a5;
    ++v8;
  }
  while ( v6 );
  if ( !v6 )
  {
LABEL_11:
    a3 -= 2;
    --v8;
    result = -2147024774;
  }
  *(_WORD *)a3 = 0;
  if ( a4 )
    *(_DWORD *)a4 = v8;
  return result;
}

//----- (032E8DF2) --------------------------------------------------------
ULONG __stdcall WPP_SF_dL(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, char a4, char a5)
{
  return TraceMessage(LoggerHandle, 0x2Bu, MessageGuid, MessageNumber, &a4, 4, &a5, 4, 0);
}

//----- (032E8E24) --------------------------------------------------------
ULONG __stdcall WPP_SF_qLDDDD(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, char a4, char a5, char a6, char a7, char a8, char a9)
{
  return TraceMessage(
           LoggerHandle,
           0x2Bu,
           MessageGuid,
           MessageNumber,
           &a4,
           4,
           &a5,
           4,
           &a6,
           4,
           &a7,
           4,
           &a8,
           4,
           &a9,
           4,
           0);
}

//----- (032E8E6B) --------------------------------------------------------
ULONG __stdcall WPP_SF_qLDDDDq(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, char a4, char a5, char a6, char a7, char a8, char a9, char a10)
{
  return TraceMessage(
           LoggerHandle,
           0x2Bu,
           MessageGuid,
           MessageNumber,
           &a4,
           4,
           &a5,
           4,
           &a6,
           4,
           &a7,
           4,
           &a8,
           4,
           &a9,
           4,
           &a10,
           4,
           0);
}

//----- (032E8EB7) --------------------------------------------------------
ULONG __stdcall WPP_SF_qLLDDqqq(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, char a4, char a5, char a6, char a7, char a8, char a9, char a10, char a11)
{
  return TraceMessage(
           LoggerHandle,
           0x2Bu,
           MessageGuid,
           MessageNumber,
           &a4,
           4,
           &a5,
           4,
           &a6,
           4,
           &a7,
           4,
           &a8,
           4,
           &a9,
           4,
           &a10,
           4,
           &a11,
           4,
           0);
}

//----- (032E8F08) --------------------------------------------------------
ULONG __stdcall WPP_SF_qqqqq(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, char a4, char a5, char a6, char a7, char a8)
{
  return TraceMessage(LoggerHandle, 0x2Bu, MessageGuid, MessageNumber, &a4, 4, &a5, 4, &a6, 4, &a7, 4, &a8, 4, 0);
}

//----- (032E8F4A) --------------------------------------------------------
HRESULT ULongLongToULong(ULONGLONG ullOperand, ULONG *pulResult)
{
  HRESULT result; // eax@2

  if ( ullOperand > 0xFFFFFFFF )
  {
    *pulResult = -1;
    result = -2147024362;
  }
  else
  {
    *pulResult = ullOperand;
    result = 0;
  }
  return result;
}

//----- (032E8F7C) --------------------------------------------------------
DWORD __stdcall NcipGetDefaultName(__int16 a1, char a2, int a3, char a4, LPWSTR lpBuffer, int a6)
{
  PVOID v6; // eax@1
  UINT v7; // edi@8
  unsigned int v8; // eax@9
  DWORD v10; // [sp+Ch] [bp-4h]@1

  v10 = 0;
  v6 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x3Du, &stru_32E3F48);
    v6 = WPP_GLOBAL_Control;
  }
  if ( lpBuffer )
  {
    v7 = 1802;
    if ( a1 != 1 )
    {
      v8 = 0;
      while ( IfAliasTable[4 * v8] != a1 )
      {
        ++v8;
        if ( v8 >= 9 )
          goto LABEL_14;
      }
      v7 = dword_32E3F5C[2 * v8];
    }
LABEL_14:
    if ( a1 == 6 && a3 == 10 )
      v7 = 1808;
    if ( a4 )
      v7 = 1810;
    if ( a2 )
      v7 = 1801;
    if ( LoadStringW(g_hInst, v7, lpBuffer, 257) )
    {
      if ( a6 )
        *(_DWORD *)a6 = v7;
    }
    else
    {
      v10 = GetLastError();
      v6 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
        return v10;
      if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
        goto LABEL_28;
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x3Fu, &stru_32E3F48, v10);
    }
    goto LABEL_27;
  }
  v10 = 87;
  if ( v6 == &WPP_GLOBAL_Control )
    return v10;
  if ( *((_BYTE *)v6 + 28) & 1 )
  {
    WPP_SF_dL(*((_QWORD *)v6 + 2), 0x3Eu, &stru_32E3F48, 0, a6);
LABEL_27:
    v6 = WPP_GLOBAL_Control;
  }
LABEL_28:
  if ( v6 != &WPP_GLOBAL_Control && *((_BYTE *)v6 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v6 + 2), 0x40u, &stru_32E3F48);
  return v10;
}
// 32E3F58: using guessed type __int16 IfAliasTable[];
// 32E3F5C: using guessed type int dword_32E3F5C[];

//----- (032E90B6) --------------------------------------------------------
HLOCAL __stdcall NcipUpdateIfDescr(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData)
{
  HLOCAL v2; // eax@6
  HLOCAL v3; // ebx@10
  DWORD v4; // eax@31
  SP_LOG_TOKEN LogToken; // [sp+4h] [bp-1Ch]@4
  BYTE v7[4]; // [sp+Ch] [bp-14h]@1
  BYTE Data[4]; // [sp+10h] [bp-10h]@1
  DWORD cbData; // [sp+14h] [bp-Ch]@1
  HKEY hKey; // [sp+18h] [bp-8h]@1
  HLOCAL hMem; // [sp+1Ch] [bp-4h]@1

  hMem = 0;
  hKey = 0;
  cbData = 0;
  *(_DWORD *)Data = 0;
  *(_DWORD *)v7 = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x47u, &stru_32E3F48);
  LogToken = SetupGetThreadLogToken();
  _SetupWriteTextLog(LogToken, 0x40000000u, 2 * (g_IsInUpgrade == 0) + 4, "[NdisCoinst: Enter NcipUpdateIfDescr]");
  if ( NcipIsValidHandle((int)DeviceInfoSet) && DeviceInfoData )
  {
    v2 = NcipGetDeviceRegistryProperty(DeviceInfoSet, DeviceInfoData, 0xCu, 0, (int)&hMem);
    if ( !v2 )
      goto LABEL_47;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x49u, &stru_32E3F48, (char)v2);
    hMem = 0;
    v3 = NcipGetDeviceRegistryProperty(DeviceInfoSet, DeviceInfoData, 0, 0, (int)&hMem);
    if ( v3 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x4Au, &stru_32E3F48, (char)v3);
      _SetupWriteTextLog(LogToken, 0x40000000u, 1u, "NdisCoinst: Failed to read Description with error code 0x%lx", v3);
    }
    else
    {
LABEL_47:
      v3 = (HLOCAL)NcipOpenDriverRegistryKey(DeviceInfoSet, DeviceInfoData, 1u, 0, 2u, 0x2001Bu, (int)&hKey);
      if ( v3 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x4Bu, &stru_32E3F48, (char)v3);
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          1u,
          "NdisCoinst: NcipOpenDriverRegistryKey failed with error code 0x%lx",
          v3);
      }
      else
      {
        cbData = 4;
        v3 = (HLOCAL)NcipQueryRegistryWithType(hKey, L"NetLuidIndex", 4, Data, &cbData);
        if ( v3 )
        {
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x4Cu, &stru_32E3F48, (char)v3);
          _SetupWriteTextLog(
            LogToken,
            0x40000000u,
            1u,
            "NdisCoinst: NcipQueryRegistryWithType (NetLuidIndex) failed with error code 0x%lx",
            v3);
        }
        else
        {
          cbData = 4;
          v3 = (HLOCAL)NcipQueryRegistryWithType(hKey, L"*IfType", 4, v7, &cbData);
          if ( v3 )
          {
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
              WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x4Du, &stru_32E3F48, (char)v3);
            _SetupWriteTextLog(
              LogToken,
              0x40000000u,
              1u,
              "NdisCoinst: NcipQueryRegistryWithType (IfType) failed with error code 0x%lx",
              v3);
          }
          else
          {
            _SetupWriteTextLog(
              LogToken,
              0x40000000u,
              5 - (g_IsInUpgrade != 0),
              "NdisCoinst: IfType %d, NetLuidIndex %d, IfDescr %ws",
              *(_DWORD *)v7,
              *(_DWORD *)Data,
              hMem);
            v4 = NcipSetInterfaceDescription(*(__int16 *)v7, *(int *)Data, (PCWSTR)hMem);
            v3 = (HLOCAL)v4;
            if ( v4 )
              _SetupWriteTextLog(
                LogToken,
                0x40000000u,
                1u,
                "NdisCoinst: NcipSetInterfaceDescription failed with error code 0x%lx",
                v4);
          }
        }
      }
    }
  }
  else
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x48u, &stru_32E3F48, (char)DeviceInfoSet, (char)DeviceInfoData);
    _SetupWriteTextLog(
      LogToken,
      0x40000000u,
      1u,
      "NdisCoinst: Invalid parameter DeviceInfoSet 0x%p, DeviceInfoData 0x%p",
      DeviceInfoSet,
      DeviceInfoData);
    v3 = (HLOCAL)87;
  }
  if ( hMem )
  {
    LocalFree(hMem);
    hMem = 0;
  }
  if ( NcipIsValidHandle((int)hKey) )
    RegCloseKey(hKey);
  _SetupWriteTextLog(LogToken, 0x40000000u, 2 * (g_IsInUpgrade == 0) + 4, "[NdisCoinst: Exit NcipUpdateIfDescr]");
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x4Eu, &stru_32E3F48);
  return v3;
}
// 32F3068: using guessed type int g_IsInUpgrade;

//----- (032E93D5) --------------------------------------------------------
HRESULT __stdcall StringCchCatW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszSrc)
{
  HRESULT result; // eax@1
  STRSAFE_LPWSTR v4; // ecx@5

  result = 0;
  if ( !cchDest || cchDest > 0x7FFFFFFF )
    result = -2147024809;
  if ( result < 0 )
  {
    v4 = 0;
  }
  else
  {
    result = StringLengthWorkerW();
    v4 = pszDest;
  }
  if ( result >= 0 )
    result = sub_32E8D9B((int)pszSrc, cchDest - (_DWORD)v4, (int)&pszDest[(_DWORD)v4], 0, 0x7FFFFFFF);
  return result;
}

//----- (032E942F) --------------------------------------------------------
HRESULT StringCchPrintfW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszFormat, ...)
{
  HRESULT result; // eax@1
  size_t v4; // esi@5
  HRESULT v5; // ebx@5
  int v6; // eax@5
  va_list va; // [sp+14h] [bp+14h]@1

  va_start(va, pszFormat);
  result = 0;
  if ( !cchDest || cchDest > 0x7FFFFFFF )
    result = -2147024809;
  if ( result >= 0 )
  {
    v4 = cchDest - 1;
    v5 = 0;
    v6 = __vsnwprintf(pszDest, cchDest - 1, pszFormat, va);
    if ( v6 < 0 || v6 > v4 )
    {
      v5 = -2147024774;
    }
    else if ( v6 != v4 )
    {
      return v5;
    }
    pszDest[v4] = 0;
    return v5;
  }
  return result;
}

//----- (032E948E) --------------------------------------------------------
SIZE_T __stdcall NcipIsNameDuplicate(const WCHAR *a1, const WCHAR *a2, int a3)
{
  PVOID v3; // eax@1
  LSTATUS v4; // eax@27
  LSTATUS v5; // ebx@27
  HRESULT v6; // eax@36
  DWORD cchName; // [sp+Ch] [bp-234h]@25
  int v9; // [sp+10h] [bp-230h]@1
  DWORD cbData; // [sp+14h] [bp-22Ch]@44
  LPCWSTR v11; // [sp+18h] [bp-228h]@1
  LPCWSTR lpString2; // [sp+1Ch] [bp-224h]@1
  DWORD dwIndex; // [sp+20h] [bp-220h]@1
  DWORD cbMaxSubKeyLen; // [sp+24h] [bp-21Ch]@12
  HKEY phkResult; // [sp+28h] [bp-218h]@1
  HKEY hKey; // [sp+2Ch] [bp-214h]@1
  void *Dst; // [sp+30h] [bp-210h]@1
  SIZE_T uBytes; // [sp+34h] [bp-20Ch]@7
  WCHAR String1; // [sp+38h] [bp-208h]@44

  v11 = a1;
  lpString2 = a2;
  v9 = a3;
  phkResult = 0;
  hKey = 0;
  Dst = 0;
  dwIndex = 0;
  v3 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Du, &stru_32E3F48);
    v3 = WPP_GLOBAL_Control;
  }
  if ( !v11 || !a3 || !lpString2 )
  {
    uBytes = 87;
    if ( v3 != &WPP_GLOBAL_Control && *((_BYTE *)v3 + 28) & 1 )
      WPP_SF_qqq(*((_QWORD *)v3 + 2), 0x1Eu, &stru_32E3F48, (char)v11, a3, (char)lpString2);
    goto LABEL_56;
  }
  *(_BYTE *)a3 = 0;
  uBytes = RegCreateKeyExW(
             HKEY_LOCAL_MACHINE,
             L"System\\CurrentControlSet\\Control\\Network\\{4D36E972-E325-11CE-BFC1-08002BE10318}",
             0,
             0,
             0,
             0xF003Fu,
             0,
             &phkResult,
             0);
  if ( uBytes )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Fu, &stru_32E3F48, uBytes);
    goto LABEL_56;
  }
  uBytes = RegQueryInfoKeyW(phkResult, 0, 0, 0, 0, &cbMaxSubKeyLen, 0, 0, 0, 0, 0, 0);
  if ( uBytes )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x20u, &stru_32E3F48, uBytes);
    goto LABEL_56;
  }
  cbMaxSubKeyLen += 13;
  if ( ULongLongToULong(2i64 * cbMaxSubKeyLen, &uBytes) < 0 )
  {
    uBytes = 534;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x21u, &stru_32E3F48);
    goto LABEL_56;
  }
  Dst = LocalAlloc(0, uBytes);
  if ( !Dst )
  {
    uBytes = 14;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x22u, &stru_32E3F48);
    goto LABEL_56;
  }
  while ( 1 )
  {
    while ( 1 )
    {
      memset(Dst, 0, 2 * cbMaxSubKeyLen);
      cchName = cbMaxSubKeyLen;
      if ( NcipIsValidHandle((int)hKey) )
      {
        RegCloseKey(hKey);
        hKey = 0;
      }
      v4 = RegEnumKeyExW(phkResult, dwIndex++, (LPWSTR)Dst, &cchName, 0, 0, 0, 0);
      v5 = v4;
      if ( v4 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x23u, &stru_32E3F48, v4);
        goto LABEL_49;
      }
      if ( lstrcmpiW((LPCWSTR)Dst, lpString2) )
        break;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x24u, &stru_32E3F48);
    }
    v6 = StringCchCatW((STRSAFE_LPWSTR)Dst, cbMaxSubKeyLen, L"\\Connection");
    if ( v6 < 0 )
    {
      v5 = (unsigned __int16)v6;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x25u, &stru_32E3F48, v6);
      goto LABEL_49;
    }
    v5 = RegOpenKeyExW(phkResult, (LPCWSTR)Dst, 0, 0x20019u, &hKey);
    if ( v5 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x26u, &stru_32E3F48, v5);
      goto LABEL_49;
    }
    cbData = 514;
    v5 = NcipQueryRegistryWithType(hKey, L"Name", 1, (LPBYTE)&String1, &cbData);
    if ( v5 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x27u, &stru_32E3F48, v5);
      goto LABEL_49;
    }
    if ( !lstrcmpiW(&String1, v11) )
      break;
LABEL_49:
    if ( v5 == 259 )
      goto LABEL_52;
  }
  *(_BYTE *)v9 = 1;
LABEL_52:
  uBytes = 0;
LABEL_56:
  if ( NcipIsValidHandle((int)phkResult) )
    RegCloseKey(phkResult);
  if ( NcipIsValidHandle((int)hKey) )
    RegCloseKey(hKey);
  if ( Dst )
    LocalFree(Dst);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x28u, &stru_32E3F48);
  return uBytes;
}

//----- (032E98F4) --------------------------------------------------------
LSTATUS __stdcall NcipUpdateConnectionName(int a1, const wchar_t *a2, BYTE *a3, BYTE *a4, char a5, char a6)
{
  PVOID v6; // eax@1
  HRESULT v7; // eax@6
  LSTATUS v8; // edi@7
  HRESULT v9; // eax@26
  HRESULT v10; // eax@35
  LSA_UNICODE_STRING DestinationString; // [sp+Ch] [bp-288h]@39
  LSA_UNICODE_STRING v13; // [sp+14h] [bp-280h]@39
  int v14; // [sp+1Ch] [bp-278h]@1
  BYTE *v15; // [sp+20h] [bp-274h]@1
  STRSAFE_PCNZWCH psz; // [sp+24h] [bp-270h]@1
  HKEY phkResult; // [sp+28h] [bp-26Ch]@1
  BYTE *lpData; // [sp+2Ch] [bp-268h]@1
  WCHAR Dst[256]; // [sp+30h] [bp-264h]@6
  wchar_t pszDest; // [sp+230h] [bp-64h]@35

  psz = a2;
  lpData = a3;
  v14 = a1;
  v15 = a4;
  phkResult = 0;
  v6 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x29u, &stru_32E3F48);
    v6 = WPP_GLOBAL_Control;
  }
  if ( a1 && psz )
  {
    memset(Dst, 0, 0x200u);
    v7 = StringCchPrintfW(
           Dst,
           0x100u,
           L"%s\\%s%s",
           L"System\\CurrentControlSet\\Control\\Network\\{4D36E972-E325-11CE-BFC1-08002BE10318}",
           a1,
           L"\\Connection");
    if ( v7 >= 0 )
    {
      v8 = RegCreateKeyExW(HKEY_LOCAL_MACHINE, Dst, 0, 0, a6 != 0, 2u, 0, &phkResult, 0);
      if ( v8 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Cu, &stru_32E3F48, v8);
      }
      else if ( lpData && (v8 = RegSetValueExW(phkResult, L"DefaultNameResourceId", 0, 4u, lpData, 4u)) != 0 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Du, &stru_32E3F48, *(_DWORD *)lpData, v8);
      }
      else if ( v15 && (v8 = RegSetValueExW(phkResult, L"DefaultNameIndex", 0, 4u, v15, 4u)) != 0 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Eu, &stru_32E3F48, *(_DWORD *)v15, v8);
      }
      else
      {
        v9 = StringCchLengthW(psz, 0x101u, (size_t *)&lpData);
        if ( v9 >= 0 )
        {
          v8 = RegSetValueExW(phkResult, L"Name", 0, 1u, (const BYTE *)psz, 2 * (_DWORD)lpData + 2);
          if ( v8 )
          {
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
              WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x30u, &stru_32E3F48, v8);
          }
          else if ( a5 )
          {
            v10 = StringCchPrintfW(&pszDest, 0x2Fu, L"%s%s", L"\\Device\\", v14);
            if ( v10 >= 0 )
            {
              RtlInitUnicodeString(&DestinationString, &pszDest);
              RtlInitUnicodeString(&v13, psz);
              NdisHandlePnPEvent(1, 14, (int)&DestinationString, (int)&v13, 0, 0, 0);
            }
            else
            {
              v8 = (unsigned __int16)v10;
              if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x31u, &stru_32E3F48, v10);
            }
          }
        }
        else
        {
          v8 = (unsigned __int16)v9;
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Fu, &stru_32E3F48, v9);
        }
      }
    }
    else
    {
      v8 = (unsigned __int16)v7;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Bu, &stru_32E3F48, v7);
    }
  }
  else
  {
    v8 = 87;
    if ( v6 != &WPP_GLOBAL_Control && *((_BYTE *)v6 + 28) & 1 )
      WPP_SF_qqqqq(*((_QWORD *)v6 + 2), 0x2Au, &stru_32E3F48, a1, (char)psz, (char)lpData, (char)v15, a5);
  }
  if ( NcipIsValidHandle((int)phkResult) )
    RegCloseKey(phkResult);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x32u, &stru_32E3F48);
  return v8;
}
// 32E3A30: using guessed type wchar_t aDevice[9];

//----- (032E9C86) --------------------------------------------------------
int __stdcall NcipGetConnectionNameInternal(int a1, int a2, int a3, BYTE *a4, BYTE *a5)
{
  int v5; // ecx@1
  PVOID v6; // eax@1
  HRESULT v7; // eax@7
  int v8; // eax@17
  int v9; // eax@23
  BYTE *v10; // eax@32
  HLOCAL hMem; // [sp+18h] [bp-214h]@32
  SIZE_T uBytes; // [sp+1Ch] [bp-210h]@17
  HKEY phkResult; // [sp+20h] [bp-20Ch]@1
  int v15; // [sp+24h] [bp-208h]@8
  wchar_t pszDest; // [sp+28h] [bp-204h]@7

  v5 = a3;
  phkResult = 0;
  v6 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x33u, &stru_32E3F48);
    v6 = WPP_GLOBAL_Control;
    v5 = a3;
  }
  if ( a1 && a2 && v5 )
  {
    *(_DWORD *)v5 = 0;
    v7 = StringCchPrintfW(&pszDest, 0x100u, L"%s\\%s%s", a2, a1, L"\\Connection");
    if ( v7 >= 0 )
    {
      v15 = RegOpenKeyExW(HKEY_LOCAL_MACHINE, &pszDest, 0, 0x20019u, &phkResult);
      if ( v15 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x36u, &stru_32E3F48, v15);
      }
      else
      {
        if ( a4 )
        {
          uBytes = 4;
          v8 = NcipQueryRegistryWithType(phkResult, L"DefaultNameResourceId", 4, a4, &uBytes);
          if ( v8 )
          {
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
              WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x37u, &stru_32E3F48, v8);
            *(_DWORD *)a4 = -1;
          }
        }
        if ( a5 )
        {
          uBytes = 4;
          v9 = NcipQueryRegistryWithType(phkResult, L"DefaultNameIndex", 4, a5, &uBytes);
          if ( v9 )
          {
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
              WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x38u, &stru_32E3F48, v9);
            *(_DWORD *)a5 = -1;
          }
        }
        uBytes = 0;
        v15 = NcipQueryRegistryWithType(phkResult, L"Name", 1, 0, &uBytes);
        if ( v15 )
        {
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x39u, &stru_32E3F48, v15);
        }
        else
        {
          v10 = (BYTE *)LocalAlloc(0, uBytes);
          hMem = v10;
          if ( v10 )
          {
            v15 = NcipQueryRegistryWithType(phkResult, L"Name", 1, v10, &uBytes);
            if ( v15 )
            {
              LocalFree(hMem);
              if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x3Bu, &stru_32E3F48, v15);
            }
            else
            {
              *(_DWORD *)a3 = hMem;
            }
          }
          else
          {
            v15 = 14;
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
              WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x3Au, &stru_32E3F48);
          }
        }
      }
    }
    else
    {
      v15 = (unsigned __int16)v7;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x35u, &stru_32E3F48, v7);
    }
  }
  else
  {
    v15 = 87;
    if ( v6 != &WPP_GLOBAL_Control && *((_BYTE *)v6 + 28) & 1 )
      WPP_SF_qqqqq(*((_QWORD *)v6 + 2), 0x34u, &stru_32E3F48, a1, a2, v5, (char)a4, (char)a5);
  }
  if ( NcipIsValidHandle((int)phkResult) )
    RegCloseKey(phkResult);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x3Cu, &stru_32E3F48);
  return v15;
}

//----- (032E9FFD) --------------------------------------------------------
signed int __stdcall NcipConnectionNameFromDownlevel(int a1, int a2)
{
  PVOID v2; // eax@1
  signed int v3; // ebx@6
  int v5; // [sp+Ch] [bp-10h]@1
  int v6; // [sp+10h] [bp-Ch]@1
  HLOCAL hMem; // [sp+14h] [bp-8h]@1
  char v8; // [sp+1Bh] [bp-1h]@1

  hMem = 0;
  v5 = -1;
  v6 = -1;
  v8 = 0;
  v2 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x41u, &stru_32E3F48);
    v2 = WPP_GLOBAL_Control;
  }
  if ( a2 && a1 )
  {
    v3 = NcipGetConnectionNameInternal(
           a1,
           (int)L"System\\Setup\\Upgrade\\NDIS\\ConnectionNameRoot\\{4D36E972-E325-11CE-BFC1-08002BE10318}",
           (int)&hMem,
           (BYTE *)&v5,
           (BYTE *)&v6);
    if ( v3 )
    {
      v2 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      {
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x43u, &stru_32E3F48, v3);
LABEL_23:
        v2 = WPP_GLOBAL_Control;
        goto LABEL_24;
      }
    }
    else
    {
      if ( NcipIsNameDuplicate((const WCHAR *)hMem, (const WCHAR *)a2, (int)&v8) || !v8 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x44u, &stru_32E3F48);
        v3 = NcipUpdateConnectionName(
               a2,
               (const wchar_t *)hMem,
               (BYTE *)(v5 != -1 ? (unsigned int)&v5 : 0),
               (BYTE *)(v6 != -1 ? (unsigned int)&v6 : 0),
               1,
               0);
        goto LABEL_23;
      }
      v2 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x45u, &stru_32E3F48);
        v2 = WPP_GLOBAL_Control;
      }
      v3 = 1168;
    }
  }
  else
  {
    v3 = 87;
    if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 28) & 1 )
    {
      WPP_SF_dL(*((_QWORD *)v2 + 2), 0x42u, &stru_32E3F48, a1, a2);
      goto LABEL_23;
    }
  }
LABEL_24:
  if ( hMem )
  {
    LocalFree(hMem);
    hMem = 0;
    v2 = WPP_GLOBAL_Control;
  }
  if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v2 + 2), 0x46u, &stru_32E3F48);
  return v3;
}
// 32E3B18: using guessed type wchar_t aSystemSetupUpg[84];

//----- (032EA193) --------------------------------------------------------
SIZE_T __stdcall NcipGenerateUniqueIfAlias(int a1, __int16 a2, char a3, int a4, char a5, int a6, int a7, int a8)
{
  int v8; // eax@1
  PVOID v9; // esi@1
  DWORD v10; // eax@6
  SIZE_T v11; // ebx@6
  HRESULT v12; // eax@11
  HRESULT v13; // eax@17
  HRESULT v14; // eax@32
  wchar_t *v15; // eax@36
  HLOCAL *v16; // esi@36
  HRESULT v17; // eax@40
  size_t pcchLength; // [sp+14h] [bp-420h]@1
  int v20; // [sp+18h] [bp-41Ch]@1
  char v21[4]; // [sp+1Ch] [bp-418h]@1
  unsigned int v22; // [sp+20h] [bp-414h]@1
  char v23; // [sp+27h] [bp-40Dh]@15
  wchar_t pszSrc; // [sp+28h] [bp-40Ch]@6
  wchar_t pszDest; // [sp+22Ch] [bp-208h]@11

  *(_DWORD *)v21 = a1;
  v8 = a6;
  v20 = a6;
  v22 = 2;
  pcchLength = 0;
  v9 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x13u, &stru_32E3F48);
    v9 = WPP_GLOBAL_Control;
    v8 = v20;
  }
  if ( !*(_DWORD *)v21 || !v8 )
  {
    v11 = 87;
    if ( v9 == &WPP_GLOBAL_Control )
      return v11;
    if ( !(*((_BYTE *)v9 + 28) & 1) )
      goto LABEL_51;
    WPP_SF_qLLDDqqq(*((_QWORD *)v9 + 2), 0x14u, &stru_32E3F48, v21[0], a2, a3, a4, a5, v8, a7, a8);
    goto LABEL_50;
  }
  *(_DWORD *)v8 = 0;
  v10 = NcipGetDefaultName(a2, a3, a4, a5, &pszSrc, a7);
  v11 = v10;
  if ( v10 )
  {
    v9 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
      return v11;
    if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
      goto LABEL_51;
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x15u, &stru_32E3F48, v10);
    goto LABEL_50;
  }
  v12 = StringCchCopyW(&pszDest, 0x101u, &pszSrc);
  if ( v12 >= 0 )
  {
    while ( 1 )
    {
      v23 = 0;
      v11 = NcipIsNameDuplicate(&pszDest, *(const WCHAR **)v21, (int)&v23);
      if ( v11 )
        goto LABEL_50;
      if ( !v23 )
        goto LABEL_19;
      v13 = StringCchPrintfW(&pszDest, 0x101u, L"%s %d", &pszSrc, v22++);
      if ( v13 < 0 )
        break;
      if ( v22 > 0xFFFF )
      {
LABEL_19:
        v9 = WPP_GLOBAL_Control;
        goto LABEL_20;
      }
    }
    v11 = (unsigned __int16)v13;
    v9 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
    {
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x17u, &stru_32E3F48, v13);
      v9 = WPP_GLOBAL_Control;
    }
    if ( v11 )
      goto LABEL_51;
LABEL_20:
    if ( v22 > 0xFFFF )
    {
      v11 = 1450;
      if ( v9 == &WPP_GLOBAL_Control )
        return v11;
      if ( *((_BYTE *)v9 + 28) & 1 )
      {
        WPP_SF_(*((_QWORD *)v9 + 2), 0x18u, &stru_32E3F48);
        goto LABEL_50;
      }
      goto LABEL_51;
    }
    if ( a8 )
    {
      *(_DWORD *)a8 = v22 != 2 ? v22 - 1 : 0;
      v9 = WPP_GLOBAL_Control;
    }
    v14 = StringCchLengthW(&pszDest, 0x101u, &pcchLength);
    if ( v14 < 0 )
    {
      v11 = (unsigned __int16)v14;
      if ( v9 == &WPP_GLOBAL_Control )
        return v11;
      if ( *((_BYTE *)v9 + 28) & 1 )
      {
        WPP_SF_q(*((_QWORD *)v9 + 2), 0x19u, &stru_32E3F48, v14);
        goto LABEL_50;
      }
      goto LABEL_51;
    }
    v11 = pcchLength + 1;
    v15 = (wchar_t *)LocalAlloc(0, 2 * (pcchLength + 1));
    v16 = (HLOCAL *)v20;
    *(_DWORD *)v20 = v15;
    if ( !v15 )
    {
      v11 = 14;
      v9 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
        return v11;
      if ( *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Au, &stru_32E3F48);
        goto LABEL_50;
      }
      goto LABEL_51;
    }
    v17 = StringCchCopyW(v15, v11, &pszDest);
    LOWORD(v11) = v17;
    if ( v17 >= 0 )
    {
      v11 = 0;
      goto LABEL_50;
    }
    if ( *v16 )
    {
      LocalFree(*v16);
      *v16 = 0;
    }
    v11 = (unsigned __int16)v11;
    v9 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
    {
      if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
        goto LABEL_51;
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Bu, &stru_32E3F48, v11);
      goto LABEL_50;
    }
    return v11;
  }
  v11 = (unsigned __int16)v12;
  v9 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
  {
    if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
    {
LABEL_51:
      if ( v9 != &WPP_GLOBAL_Control && *((_BYTE *)v9 + 28) & 8 )
        WPP_SF_(*((_QWORD *)v9 + 2), 0x1Cu, &stru_32E3F48);
      return v11;
    }
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x16u, &stru_32E3F48, v12);
LABEL_50:
    v9 = WPP_GLOBAL_Control;
    goto LABEL_51;
  }
  return v11;
}

//----- (032EA508) --------------------------------------------------------
int __stdcall NcipCreateConnectionName(int a1, __int16 a2, char a3, char a4, int a5, char a6)
{
  PVOID v6; // eax@1
  int v8; // [sp+Ch] [bp-10h]@1
  int v9; // [sp+10h] [bp-Ch]@1
  int v10; // [sp+14h] [bp-8h]@1
  HLOCAL hMem; // [sp+18h] [bp-4h]@1

  hMem = 0;
  LOBYTE(v10) = 0;
  v8 = 0;
  v9 = 0;
  v6 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x10u, &stru_32E3F48);
    v6 = WPP_GLOBAL_Control;
  }
  if ( a1 )
  {
    if ( a3 & 8 || a4 )
      LOBYTE(v10) = 1;
    v10 = NcipGenerateUniqueIfAlias(a1, a2, v10, a5, a6, (int)&hMem, (int)&v8, (int)&v9);
    if ( !v10 )
      v10 = NcipUpdateConnectionName(a1, (const wchar_t *)hMem, (BYTE *)&v8, (BYTE *)&v9, 1, 0);
    goto LABEL_13;
  }
  v10 = 87;
  if ( v6 != &WPP_GLOBAL_Control && *((_BYTE *)v6 + 28) & 1 )
  {
    WPP_SF_qLDDDD(*((_QWORD *)v6 + 2), 0x11u, &stru_32E3F48, 0, a2, a3, a4, a5, a6);
LABEL_13:
    v6 = WPP_GLOBAL_Control;
  }
  if ( hMem )
  {
    LocalFree(hMem);
    v6 = WPP_GLOBAL_Control;
    hMem = 0;
  }
  if ( v6 != &WPP_GLOBAL_Control && *((_BYTE *)v6 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v6 + 2), 0x12u, &stru_32E3F48);
  return v10;
}

//----- (032EA61E) --------------------------------------------------------
int __stdcall NcipCheckAndCreateConnectionName(int a1, __int16 a2, char a3, char a4, int a5, char a6, int a7, int a8)
{
  PVOID v8; // eax@1
  int v9; // ebx@4
  HLOCAL hMem; // [sp+8h] [bp-4h]@1
  int v12; // [sp+30h] [bp+24h]@6

  hMem = 0;
  v8 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xAu, &stru_32E3F48);
    v8 = WPP_GLOBAL_Control;
  }
  v9 = a8;
  if ( !a1 || !a8 )
  {
    v12 = 87;
    if ( v8 != &WPP_GLOBAL_Control && *((_BYTE *)v8 + 28) & 1 )
    {
      WPP_SF_qLDDDDq(*((_QWORD *)v8 + 2), 0xBu, &stru_32E3F48, a1, a2, a3, a4, a5, a6, v9);
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  *(_BYTE *)a8 = 0;
  v12 = NcipGetConnectionNameInternal(
          a1,
          (int)L"System\\CurrentControlSet\\Control\\Network\\{4D36E972-E325-11CE-BFC1-08002BE10318}",
          (int)&hMem,
          0,
          0);
  if ( !v12 )
  {
LABEL_23:
    v8 = WPP_GLOBAL_Control;
    goto LABEL_24;
  }
  if ( !a7 )
    goto LABEL_15;
  v12 = NcipConnectionNameFromDownlevel(a7, a1);
  if ( v12 )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xDu, &stru_32E3F48, v12);
LABEL_15:
    v12 = NcipCreateConnectionName(a1, a2, a3, a4, a5, a6);
    if ( !v12 )
    {
      *(_BYTE *)v9 = 1;
      goto LABEL_23;
    }
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
    {
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xEu, &stru_32E3F48, v12);
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  v8 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xCu, &stru_32E3F48);
    goto LABEL_23;
  }
LABEL_24:
  if ( hMem )
  {
    LocalFree(hMem);
    hMem = 0;
    v8 = WPP_GLOBAL_Control;
  }
  if ( v8 != &WPP_GLOBAL_Control && *((_BYTE *)v8 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v8 + 2), 0xFu, &stru_32E3F48);
  return v12;
}

//----- (032EA7B0) --------------------------------------------------------
int __stdcall NcipGenerateUniqueGuid(LPOLESTR lpsz)
{
  PVOID v1; // eax@1
  HRESULT v2; // eax@8
  signed int v4; // [sp+Ch] [bp-18h]@1
  GUID pguid; // [sp+10h] [bp-14h]@8

  v4 = 0;
  v1 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x40u, &o_1_a_87_s_0_tpsig2);
    v1 = WPP_GLOBAL_Control;
  }
  if ( lpsz )
  {
    v2 = CoCreateGuid(&pguid);
    if ( v2 >= 0 )
    {
      if ( !StringFromGUID2(&pguid, lpsz, 39) )
      {
        v4 = 122;
        v1 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
          return v4;
        if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
          goto LABEL_17;
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x43u, &o_1_a_87_s_0_tpsig2, 122);
      }
    }
    else
    {
      v4 = (unsigned __int16)v2;
      v1 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
        return v4;
      if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
        goto LABEL_17;
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x42u, &o_1_a_87_s_0_tpsig2, v4);
    }
    goto LABEL_16;
  }
  v4 = 87;
  if ( v1 == &WPP_GLOBAL_Control )
    return v4;
  if ( *((_BYTE *)v1 + 28) & 1 )
  {
    WPP_SF_q(*((_QWORD *)v1 + 2), 0x41u, &o_1_a_87_s_0_tpsig2, 0);
LABEL_16:
    v1 = WPP_GLOBAL_Control;
  }
LABEL_17:
  if ( v1 != &WPP_GLOBAL_Control && *((_BYTE *)v1 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v1 + 2), 0x44u, &o_1_a_87_s_0_tpsig2);
  return v4;
}

//----- (032EA8B8) --------------------------------------------------------
bool __stdcall NcipIsValidHandle(int a1)
{
  return a1 && a1 != -1;
}

//----- (032EA8D8) --------------------------------------------------------
signed int __stdcall NcipWaitForMultipleObjects()
{
  PVOID v0; // eax@1
  DWORD v2; // eax@12
  PVOID v3; // eax@14
  MSG Msg; // [sp+4h] [bp-20h]@10
  char v5[4]; // [sp+20h] [bp-4h]@12

  v0 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x5Au, &o_1_a_87_s_0_tpsig2);
    v0 = WPP_GLOBAL_Control;
  }
  if ( g_hMutex )
  {
    while ( 1 )
    {
      v2 = MsgWaitForMultipleObjects(1u, &g_hMutex, 0, 0x7530u, 0x4FFu);
      *(_DWORD *)v5 = v2;
      if ( v2 != 1 )
        break;
      while ( PeekMessageW(&Msg, 0, 0, 0, 1u) )
        DispatchMessageW(&Msg);
    }
    if ( v2 == 258 )
    {
      v3 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
      {
        if ( *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        {
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x5Cu, &o_1_a_87_s_0_tpsig2);
LABEL_21:
          v3 = WPP_GLOBAL_Control;
        }
LABEL_22:
        if ( v3 != &WPP_GLOBAL_Control && *((_BYTE *)v3 + 28) & 8 )
          WPP_SF_(*((_QWORD *)v3 + 2), 0x5Eu, &o_1_a_87_s_0_tpsig2);
        return *(_DWORD *)v5;
      }
    }
    else
    {
      if ( *(_DWORD *)v5 != -1 )
        goto LABEL_21;
      *(_DWORD *)v5 = GetLastError();
      v3 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
      {
        if ( *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        {
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x5Du, &o_1_a_87_s_0_tpsig2, v5[0]);
          goto LABEL_21;
        }
        goto LABEL_22;
      }
    }
    return *(_DWORD *)v5;
  }
  if ( v0 != &WPP_GLOBAL_Control )
  {
    if ( *((_BYTE *)v0 + 28) & 1 )
      WPP_SF_(*((_QWORD *)v0 + 2), 0x5Bu, &o_1_a_87_s_0_tpsig2);
  }
  return 87;
}

//----- (032EAA15) --------------------------------------------------------
int __stdcall NcipCreateGlobalMutex()
{
  PVOID v0; // eax@1
  DWORD v1; // eax@18
  int v2; // ebx@18
  ACL *v3; // eax@18
  HLOCAL v4; // eax@30
  void *v5; // ebx@30
  struct _SECURITY_ATTRIBUTES MutexAttributes; // [sp+Ch] [bp-28h]@1
  HLOCAL hMem; // [sp+18h] [bp-1Ch]@1
  PACL pAcl; // [sp+1Ch] [bp-18h]@1
  PSID pSid; // [sp+20h] [bp-14h]@1
  char v11[4]; // [sp+24h] [bp-10h]@5
  struct _SID_IDENTIFIER_AUTHORITY pIdentifierAuthority; // [sp+28h] [bp-Ch]@1

  MutexAttributes.nLength = 0;
  MutexAttributes.lpSecurityDescriptor = 0;
  pIdentifierAuthority.Value[0] = 0;
  pIdentifierAuthority.Value[1] = 0;
  pIdentifierAuthority.Value[2] = 0;
  pIdentifierAuthority.Value[3] = 0;
  pIdentifierAuthority.Value[4] = 0;
  pIdentifierAuthority.Value[5] = 1;
  pSid = 0;
  pAcl = 0;
  hMem = 0;
  MutexAttributes.bInheritHandle = 0;
  v0 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x5Fu, &o_1_a_87_s_0_tpsig2);
    v0 = WPP_GLOBAL_Control;
  }
  if ( g_hMutex )
  {
    *(_DWORD *)v11 = 87;
    if ( v0 != &WPP_GLOBAL_Control && *((_BYTE *)v0 + 28) & 1 )
    {
      WPP_SF_(*((_QWORD *)v0 + 2), 0x60u, &o_1_a_87_s_0_tpsig2);
      goto LABEL_55;
    }
  }
  else if ( AllocateAndInitializeSid(&pIdentifierAuthority, 1u, 0, 0, 0, 0, 0, 0, 0, 0, &pSid) )
  {
    if ( IsValidSid(pSid) )
    {
      v1 = GetLengthSid(pSid);
      v2 = v1 + 16;
      v3 = (ACL *)LocalAlloc(0, v1 + 16);
      pAcl = v3;
      if ( v3 )
      {
        memset(v3, 0, v2);
        if ( InitializeAcl(pAcl, v2, 2u) )
        {
          if ( AddAccessAllowedAce(pAcl, 2u, 0x1FFFFFu, pSid) )
          {
            v4 = LocalAlloc(0, 0x14u);
            v5 = v4;
            hMem = v4;
            if ( v4 )
            {
              if ( InitializeSecurityDescriptor(v4, 1u) )
              {
                if ( SetSecurityDescriptorDacl(v5, 1, pAcl, 0) )
                {
                  if ( SetSecurityDescriptorOwner(v5, 0, 0) )
                  {
                    if ( SetSecurityDescriptorGroup(v5, 0, 0) )
                    {
                      MutexAttributes.lpSecurityDescriptor = v5;
                      MutexAttributes.nLength = 12;
                      MutexAttributes.bInheritHandle = 0;
                      g_hMutex = CreateMutexW(&MutexAttributes, 0, L"Global\\3a886eb8-fe40-4d0a-b78b-9e0bcb683fb7");
                      if ( g_hMutex )
                      {
                        *(_DWORD *)v11 = 0;
LABEL_55:
                        v0 = WPP_GLOBAL_Control;
                        goto LABEL_56;
                      }
                      *(_DWORD *)v11 = GetLastError();
                      v0 = WPP_GLOBAL_Control;
                      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                      {
                        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x6Bu, &o_1_a_87_s_0_tpsig2, v11[0]);
                        goto LABEL_55;
                      }
                    }
                    else
                    {
                      *(_DWORD *)v11 = GetLastError();
                      v0 = WPP_GLOBAL_Control;
                      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                      {
                        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x6Au, &o_1_a_87_s_0_tpsig2, v11[0]);
                        goto LABEL_55;
                      }
                    }
                  }
                  else
                  {
                    *(_DWORD *)v11 = GetLastError();
                    v0 = WPP_GLOBAL_Control;
                    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                    {
                      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x69u, &o_1_a_87_s_0_tpsig2, v11[0]);
                      goto LABEL_55;
                    }
                  }
                }
                else
                {
                  *(_DWORD *)v11 = GetLastError();
                  v0 = WPP_GLOBAL_Control;
                  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                  {
                    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x68u, &o_1_a_87_s_0_tpsig2, v11[0]);
                    goto LABEL_55;
                  }
                }
              }
              else
              {
                *(_DWORD *)v11 = GetLastError();
                v0 = WPP_GLOBAL_Control;
                if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                {
                  WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x67u, &o_1_a_87_s_0_tpsig2, v11[0]);
                  goto LABEL_55;
                }
              }
            }
            else
            {
              *(_DWORD *)v11 = 14;
              v0 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
              {
                WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x66u, &o_1_a_87_s_0_tpsig2);
                goto LABEL_55;
              }
            }
          }
          else
          {
            *(_DWORD *)v11 = GetLastError();
            v0 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            {
              WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x65u, &o_1_a_87_s_0_tpsig2, v11[0]);
              goto LABEL_55;
            }
          }
        }
        else
        {
          *(_DWORD *)v11 = GetLastError();
          v0 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          {
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x64u, &o_1_a_87_s_0_tpsig2, v11[0]);
            goto LABEL_55;
          }
        }
      }
      else
      {
        *(_DWORD *)v11 = 14;
        v0 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        {
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x63u, &o_1_a_87_s_0_tpsig2);
          goto LABEL_55;
        }
      }
    }
    else
    {
      *(_DWORD *)v11 = GetLastError();
      v0 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      {
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x62u, &o_1_a_87_s_0_tpsig2, v11[0]);
        goto LABEL_55;
      }
    }
  }
  else
  {
    *(_DWORD *)v11 = GetLastError();
    v0 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
    {
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x61u, &o_1_a_87_s_0_tpsig2, v11[0]);
      goto LABEL_55;
    }
  }
LABEL_56:
  if ( pSid )
  {
    FreeSid(pSid);
    v0 = WPP_GLOBAL_Control;
    pSid = 0;
  }
  if ( pAcl )
  {
    LocalFree(pAcl);
    v0 = WPP_GLOBAL_Control;
  }
  if ( hMem )
  {
    LocalFree(hMem);
    v0 = WPP_GLOBAL_Control;
  }
  if ( v0 != &WPP_GLOBAL_Control && *((_BYTE *)v0 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v0 + 2), 0x6Cu, &o_1_a_87_s_0_tpsig2);
  return *(_DWORD *)v11;
}

//----- (032EADE4) --------------------------------------------------------
char __stdcall NcipIsInUpgrade()
{
  char v0; // bl@4
  PVOID v1; // eax@4

  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x6Du, &o_1_a_87_s_0_tpsig2);
  v0 = IsSystemUpgradeInProgress();
  v1 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
  {
    if ( *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
    {
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x6Eu, &o_1_a_87_s_0_tpsig2, v0);
      v1 = WPP_GLOBAL_Control;
    }
    if ( v1 != &WPP_GLOBAL_Control && *((_BYTE *)v1 + 28) & 8 )
      WPP_SF_(*((_QWORD *)v1 + 2), 0x6Fu, &o_1_a_87_s_0_tpsig2);
  }
  return v0;
}

//----- (032EAE60) --------------------------------------------------------
DWORD __stdcall NcipGetDeviceInstanceId(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, int a3)
{
  PVOID v3; // ecx@4
  DWORD v4; // eax@12
  WCHAR *v5; // eax@17
  void *v6; // ebx@17
  DWORD RequiredSize; // [sp+Ch] [bp-8h]@1
  DWORD v9; // [sp+10h] [bp-4h]@11

  RequiredSize = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x83u, &o_1_a_87_s_0_tpsig2);
  if ( !NcipIsValidHandle((int)DeviceInfoSet) || !DeviceInfoData || !a3 )
  {
    v9 = 87;
    if ( v3 == &WPP_GLOBAL_Control )
      return v9;
    if ( !(*((_BYTE *)v3 + 28) & 1) )
      goto LABEL_30;
    WPP_SF_qqq(*((_QWORD *)v3 + 2), 0x84u, &o_1_a_87_s_0_tpsig2, (char)DeviceInfoSet, (char)DeviceInfoData, a3);
    goto LABEL_29;
  }
  *(_DWORD *)a3 = 0;
  if ( SetupDiGetDeviceInstanceIdW(DeviceInfoSet, DeviceInfoData, 0, 0, &RequiredSize) )
  {
    v3 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x85u, &o_1_a_87_s_0_tpsig2);
      v3 = WPP_GLOBAL_Control;
    }
    v9 = 87;
    goto LABEL_30;
  }
  v4 = GetLastError();
  v9 = v4;
  if ( v4 == 122 )
  {
    ++RequiredSize;
    v9 = 0;
    v5 = (WCHAR *)LocalAlloc(0, 2 * RequiredSize);
    v6 = v5;
    if ( v5 )
    {
      if ( SetupDiGetDeviceInstanceIdW(DeviceInfoSet, DeviceInfoData, v5, RequiredSize, 0) )
      {
        *(_DWORD *)a3 = v6;
      }
      else
      {
        v9 = GetLastError();
        LocalFree(v6);
        v3 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
          return v9;
        if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
          goto LABEL_30;
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x88u, &o_1_a_87_s_0_tpsig2, v9);
      }
    }
    else
    {
      v9 = 14;
      v3 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
        return v9;
      if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
        goto LABEL_30;
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x87u, &o_1_a_87_s_0_tpsig2);
    }
    goto LABEL_29;
  }
  v3 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
    return v9;
  if ( *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x86u, &o_1_a_87_s_0_tpsig2, v4);
LABEL_29:
    v3 = WPP_GLOBAL_Control;
  }
LABEL_30:
  if ( v3 != &WPP_GLOBAL_Control && *((_BYTE *)v3 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v3 + 2), 0x89u, &o_1_a_87_s_0_tpsig2);
  return v9;
}

//----- (032EB052) --------------------------------------------------------
HLOCAL __stdcall NcipGetDeviceRegistryProperty(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Property, int a4, int a5)
{
  PVOID v5; // ecx@4
  DWORD v6; // eax@11
  HLOCAL v7; // eax@16
  DWORD v8; // eax@21
  DWORD PropertyRegDataType; // [sp+Ch] [bp-Ch]@20
  DWORD RequiredSize; // [sp+10h] [bp-8h]@1
  HLOCAL hMem; // [sp+14h] [bp-4h]@8

  RequiredSize = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x9Eu, &o_1_a_87_s_0_tpsig2);
  if ( !NcipIsValidHandle((int)DeviceInfoSet) || !DeviceInfoData || !a5 )
  {
    hMem = (HLOCAL)87;
    if ( v5 == &WPP_GLOBAL_Control )
      return hMem;
    if ( !(*((_BYTE *)v5 + 28) & 1) )
      goto LABEL_31;
    WPP_SF_qqLq(
      *((_QWORD *)v5 + 2),
      0x9Fu,
      &o_1_a_87_s_0_tpsig2,
      (char)DeviceInfoSet,
      (char)DeviceInfoData,
      a5,
      Property);
    goto LABEL_30;
  }
  *(_DWORD *)a5 = 0;
  if ( !SetupDiGetDeviceRegistryPropertyW(DeviceInfoSet, DeviceInfoData, Property, 0, 0, 0, &RequiredSize) )
  {
    v6 = GetLastError();
    hMem = (HLOCAL)v6;
    if ( v6 == 122 )
    {
      v7 = LocalAlloc(0, RequiredSize);
      hMem = v7;
      if ( v7 )
      {
        if ( SetupDiGetDeviceRegistryPropertyW(
               DeviceInfoSet,
               DeviceInfoData,
               Property,
               &PropertyRegDataType,
               (PBYTE)v7,
               RequiredSize,
               0) )
        {
          *(_DWORD *)a5 = hMem;
          if ( a4 )
            *(_DWORD *)a4 = PropertyRegDataType;
          hMem = 0;
        }
        else
        {
          LocalFree(hMem);
          v8 = GetLastError();
          hMem = (HLOCAL)v8;
          v5 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
            return hMem;
          if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
            goto LABEL_31;
          WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xA3u, &o_1_a_87_s_0_tpsig2, Property, v8);
        }
      }
      else
      {
        hMem = (HLOCAL)14;
        v5 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
          return hMem;
        if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
          goto LABEL_31;
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xA2u, &o_1_a_87_s_0_tpsig2);
      }
    }
    else
    {
      v5 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
        return hMem;
      if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
        goto LABEL_31;
      WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xA1u, &o_1_a_87_s_0_tpsig2, Property, v6);
    }
    goto LABEL_30;
  }
  hMem = (HLOCAL)87;
  v5 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
    return hMem;
  if ( *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xA0u, &o_1_a_87_s_0_tpsig2, Property);
LABEL_30:
    v5 = WPP_GLOBAL_Control;
  }
LABEL_31:
  if ( v5 != &WPP_GLOBAL_Control && *((_BYTE *)v5 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v5 + 2), 0xA4u, &o_1_a_87_s_0_tpsig2);
  return hMem;
}

//----- (032EB256) --------------------------------------------------------
DWORD __stdcall NcipSetInterfaceDescription(__int16 a1, int a2, PCWSTR SourceString)
{
  PVOID v3; // ecx@1
  DWORD v4; // eax@9
  DWORD v5; // eax@18
  PVOID v6; // ecx@21
  DWORD BytesReturned; // [sp+Ch] [bp-224h]@17
  LSA_UNICODE_STRING DestinationString; // [sp+10h] [bp-220h]@1
  HANDLE hDevice; // [sp+18h] [bp-218h]@1
  DWORD v11; // [sp+1Ch] [bp-214h]@1
  int InBuffer; // [sp+20h] [bp-210h]@12
  __int16 v13; // [sp+24h] [bp-20Ch]@12
  USHORT Dst; // [sp+28h] [bp-208h]@12
  char v15; // [sp+2Ah] [bp-206h]@17

  v11 = 0;
  hDevice = 0;
  DestinationString.Length = 0;
  DestinationString.MaximumLength = 0;
  DestinationString.Buffer = 0;
  v3 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xA5u, &o_1_a_87_s_0_tpsig2);
    v3 = WPP_GLOBAL_Control;
  }
  if ( SourceString )
  {
    hDevice = CreateFileW(L"\\\\.\\NDIS", 0xC0000000, 0, 0, 3u, 0, 0);
    if ( NcipIsValidHandle((int)hDevice) )
    {
      InBuffer = a2;
      v13 = a1;
      memset(&Dst, 0, 0x204u);
      RtlInitUnicodeString(&DestinationString, SourceString);
      if ( DestinationString.Length <= 0x200u )
      {
        Dst = DestinationString.Length;
      }
      else
      {
        Dst = 512;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xA8u, &o_1_a_87_s_0_tpsig2, DestinationString.Length);
      }
      memcpy(&v15, DestinationString.Buffer, Dst);
      if ( !DeviceIoControl(hDevice, 0x170054u, &InBuffer, 0x20Cu, 0, 0, &BytesReturned, 0) )
      {
        v5 = GetLastError();
        v11 = v5;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
        {
          if ( *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xA9u, &o_1_a_87_s_0_tpsig2, v5);
        }
      }
    }
    else
    {
      v4 = GetLastError();
      v11 = v4;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xA7u, &o_1_a_87_s_0_tpsig2, v4);
    }
  }
  else
  {
    v11 = 87;
    if ( v3 != &WPP_GLOBAL_Control && *((_BYTE *)v3 + 28) & 1 )
      WPP_SF_qqq(*((_QWORD *)v3 + 2), 0xA6u, &o_1_a_87_s_0_tpsig2, a1, a2, 0);
  }
  if ( NcipIsValidHandle((int)hDevice) )
  {
    CloseHandle(hDevice);
    v6 = WPP_GLOBAL_Control;
  }
  if ( v6 != &WPP_GLOBAL_Control && *((_BYTE *)v6 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v6 + 2), 0xAAu, &o_1_a_87_s_0_tpsig2);
  return v11;
}

//----- (032EB4B2) --------------------------------------------------------
char __stdcall NcipIsNullDriverInstall(HDEVINFO DeviceInfoSet, int a2)
{
  DWORD v2; // eax@5
  PVOID v3; // ecx@7
  char v5; // [sp+Fh] [bp-621h]@1
  struct _SP_DRVINFO_DATA_W Dst; // [sp+10h] [bp-620h]@4

  v5 = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xAFu, &o_1_a_87_s_0_tpsig2);
  memset(&Dst, 0, 0x61Cu);
  Dst.cbSize = 1564;
  if ( SetupDiGetSelectedDriverW(DeviceInfoSet, (PSP_DEVINFO_DATA)a2, &Dst) )
    goto LABEL_10;
  v2 = GetLastError();
  if ( v2 == -536870397 )
    v5 = 1;
  v3 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
  {
    if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
    {
LABEL_11:
      if ( v3 != &WPP_GLOBAL_Control && *((_BYTE *)v3 + 28) & 8 )
        WPP_SF_(*((_QWORD *)v3 + 2), 0xB1u, &o_1_a_87_s_0_tpsig2);
      return v5;
    }
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xB0u, &o_1_a_87_s_0_tpsig2, v2);
LABEL_10:
    v3 = WPP_GLOBAL_Control;
    goto LABEL_11;
  }
  return v5;
}

//----- (032EB5B7) --------------------------------------------------------
LSTATUS __stdcall NcipSetEnableDhcp(LPCWSTR lpSubKey, int a2)
{
  BYTE Data[4]; // [sp+Ch] [bp-Ch]@1
  HKEY hKey; // [sp+10h] [bp-8h]@1
  HKEY phkResult; // [sp+14h] [bp-4h]@1
  LSTATUS v6; // [sp+24h] [bp+Ch]@1

  phkResult = 0;
  hKey = 0;
  *(_DWORD *)Data = a2 != 0;
  v6 = RegOpenKeyExW(
         HKEY_LOCAL_MACHINE,
         L"System\\CurrentControlSet\\Services\\Tcpip\\Parameters\\Interfaces",
         0,
         0x2001Fu,
         &phkResult);
  if ( v6 )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xC5u, &o_1_a_87_s_0_tpsig2, v6);
  }
  else
  {
    v6 = RegOpenKeyExW(phkResult, lpSubKey, 0, 0x2001Fu, &hKey);
    if ( v6 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xC6u, &o_1_a_87_s_0_tpsig2, v6);
    }
    else
    {
      RegCloseKey(phkResult);
      phkResult = 0;
      v6 = RegSetValueExW(hKey, L"EnableDhcp", 0, 4u, Data, 4u);
      if ( v6 && WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xC7u, &o_1_a_87_s_0_tpsig2, v6);
    }
  }
  if ( phkResult )
  {
    RegCloseKey(phkResult);
    phkResult = 0;
  }
  if ( hKey )
    RegCloseKey(hKey);
  return v6;
}

//----- (032EB6DA) --------------------------------------------------------
int __stdcall NcipOpenDriverRegistryKey(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Scope, DWORD HwProfile, DWORD KeyType, REGSAM samDesired, int a7)
{
  PVOID v7; // ecx@4
  int v8; // eax@7
  DWORD v9; // eax@8
  signed int v11; // [sp+Ch] [bp-4h]@1

  v11 = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xAu, &o_1_a_87_s_0_tpsig2);
  if ( !NcipIsValidHandle((int)DeviceInfoSet) || !DeviceInfoData || !a7 )
  {
    v11 = 87;
    if ( v7 == &WPP_GLOBAL_Control )
      return v11;
    if ( !(*((_BYTE *)v7 + 28) & 1) )
      goto LABEL_15;
    WPP_SF_qqq(*((_QWORD *)v7 + 2), 0xBu, &o_1_a_87_s_0_tpsig2, (char)DeviceInfoSet, (char)DeviceInfoData, a7);
    goto LABEL_14;
  }
  v8 = (int)SetupDiOpenDevRegKey(DeviceInfoSet, DeviceInfoData, Scope, HwProfile, KeyType, samDesired);
  *(_DWORD *)a7 = v8;
  if ( NcipIsValidHandle(v8) )
  {
LABEL_14:
    v7 = WPP_GLOBAL_Control;
    goto LABEL_15;
  }
  v9 = GetLastError();
  v11 = v9;
  v7 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
    return v11;
  if ( *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xCu, &o_1_a_87_s_0_tpsig2, v9);
    goto LABEL_14;
  }
LABEL_15:
  if ( v7 != &WPP_GLOBAL_Control && *((_BYTE *)v7 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v7 + 2), 0xDu, &o_1_a_87_s_0_tpsig2);
  return v11;
}

//----- (032EB7CF) --------------------------------------------------------
int __stdcall NcipQueryRegistryWithType(HKEY hKey, LPCWSTR lpValueName, int a3, LPBYTE lpData, LPDWORD lpcbData)
{
  int v5; // ecx@4
  PVOID v6; // eax@9
  DWORD Type; // [sp+Ch] [bp-4h]@7
  LSTATUS lpcbDataa; // [sp+28h] [bp+18h]@7

  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xEu, &o_1_a_87_s_0_tpsig2);
  if ( NcipIsValidHandle((int)hKey) && lpValueName && lpcbData )
  {
    lpcbDataa = RegQueryValueExW(hKey, lpValueName, 0, &Type, lpData, lpcbData);
    if ( !lpcbDataa && Type != a3 )
    {
      lpcbDataa = 1804;
      v6 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
        return lpcbDataa;
      if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
      {
LABEL_13:
        if ( v6 != &WPP_GLOBAL_Control )
        {
          if ( *((_BYTE *)v6 + 28) & 8 )
            WPP_SF_(*((_QWORD *)v6 + 2), 0x11u, &o_1_a_87_s_0_tpsig2);
        }
        return lpcbDataa;
      }
      WPP_SF_qqq(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x10u, &o_1_a_87_s_0_tpsig2, (char)lpValueName, Type, a3);
    }
    v6 = WPP_GLOBAL_Control;
    goto LABEL_13;
  }
  if ( (PVOID *)v5 != &WPP_GLOBAL_Control && *(_BYTE *)(v5 + 28) & 1 )
    WPP_SF_qqq(*(_QWORD *)(v5 + 16), 0xFu, &o_1_a_87_s_0_tpsig2, (char)hKey, (char)lpValueName, (char)lpcbData);
  return 87;
}

//----- (032EB8BD) --------------------------------------------------------
DWORD __stdcall NcipGetIntFromInf(HINF InfHandle, PCWSTR Section, PCWSTR Key, int a4)
{
  PVOID v4; // ecx@4
  DWORD v5; // eax@9
  DWORD v6; // eax@14
  struct _INFCONTEXT Context; // [sp+Ch] [bp-18h]@8
  int IntegerValue; // [sp+1Ch] [bp-8h]@13
  DWORD v10; // [sp+20h] [bp-4h]@1

  v10 = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x25u, &o_1_a_87_s_0_tpsig2);
  if ( !NcipIsValidHandle((int)InfHandle) || !Section || !Key || !a4 )
  {
    v10 = 87;
    if ( v4 == &WPP_GLOBAL_Control )
      return v10;
    if ( !(*((_BYTE *)v4 + 28) & 1) )
      goto LABEL_22;
    WPP_SF_qqLq(*((_QWORD *)v4 + 2), 0x26u, &o_1_a_87_s_0_tpsig2, (char)InfHandle, (char)Section, (char)Key, a4);
    goto LABEL_21;
  }
  *(_DWORD *)a4 = 0;
  if ( SetupFindFirstLineW(InfHandle, Section, Key, &Context) )
  {
    if ( SetupGetIntField(&Context, 1u, &IntegerValue) )
    {
      *(_DWORD *)a4 = IntegerValue;
    }
    else
    {
      v6 = GetLastError();
      v10 = v6;
      v4 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
        return v10;
      if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
        goto LABEL_22;
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x28u, &o_1_a_87_s_0_tpsig2, v6);
    }
    goto LABEL_21;
  }
  v5 = GetLastError();
  v10 = v5;
  v4 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
    return v10;
  if ( *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x27u, &o_1_a_87_s_0_tpsig2, v5);
LABEL_21:
    v4 = WPP_GLOBAL_Control;
  }
LABEL_22:
  if ( v4 != &WPP_GLOBAL_Control && *((_BYTE *)v4 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v4 + 2), 0x29u, &o_1_a_87_s_0_tpsig2);
  return v10;
}

//----- (032EBA00) --------------------------------------------------------
DWORD __stdcall NcipGetDriverInfoDetail(void *a1, struct _SP_DEVINFO_DATA *a2, int a3)
{
  PVOID v3; // ecx@4
  DWORD v4; // eax@8
  HLOCAL v5; // eax@17
  void *v6; // edi@17
  DWORD RequiredSize; // [sp+10h] [bp-630h]@12
  PSP_DEVINFO_DATA DeviceInfoData; // [sp+14h] [bp-62Ch]@1
  HDEVINFO DeviceInfoSet; // [sp+18h] [bp-628h]@1
  DWORD v11; // [sp+1Ch] [bp-624h]@8
  struct _SP_DRVINFO_DATA_W Dst; // [sp+20h] [bp-620h]@7

  DeviceInfoSet = a1;
  DeviceInfoData = a2;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Au, &o_1_a_87_s_0_tpsig2);
  if ( !NcipIsValidHandle((int)DeviceInfoSet) || !DeviceInfoData || !a3 )
  {
    v11 = 87;
    if ( v3 == &WPP_GLOBAL_Control )
      return v11;
    if ( !(*((_BYTE *)v3 + 28) & 1) )
      goto LABEL_33;
    WPP_SF_qqq(*((_QWORD *)v3 + 2), 0x2Bu, &o_1_a_87_s_0_tpsig2, (char)DeviceInfoSet, (char)DeviceInfoData, a3);
    goto LABEL_32;
  }
  *(_DWORD *)a3 = 0;
  memset(&Dst, 0, 0x61Cu);
  Dst.cbSize = 1564;
  if ( SetupDiGetSelectedDriverW(DeviceInfoSet, DeviceInfoData, &Dst) )
  {
    if ( SetupDiGetDriverInfoDetailW(DeviceInfoSet, DeviceInfoData, &Dst, 0, 0, &RequiredSize) )
    {
      v11 = 87;
      v3 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
        return v11;
      if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
        goto LABEL_33;
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Du, &o_1_a_87_s_0_tpsig2);
    }
    else
    {
      v11 = GetLastError();
      if ( v11 == 122 )
      {
        v11 = 0;
        v5 = LocalAlloc(0, RequiredSize);
        v6 = v5;
        if ( v5 )
        {
          memset(v5, 0, RequiredSize);
          *(_DWORD *)v6 = 1570;
          if ( SetupDiGetDriverInfoDetailW(
                 DeviceInfoSet,
                 DeviceInfoData,
                 &Dst,
                 (PSP_DRVINFO_DETAIL_DATA_W)v6,
                 RequiredSize,
                 0) )
          {
            *(_DWORD *)a3 = v6;
          }
          else
          {
            v11 = GetLastError();
            LocalFree(v6);
            v3 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
              return v11;
            if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
              goto LABEL_33;
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x30u, &o_1_a_87_s_0_tpsig2, v11);
          }
        }
        else
        {
          v11 = 14;
          v3 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
            return v11;
          if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
            goto LABEL_33;
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Fu, &o_1_a_87_s_0_tpsig2, 14);
        }
      }
      else
      {
        v3 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
          return v11;
        if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
          goto LABEL_33;
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Eu, &o_1_a_87_s_0_tpsig2, v11);
      }
    }
    goto LABEL_32;
  }
  v4 = GetLastError();
  v11 = v4;
  v3 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
    return v11;
  if ( *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Cu, &o_1_a_87_s_0_tpsig2, v4);
LABEL_32:
    v3 = WPP_GLOBAL_Control;
  }
LABEL_33:
  if ( v3 != &WPP_GLOBAL_Control && *((_BYTE *)v3 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v3 + 2), 0x31u, &o_1_a_87_s_0_tpsig2);
  return v11;
}

//----- (032EBCB5) --------------------------------------------------------
DWORD __stdcall NcipGetActualSectionToInstall(HINF InfHandle, PCWSTR InfSectionName, int a3)
{
  PVOID v3; // ecx@4
  DWORD v4; // eax@8
  DWORD v5; // edi@8
  WCHAR *v6; // eax@17
  HLOCAL hMem; // [sp+10h] [bp-8h]@17
  DWORD RequiredSize; // [sp+14h] [bp-4h]@7

  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x32u, &o_1_a_87_s_0_tpsig2);
  if ( !NcipIsValidHandle((int)InfHandle) || !InfSectionName || !a3 )
  {
    v5 = 87;
    if ( v3 == &WPP_GLOBAL_Control )
      return v5;
    if ( !(*((_BYTE *)v3 + 28) & 1) )
      goto LABEL_30;
    WPP_SF_qqq(*((_QWORD *)v3 + 2), 0x33u, &o_1_a_87_s_0_tpsig2, (char)InfHandle, (char)InfSectionName, a3);
    goto LABEL_29;
  }
  *(_DWORD *)a3 = 0;
  if ( SetupDiGetActualSectionToInstallW(InfHandle, InfSectionName, 0, 0, &RequiredSize, 0) )
  {
    if ( 2 * (unsigned __int64)RequiredSize <= 0xFFFFFFFF )
    {
      v6 = (WCHAR *)LocalAlloc(0, 2 * RequiredSize);
      hMem = v6;
      if ( v6 )
      {
        if ( SetupDiGetActualSectionToInstallW(InfHandle, InfSectionName, v6, RequiredSize, 0, 0) )
        {
          *(_DWORD *)a3 = hMem;
          v5 = 0;
        }
        else
        {
          v5 = GetLastError();
          LocalFree(hMem);
          v3 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
            return v5;
          if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
            goto LABEL_30;
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x37u, &o_1_a_87_s_0_tpsig2, v5);
        }
      }
      else
      {
        v5 = 14;
        v3 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
          return v5;
        if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
          goto LABEL_30;
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x36u, &o_1_a_87_s_0_tpsig2);
      }
    }
    else
    {
      v5 = 14;
      v3 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
        return v5;
      if ( !(*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) )
        goto LABEL_30;
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x35u, &o_1_a_87_s_0_tpsig2);
    }
    goto LABEL_29;
  }
  v4 = GetLastError();
  v5 = v4;
  v3 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == &WPP_GLOBAL_Control )
    return v5;
  if ( *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x34u, &o_1_a_87_s_0_tpsig2, v4);
LABEL_29:
    v3 = WPP_GLOBAL_Control;
  }
LABEL_30:
  if ( v3 != &WPP_GLOBAL_Control && *((_BYTE *)v3 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v3 + 2), 0x38u, &o_1_a_87_s_0_tpsig2);
  return v5;
}

//----- (032EBE85) --------------------------------------------------------
DWORD __stdcall NcipAllocateNetLuidIndex(__int16 InBuffer, LPVOID lpOutBuffer)
{
  PVOID v2; // ecx@1
  DWORD v3; // eax@9
  DWORD v4; // eax@13
  PVOID v5; // ecx@16
  DWORD BytesReturned; // [sp+Ch] [bp-Ch]@12
  HANDLE hDevice; // [sp+10h] [bp-8h]@1
  DWORD v9; // [sp+14h] [bp-4h]@1

  v9 = 0;
  hDevice = 0;
  v2 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x45u, &o_1_a_87_s_0_tpsig2);
    v2 = WPP_GLOBAL_Control;
  }
  if ( lpOutBuffer )
  {
    hDevice = CreateFileW(L"\\\\.\\NDIS", 0xC0000000, 0, 0, 3u, 0, 0);
    if ( NcipIsValidHandle((int)hDevice) )
    {
      if ( !DeviceIoControl(hDevice, 0x170044u, &InBuffer, 2u, lpOutBuffer, 4u, &BytesReturned, 0) )
      {
        v4 = GetLastError();
        v9 = v4;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
        {
          if ( *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x48u, &o_1_a_87_s_0_tpsig2, v4);
        }
      }
    }
    else
    {
      v3 = GetLastError();
      v9 = v3;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x47u, &o_1_a_87_s_0_tpsig2, v3);
    }
  }
  else
  {
    v9 = 87;
    if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 28) & 1 )
      WPP_SF_dL(*((_QWORD *)v2 + 2), 0x46u, &o_1_a_87_s_0_tpsig2, InBuffer, 0);
  }
  if ( NcipIsValidHandle((int)hDevice) )
  {
    CloseHandle(hDevice);
    v5 = WPP_GLOBAL_Control;
  }
  if ( v5 != &WPP_GLOBAL_Control && *((_BYTE *)v5 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v5 + 2), 0x49u, &o_1_a_87_s_0_tpsig2);
  return v9;
}

//----- (032EBFD1) --------------------------------------------------------
int __stdcall NcipFreeNetLuidIndex(__int16 a1, int a2)
{
  PVOID v2; // eax@5
  int InBuffer; // [sp+Ch] [bp-18h]@8
  __int16 v5; // [sp+10h] [bp-14h]@8
  DWORD BytesReturned; // [sp+14h] [bp-10h]@8
  HANDLE hDevice; // [sp+18h] [bp-Ch]@4
  char v8[4]; // [sp+1Ch] [bp-8h]@1
  bool v9; // [sp+23h] [bp-1h]@4

  *(_DWORD *)v8 = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x4Au, &o_1_a_87_s_0_tpsig2);
  hDevice = CreateFileW(L"\\\\.\\NDIS", 0xC0000000, 0, 0, 3u, 0, 0);
  v9 = NcipIsValidHandle((int)hDevice);
  if ( v9 )
  {
    InBuffer = a2;
    v5 = a1;
    if ( DeviceIoControl(hDevice, 0x170048u, &InBuffer, 8u, 0, 0, &BytesReturned, 0) )
      goto LABEL_12;
    *(_DWORD *)v8 = GetLastError();
    v2 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
    {
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x4Cu, &o_1_a_87_s_0_tpsig2, v8[0]);
      goto LABEL_12;
    }
  }
  else
  {
    *(_DWORD *)v8 = GetLastError();
    v2 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
    {
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x4Bu, &o_1_a_87_s_0_tpsig2, v8[0]);
LABEL_12:
      v2 = WPP_GLOBAL_Control;
      goto LABEL_13;
    }
  }
LABEL_13:
  if ( v9 )
  {
    CloseHandle(hDevice);
    v2 = WPP_GLOBAL_Control;
  }
  if ( v2 != &WPP_GLOBAL_Control && *((_BYTE *)v2 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v2 + 2), 0x4Du, &o_1_a_87_s_0_tpsig2);
  return *(_DWORD *)v8;
}

//----- (032EC0E3) --------------------------------------------------------
DWORD __stdcall NcipCreatePersistedInterface(__int16 a1, int a2, PCWSTR SourceString, int a4, int a5, int a6, int a7)
{
  DWORD v7; // ebx@7
  __int64 v8; // rt0@12
  USHORT v9; // cx@12
  HRESULT v10; // eax@17
  RPC_STATUS v11; // edi@22
  DWORD BytesReturned; // [sp+Ch] [bp-504h]@27
  LSA_UNICODE_STRING DestinationString; // [sp+14h] [bp-4FCh]@1
  HANDLE hDevice; // [sp+1Ch] [bp-4F4h]@1
  char v16[4]; // [sp+20h] [bp-4F0h]@1
  SP_LOG_TOKEN LogToken; // [sp+24h] [bp-4ECh]@4
  __int64 Dst; // [sp+2Ch] [bp-4E4h]@12
  char v19; // [sp+34h] [bp-4DCh]@12
  char v20; // [sp+35h] [bp-4DBh]@12
  __int16 v21; // [sp+36h] [bp-4DAh]@12
  USHORT v22; // [sp+38h] [bp-4D8h]@17
  char v23; // [sp+3Ah] [bp-4D6h]@17
  __int16 v24; // [sp+440h] [bp-D0h]@12
  UUID Uuid; // [sp+444h] [bp-CCh]@22
  int v26; // [sp+468h] [bp-A8h]@27
  int v27; // [sp+46Ch] [bp-A4h]@27
  int v28; // [sp+470h] [bp-A0h]@12
  wchar_t pszDest; // [sp+4BCh] [bp-54h]@17
  __int16 v30; // [sp+504h] [bp-Ch]@22

  *(_DWORD *)v16 = a4;
  hDevice = 0;
  DestinationString.Length = 0;
  DestinationString.MaximumLength = 0;
  DestinationString.Buffer = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x4Eu, &o_1_a_87_s_0_tpsig2);
  LogToken = SetupGetThreadLogToken();
  if ( SourceString && *(_DWORD *)v16 )
  {
    hDevice = CreateFileW(L"\\\\.\\NDIS", 0xC0000000, 0, 0, 3u, 0, 0);
    if ( NcipIsValidHandle((int)hDevice) )
    {
      memset(&Dst, 0, 0x490u);
      v21 = 1156;
      v24 = a1;
      HIDWORD(v8) = (unsigned __int16)a1 / 0x100u;
      LODWORD(v8) = ((unsigned __int16)a1 << 24) | a2 & 0xFFFFFF;
      v28 |= ((unsigned int)a7 >> 1) & 2;
      Dst = v8 << 24;
      v19 = -82;
      v20 = 1;
      RtlInitUnicodeString(&DestinationString, SourceString);
      v9 = DestinationString.Length;
      if ( DestinationString.Length < 0x102u )
      {
        v22 = DestinationString.Length;
        memcpy(&v23, DestinationString.Buffer, DestinationString.Length);
        v10 = StringCchCopyW(&pszDest, 0x27u, (STRSAFE_LPCWSTR)(*(_DWORD *)v16 + 2));
        v7 = 0;
        if ( v10 >= 0 )
        {
          v30 = 0;
          v11 = UuidFromStringW(&pszDest, &Uuid);
          if ( v11 )
          {
            v7 = 87;
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
              WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x53u, &o_1_a_87_s_0_tpsig2, 87, v11);
            _SetupWriteTextLog(
              LogToken,
              0x40000000u,
              1u,
              "NdisCoinst:NcipCreatePersistedInterface UuidFromStringW failed with error 0x%lx, RpcStatus 0x%lx ",
              87,
              v11);
          }
          else
          {
            v26 = a5;
            v27 = a6;
            if ( !DeviceIoControl(hDevice, 0x17004Cu, &Dst, 0x490u, 0, 0, &BytesReturned, 0) )
            {
              v7 = GetLastError();
              if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x54u, &o_1_a_87_s_0_tpsig2, v7);
              _SetupWriteTextLog(
                LogToken,
                0x40000000u,
                1u,
                "NdisCoinst:NcipCreatePersistedInterface DeviceIoControl failed with error 0x%lx ",
                v7);
            }
          }
        }
        else
        {
          v7 = (unsigned __int16)v10;
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x52u, &o_1_a_87_s_0_tpsig2, v10);
          _SetupWriteTextLog(
            LogToken,
            0x40000000u,
            1u,
            "NdisCoinst: NcipCreatePersistedInterface StringCchCopyW failed with error code 0x%lx",
            v7);
        }
      }
      else
      {
        v7 = -1073741811;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        {
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x51u, &o_1_a_87_s_0_tpsig2, DestinationString.Length);
          v9 = DestinationString.Length;
        }
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          1u,
          "NdisCoinst:NcipCreatePersistedInterface Invalid name length %d bytes",
          v9);
      }
    }
    else
    {
      v7 = GetLastError();
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x50u, &o_1_a_87_s_0_tpsig2, v7);
      _SetupWriteTextLog(
        LogToken,
        0x40000000u,
        1u,
        "NdisCoinst:NcipCreatePersistedInterface CreateFile failed with error 0x%lx ",
        v7);
    }
  }
  else
  {
    v7 = 87;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_qqLq(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x4Fu, &o_1_a_87_s_0_tpsig2, a1, a2, (char)SourceString, v16[0]);
    _SetupWriteTextLog(
      LogToken,
      0x40000000u,
      1u,
      "NdisCoinst:NcipCreatePersistedInterface Invalid argument IfType 0x%lx, NetLuidIndex 0x%4x, Name %ws, AdapterGuid %ws",
      (unsigned __int16)a1,
      a2,
      SourceString,
      *(_DWORD *)v16);
  }
  if ( NcipIsValidHandle((int)hDevice) )
    CloseHandle(hDevice);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x55u, &o_1_a_87_s_0_tpsig2);
  return v7;
}

//----- (032EC4C1) --------------------------------------------------------
DWORD __stdcall NcipDeletePersistedInterface(__int16 a1, int a2)
{
  DWORD v2; // edi@1
  int InBuffer; // [sp+Ch] [bp-1Ch]@9
  __int16 v5; // [sp+10h] [bp-18h]@9
  SP_LOG_TOKEN LogToken; // [sp+14h] [bp-14h]@4
  DWORD BytesReturned; // [sp+1Ch] [bp-Ch]@9
  HANDLE hDevice; // [sp+20h] [bp-8h]@4
  bool v9; // [sp+27h] [bp-1h]@4

  v2 = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x56u, &o_1_a_87_s_0_tpsig2);
  LogToken = SetupGetThreadLogToken();
  hDevice = CreateFileW(L"\\\\.\\NDIS", 0xC0000000, 0, 0, 3u, 0, 0);
  v9 = NcipIsValidHandle((int)hDevice);
  if ( v9 )
  {
    InBuffer = a2;
    v5 = a1;
    if ( !DeviceIoControl(hDevice, 0x170050u, &InBuffer, 8u, 0, 0, &BytesReturned, 0) )
    {
      v2 = GetLastError();
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x58u, &o_1_a_87_s_0_tpsig2, v2);
      _SetupWriteTextLog(
        LogToken,
        0x40000000u,
        1u,
        "NdisCoinst:NcipDeletePersistedInterface - DeviceIoControl failed with error 0x%lx ",
        v2);
    }
  }
  else
  {
    v2 = GetLastError();
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x57u, &o_1_a_87_s_0_tpsig2, v2);
    _SetupWriteTextLog(
      LogToken,
      0x40000000u,
      1u,
      "NdisCoinst:NcipDeletePersistedInterface - CreateFile failed with error 0x%lx ",
      v2);
  }
  if ( v9 )
    CloseHandle(hDevice);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x59u, &o_1_a_87_s_0_tpsig2);
  return v2;
}

//----- (032EC602) --------------------------------------------------------
char __stdcall NcipGetUniqueMatchingDevice(int a1, int a2, const WCHAR *a3, char a4, int a5, unsigned int a6, void *a7)
{
  const GUID *v7; // edi@3
  SP_LOG_TOKEN v8; // rax@5
  GUID *v9; // eax@9
  char v10; // al@12
  char v11; // al@17
  int v12; // edi@21
  int i; // ecx@21
  unsigned int v14; // esi@25
  DWORD v15; // eax@28
  char v16; // al@40
  PVOID v17; // ecx@40
  int v18; // ST14_4@49
  DWORD MemberIndex; // [sp+18h] [bp-30h]@1
  HLOCAL hMem; // [sp+1Ch] [bp-2Ch]@1
  HDEVINFO DeviceInfoSet; // [sp+20h] [bp-28h]@1
  char v23; // [sp+27h] [bp-21h]@1
  struct _SP_DEVINFO_DATA DeviceInfoData; // [sp+28h] [bp-20h]@25

  DeviceInfoSet = 0;
  v23 = 0;
  MemberIndex = 0;
  hMem = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
  {
    v7 = &o_1_a_87_s_0_tpsig2;
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x7Cu, &o_1_a_87_s_0_tpsig2);
  }
  else
  {
    v7 = &o_1_a_87_s_0_tpsig2;
  }
  v8 = SetupGetThreadLogToken();
  if ( a1 && a3 && a7 && a5 )
  {
    v9 = &GUID_DEVCLASS_INFRARED;
    if ( !a4 )
      v9 = &GUID_DEVCLASS_NET;
    DeviceInfoSet = SetupDiCreateDeviceInfoList(v9, 0);
    if ( NcipIsValidHandle((int)DeviceInfoSet) )
    {
      if ( DiGetMatchingDevices(DeviceInfoSet, a1, a2, 2) )
      {
        if ( a6 )
        {
          memset32(a7, 3145776, a6 >> 1);
          v12 = (int)((char *)a7 + 4 * (a6 >> 1));
          for ( i = a6 & 1; i; --i )
          {
            *(_WORD *)v12 = 48;
            v12 += 2;
          }
          v7 = &o_1_a_87_s_0_tpsig2;
        }
        while ( 1 )
        {
          v14 = 0;
          DeviceInfoData.cbSize = 28;
          if ( hMem )
          {
            LocalFree(hMem);
            hMem = 0;
          }
          if ( !SetupDiEnumDeviceInfo(DeviceInfoSet, MemberIndex, &DeviceInfoData) )
            break;
          ++MemberIndex;
          v15 = NcipGetDeviceInstanceId(DeviceInfoSet, &DeviceInfoData, (int)&hMem);
          if ( v15 )
          {
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
              WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x80u, v7, MemberIndex - 1, v15);
          }
          else
          {
            if ( !lstrcmpiW(a3, (LPCWSTR)hMem) )
              v23 = 1;
            if ( a6 )
            {
              do
              {
                if ( *(_DWORD *)(a5 + 4 * v14) && !lstrcmpiW((LPCWSTR)hMem, *(LPCWSTR *)(a5 + 4 * v14)) )
                  *((_WORD *)a7 + v14) = 49;
                ++v14;
              }
              while ( v14 < a6 );
            }
          }
        }
        v16 = GetLastError();
        v17 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        {
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x7Fu, v7, v16);
          v17 = WPP_GLOBAL_Control;
        }
        if ( v23 )
        {
          if ( MemberIndex != 1 )
          {
            v23 = 0;
            if ( v17 != &WPP_GLOBAL_Control )
            {
              if ( *((_BYTE *)v17 + 28) & 1 )
                WPP_SF_q(*((_QWORD *)v17 + 2), 0x81u, v7, MemberIndex);
            }
          }
        }
      }
      else
      {
        v11 = GetLastError();
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x7Eu, v7, v11);
      }
    }
    else
    {
      v10 = GetLastError();
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x7Du, v7, v10);
    }
  }
  else
  {
    _SetupWriteTextLog(v8, 0x40000000u, 1u, "NdisCoinst: Invalid Parameters in NcipGetUniqueMatchingDevice");
  }
  v18 = (int)DeviceInfoSet;
  *((_WORD *)a7 + a6) = 0;
  if ( NcipIsValidHandle(v18) )
    SetupDiDestroyDeviceInfoList(DeviceInfoSet);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x82u, v7);
  return v23;
}

//----- (032EC8CD) --------------------------------------------------------
signed int __stdcall NcipIsBridgeMiniport(int a1, struct _SP_DEVINFO_DATA *a2, int a3)
{
  PVOID v3; // ecx@4
  int v4; // esi@4
  DWORD v5; // eax@7
  HLOCAL hMem; // [sp+8h] [bp-4h]@1
  signed int v8; // [sp+1Ch] [bp+10h]@7

  hMem = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xABu, &o_1_a_87_s_0_tpsig2);
  v4 = a3;
  if ( NcipIsValidHandle(a1) && a2 && a3 )
  {
    *(_BYTE *)a3 = 0;
    v5 = NcipGetDriverInfoDetail((void *)a1, a2, (int)&hMem);
    v8 = v5;
    if ( !v5 )
    {
      if ( !lstrcmpW((LPCWSTR)hMem + 784, L"ms_bridgemp") )
        *(_BYTE *)v4 = 1;
      goto LABEL_16;
    }
    v3 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
    {
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xADu, &o_1_a_87_s_0_tpsig2, v5);
LABEL_16:
      v3 = WPP_GLOBAL_Control;
      goto LABEL_17;
    }
  }
  else
  {
    v8 = 87;
    if ( v3 != &WPP_GLOBAL_Control && *((_BYTE *)v3 + 28) & 1 )
    {
      WPP_SF_qqq(*((_QWORD *)v3 + 2), 0xACu, &o_1_a_87_s_0_tpsig2, a1, (char)a2, v4);
      goto LABEL_16;
    }
  }
LABEL_17:
  if ( hMem )
  {
    LocalFree(hMem);
    hMem = 0;
    v3 = WPP_GLOBAL_Control;
  }
  if ( v3 != &WPP_GLOBAL_Control && *((_BYTE *)v3 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v3 + 2), 0xAEu, &o_1_a_87_s_0_tpsig2);
  return v8;
}

//----- (032EC9F0) --------------------------------------------------------
signed int __stdcall NcipSetiScsiFlags(void *a1, struct _SP_DEVINFO_DATA *a2)
{
  signed int v2; // ebx@6
  HRESULT v3; // eax@34
  const CHAR *v5; // [sp-Ch] [bp-444h]@21
  BYTE Data[4]; // [sp+4h] [bp-434h]@1
  DEVPROPTYPE PropertyType; // [sp+8h] [bp-430h]@24
  DWORD cbData; // [sp+Ch] [bp-42Ch]@1
  BYTE v9[4]; // [sp+10h] [bp-428h]@1
  HKEY hKey; // [sp+14h] [bp-424h]@1
  HKEY phkResult; // [sp+18h] [bp-420h]@1
  HDEVINFO DeviceInfoSet; // [sp+1Ch] [bp-41Ch]@1
  PSP_DEVINFO_DATA DeviceInfoData; // [sp+20h] [bp-418h]@1
  SP_LOG_TOKEN LogToken; // [sp+24h] [bp-414h]@4
  wchar_t pszDest; // [sp+2Ch] [bp-40Ch]@34
  BYTE PropertyBuffer; // [sp+22Ch] [bp-20Ch]@24

  DeviceInfoSet = a1;
  DeviceInfoData = a2;
  *(_DWORD *)Data = 1;
  *(_DWORD *)v9 = 0;
  cbData = 0;
  phkResult = 0;
  hKey = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xB2u, &o_1_a_87_s_0_tpsig2);
  LogToken = SetupGetThreadLogToken();
  _SetupWriteTextLog(LogToken, 0x40000000u, 2 * (g_IsInUpgrade == 0) + 4, "[NdisCoinst: Enter NcipSetiScsiFlags]");
  if ( NcipIsValidHandle((int)DeviceInfoSet) && DeviceInfoData )
  {
    v2 = NcipOpenDriverRegistryKey(DeviceInfoSet, DeviceInfoData, 1u, 0, 2u, 0x20019u, (int)&hKey);
    if ( v2 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xB4u, &o_1_a_87_s_0_tpsig2, v2);
      _SetupWriteTextLog(
        LogToken,
        0x40000000u,
        1u,
        "NdisCoinst: NcipOpenDriverRegistryKey failed with error code 0x%lx",
        v2);
      goto LABEL_57;
    }
    cbData = 4;
    v2 = NcipQueryRegistryWithType(hKey, L"Characteristics", 4, v9, &cbData);
    if ( v2 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xB5u, &o_1_a_87_s_0_tpsig2, v2);
      _SetupWriteTextLog(
        LogToken,
        0x40000000u,
        1u,
        "NdisCoinst: NcipQueryRegistryWithType (Characteristics) failed with error code 0x%lx",
        v2);
    }
    if ( !(v9[0] & 4) )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xB6u, &o_1_a_87_s_0_tpsig2);
      v5 = "NdisCoinst: Not a hardware miniport, don't set BootFlags";
LABEL_22:
      _SetupWriteTextLog(LogToken, 0x40000000u, 5 - (g_IsInUpgrade != 0), v5);
      goto LABEL_57;
    }
    if ( SetupDiGetDevicePropertyW(
           DeviceInfoSet,
           DeviceInfoData,
           &DEVPKEY_Device_Service,
           &PropertyType,
           &PropertyBuffer,
           0x208u,
           0,
           0) )
    {
      if ( PropertyType == 18 )
      {
        v3 = StringCchPrintfW(&pszDest, 0x100u, L"%s\\%s", L"System\\CurrentControlSet\\Services", &PropertyBuffer);
        if ( v3 >= 0 )
        {
          v2 = RegOpenKeyExW(HKEY_LOCAL_MACHINE, &pszDest, 0, 0x20006u, &phkResult);
          if ( v2 )
          {
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
              WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xBAu, &o_1_a_87_s_0_tpsig2, v2);
            _SetupWriteTextLog(
              LogToken,
              0x40000000u,
              1u,
              "NdisCoinst: RegOpenKeyEx for service key failed with error code 0x%lx",
              v2);
          }
          else
          {
            v2 = RegSetValueExW(phkResult, L"BootFlags", 0, 4u, Data, 4u);
            if ( !v2 )
            {
              if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
                WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xBCu, &o_1_a_87_s_0_tpsig2);
              v5 = "NdisCoinst: Succefully set the BootFlags";
              goto LABEL_22;
            }
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
              WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xBBu, &o_1_a_87_s_0_tpsig2, v2);
            _SetupWriteTextLog(
              LogToken,
              0x40000000u,
              1u,
              "NdisCoinst: RegSetValueEx while setting c_BootFlags failed with error 0x%lx",
              v2);
          }
        }
        else
        {
          v2 = (unsigned __int16)v3;
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xB9u, &o_1_a_87_s_0_tpsig2, v3);
          _SetupWriteTextLog(LogToken, 0x40000000u, 1u, "NdisCoinst: StringCchPrintf failed with error code 0x%lx", v2);
        }
      }
      else
      {
        v2 = 1804;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xB8u, &o_1_a_87_s_0_tpsig2);
        _SetupWriteTextLog(LogToken, 0x40000000u, 1u, "NdisCoinst: DEVPKEY_Device_Service is not of type STRING");
      }
    }
    else
    {
      v2 = GetLastError();
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xB7u, &o_1_a_87_s_0_tpsig2, v2);
      _SetupWriteTextLog(
        LogToken,
        0x40000000u,
        1u,
        "NdisCoinst: SetupDiGetDeviceProperty for DEVPKEY_Device_Service failed with error code 0x%lx",
        v2);
    }
  }
  else
  {
    v2 = 87;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_dL(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0xB3u,
        &o_1_a_87_s_0_tpsig2,
        (char)DeviceInfoSet,
        (char)DeviceInfoData);
    _SetupWriteTextLog(
      LogToken,
      0x40000000u,
      1u,
      "NdisCoinst: Invalid parameter DeviceInfoSet 0x%p, DeviceInfoData 0x%p",
      DeviceInfoSet,
      DeviceInfoData);
  }
LABEL_57:
  if ( NcipIsValidHandle((int)hKey) )
    RegCloseKey(hKey);
  if ( NcipIsValidHandle((int)phkResult) )
    RegCloseKey(phkResult);
  _SetupWriteTextLog(LogToken, 0x40000000u, 2 * (g_IsInUpgrade == 0) + 4, "[NdisCoinst: Exit NcipSetiScsiFlags]");
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xBDu, &o_1_a_87_s_0_tpsig2);
  return v2;
}
// 32E4788: using guessed type wchar_t aSystemCurren_3[34];
// 32F3068: using guessed type int g_IsInUpgrade;

//----- (032ECEDB) --------------------------------------------------------
PSP_DEVINFO_DATA __stdcall NcipSetNewDeviceInstall(void *a1, struct _SP_DEVINFO_DATA *a2)
{
  DWORD cbData; // [sp+Ch] [bp-70h]@10
  HDEVINFO DeviceInfoSet; // [sp+10h] [bp-6Ch]@1
  BYTE Data[4]; // [sp+14h] [bp-68h]@11
  SP_LOG_TOKEN LogToken; // [sp+18h] [bp-64h]@4
  HKEY hKey; // [sp+20h] [bp-5Ch]@1
  PSP_DEVINFO_DATA DeviceInfoData; // [sp+24h] [bp-58h]@1
  char Dst; // [sp+28h] [bp-54h]@10

  DeviceInfoSet = a1;
  DeviceInfoData = a2;
  hKey = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xBEu, &o_1_a_87_s_0_tpsig2);
  LogToken = SetupGetThreadLogToken();
  _SetupWriteTextLog(LogToken, 0x40000000u, 2 * (g_IsInUpgrade == 0) + 4, "[NdisCoinst: Enter NcipSetNewDeviceInstall]");
  DeviceInfoData = (PSP_DEVINFO_DATA)NcipOpenDriverRegistryKey(
                                       DeviceInfoSet,
                                       DeviceInfoData,
                                       1u,
                                       0,
                                       2u,
                                       0x2001Bu,
                                       (int)&hKey);
  if ( DeviceInfoData )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xBFu, &o_1_a_87_s_0_tpsig2, (char)DeviceInfoData);
    _SetupWriteTextLog(
      LogToken,
      0x40000000u,
      1u,
      "NdisCoinst: NcipOpenDriverRegistryKey failed with error code 0x%lx",
      DeviceInfoData);
  }
  else
  {
    cbData = 78;
    memset(&Dst, 0, 0x4Eu);
    if ( NcipQueryRegistryWithType(hKey, L"NetCfgInstanceId", 1, (LPBYTE)&Dst, &cbData) )
    {
      *(_DWORD *)Data = 1;
      DeviceInfoData = (PSP_DEVINFO_DATA)RegSetValueExW(hKey, L"NewDeviceInstall", 0, 4u, Data, 4u);
      if ( DeviceInfoData )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xC0u, &o_1_a_87_s_0_tpsig2, (char)DeviceInfoData);
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          1u,
          "NdisCoinst: RegSetValueExW NewDeviceInstall = 1 failed with error code 0x%lx",
          DeviceInfoData);
      }
      else
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xC1u, &o_1_a_87_s_0_tpsig2);
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          5 - (g_IsInUpgrade != 0),
          "NdisCoinst: Succesfully set NewDeviceInstall to 1");
      }
    }
    else
    {
      *(_DWORD *)Data = 0;
      DeviceInfoData = (PSP_DEVINFO_DATA)RegSetValueExW(hKey, L"NewDeviceInstall", 0, 4u, Data, 4u);
      if ( DeviceInfoData )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xC2u, &o_1_a_87_s_0_tpsig2, (char)DeviceInfoData);
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          1u,
          "NdisCoinst: RegSetValueExW NewDeviceInstall = 0 failed with error code 0x%lx",
          DeviceInfoData);
      }
      else
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xC3u, &o_1_a_87_s_0_tpsig2);
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          5 - (g_IsInUpgrade != 0),
          "NdisCoinst: Succesfully set NewDeviceInstall to 0");
      }
    }
  }
  if ( NcipIsValidHandle((int)hKey) )
    RegCloseKey(hKey);
  _SetupWriteTextLog(LogToken, 0x40000000u, 2 * (g_IsInUpgrade == 0) + 4, "[NdisCoinst: Exit NcipSetNewDeviceInstall]");
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xC4u, &o_1_a_87_s_0_tpsig2);
  return DeviceInfoData;
}
// 32F3068: using guessed type int g_IsInUpgrade;

//----- (032ED176) --------------------------------------------------------
DWORD __stdcall NcipProcessInf(int a1, int a2, HKEY hKey, int a4, int a5)
{
  int v5; // ecx@4
  DWORD v6; // eax@8
  DWORD v7; // ebx@8
  DWORD v8; // eax@14
  DWORD v9; // eax@17
  DWORD v10; // eax@21
  int v11; // eax@26
  LSTATUS v12; // eax@27
  char v13; // cl@33
  int v14; // eax@36
  DWORD v15; // eax@37
  LSTATUS v16; // eax@41
  int v17; // eax@49
  DWORD v18; // eax@50
  int v19; // eax@54
  DWORD v20; // eax@55
  LSTATUS v21; // eax@61
  LSTATUS v22; // eax@69
  PVOID v23; // ecx@84
  BYTE Data[4]; // [sp+Ch] [bp-18h]@21
  HLOCAL v26; // [sp+10h] [bp-14h]@1
  HLOCAL hMem; // [sp+14h] [bp-10h]@1
  HINF InfHandle; // [sp+18h] [bp-Ch]@1
  DWORD cbData; // [sp+1Ch] [bp-8h]@26
  BYTE v30[4]; // [sp+20h] [bp-4h]@26

  v26 = 0;
  InfHandle = 0;
  hMem = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x12u, &o_1_a_87_s_0_tpsig2);
  if ( NcipIsValidHandle(a1) && a2 && NcipIsValidHandle((int)hKey) && a4 )
  {
    *(_DWORD *)a4 = 0;
    v6 = NcipGetDriverInfoDetail((void *)a1, (struct _SP_DEVINFO_DATA *)a2, (int)&v26);
    v7 = v6;
    if ( v6 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x14u, &o_1_a_87_s_0_tpsig2, v6);
      goto LABEL_84;
    }
    InfHandle = SetupOpenInfFileW((PCWSTR)v26 + 268, 0, 2u, 0);
    if ( !NcipIsValidHandle((int)InfHandle) )
    {
      v8 = GetLastError();
      v7 = v8;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x15u, &o_1_a_87_s_0_tpsig2, v8);
      goto LABEL_84;
    }
    v9 = NcipGetActualSectionToInstall(InfHandle, (PCWSTR)v26 + 12, (int)&hMem);
    v7 = v9;
    if ( v9 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x16u, &o_1_a_87_s_0_tpsig2, v9);
      goto LABEL_84;
    }
    v10 = NcipGetIntFromInf(InfHandle, (PCWSTR)hMem, L"*IfType", (int)Data);
    if ( v10 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x17u, &o_1_a_87_s_0_tpsig2, v10);
      *(_DWORD *)Data = 1;
    }
    cbData = 4;
    v11 = NcipQueryRegistryWithType(hKey, L"*IfType", 4, v30, &cbData);
    v7 = v11;
    if ( v11 == 2 )
    {
      cbData = 4;
      v12 = RegSetValueExW(hKey, L"*IfType", 0, 4u, Data, 4u);
      v7 = v12;
      if ( v12 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x18u, &o_1_a_87_s_0_tpsig2, v12);
        goto LABEL_84;
      }
    }
    else
    {
      if ( v11 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Au, &o_1_a_87_s_0_tpsig2, v11);
        goto LABEL_84;
      }
      if ( *(_DWORD *)v30 == 1 )
      {
        v13 = Data[0];
        *(_DWORD *)a4 = *(_DWORD *)Data;
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
        {
          if ( *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x19u, &o_1_a_87_s_0_tpsig2, v13);
        }
      }
    }
    cbData = 4;
    v14 = NcipQueryRegistryWithType(hKey, L"Characteristics", 4, v30, &cbData);
    v7 = v14;
    if ( v14 == 2 )
    {
      v15 = NcipGetIntFromInf(InfHandle, (PCWSTR)hMem, L"Characteristics", (int)v30);
      v7 = v15;
      if ( v15 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Bu, &o_1_a_87_s_0_tpsig2, v15);
        goto LABEL_84;
      }
      cbData = 4;
      v16 = RegSetValueExW(hKey, L"Characteristics", 0, 4u, v30, 4u);
      v7 = v16;
      if ( v16 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Cu, &o_1_a_87_s_0_tpsig2, v16);
        goto LABEL_84;
      }
    }
    else if ( v14 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Du, &o_1_a_87_s_0_tpsig2, v14);
      goto LABEL_84;
    }
    cbData = 4;
    v17 = NcipQueryRegistryWithType(hKey, L"*MediaType", 4, v30, &cbData);
    v7 = v17;
    if ( v17 == 2 )
    {
      v18 = NcipGetIntFromInf(InfHandle, (PCWSTR)hMem, L"*MediaType", (int)v30);
      if ( v18 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Eu, &o_1_a_87_s_0_tpsig2, v18);
      }
      else
      {
        cbData = 4;
        v21 = RegSetValueExW(hKey, L"*MediaType", 0, 4u, v30, 4u);
        v7 = v21;
        if ( v21 )
        {
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Fu, &o_1_a_87_s_0_tpsig2, v21);
          goto LABEL_84;
        }
      }
    }
    else if ( v17 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x20u, &o_1_a_87_s_0_tpsig2, v17);
      goto LABEL_84;
    }
    cbData = 4;
    v19 = NcipQueryRegistryWithType(hKey, L"*PhysicalMediaType", 4, v30, &cbData);
    v7 = v19;
    if ( v19 == 2 )
    {
      v20 = NcipGetIntFromInf(InfHandle, (PCWSTR)hMem, L"*PhysicalMediaType", (int)v30);
      if ( v20 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x21u, &o_1_a_87_s_0_tpsig2, v20);
        goto LABEL_59;
      }
      cbData = 4;
      v22 = RegSetValueExW(hKey, L"*PhysicalMediaType", 0, 4u, v30, 4u);
      v7 = v22;
      if ( v22 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x22u, &o_1_a_87_s_0_tpsig2, v22);
        goto LABEL_84;
      }
LABEL_59:
      v7 = NcipGetIntFromInf(InfHandle, (PCWSTR)hMem, L"EnableDhcp", (int)v30);
      if ( v7 )
      {
        *(_DWORD *)a5 = 2;
        v7 = 0;
      }
      else
      {
        *(_DWORD *)a5 = *(_DWORD *)v30 != 0;
      }
      goto LABEL_84;
    }
    if ( !v19 )
      goto LABEL_59;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x23u, &o_1_a_87_s_0_tpsig2, v19);
  }
  else
  {
    v7 = 87;
    if ( (PVOID *)v5 != &WPP_GLOBAL_Control && *(_BYTE *)(v5 + 28) & 1 )
      WPP_SF_qqq(*(_QWORD *)(v5 + 16), 0x13u, &o_1_a_87_s_0_tpsig2, a1, a2, (char)hKey);
  }
LABEL_84:
  if ( NcipIsValidHandle((int)InfHandle) )
  {
    SetupCloseInfFile(InfHandle);
    v23 = WPP_GLOBAL_Control;
  }
  if ( hMem )
  {
    LocalFree(hMem);
    hMem = 0;
    v23 = WPP_GLOBAL_Control;
  }
  if ( v26 )
  {
    LocalFree(v26);
    v26 = 0;
    v23 = WPP_GLOBAL_Control;
  }
  if ( v23 != &WPP_GLOBAL_Control && *((_BYTE *)v23 + 28) & 8 )
    WPP_SF_(*((_QWORD *)v23 + 2), 0x24u, &o_1_a_87_s_0_tpsig2);
  return v7;
}

//----- (032ED6F8) --------------------------------------------------------
int __stdcall NcipGetUpgradeKey(HDEVINFO a1, PSP_DEVINFO_DATA a2, int a3, int a4)
{
  DWORD v4; // eax@14
  GUID *v5; // eax@16
  int v6; // eax@20
  DWORD v7; // ST2C_4@33
  DWORD v8; // eax@34
  const WCHAR *v9; // eax@37
  DWORD v10; // ebx@51
  LSTATUS v11; // eax@58
  LSTATUS v12; // eax@63
  BYTE *v13; // ebx@81
  int v14; // eax@85
  int v15; // eax@93
  size_t v16; // ebx@99
  __int16 v17; // ax@101
  int v18; // ebx@107
  HKEY v19; // eax@108
  int v20; // ebx@111
  HKEY v21; // eax@123
  HLOCAL v22; // ebx@136
  DWORD v23; // esi@136
  HLOCAL v24; // esi@146
  DWORD i; // [sp-8h] [bp-90h]@22
  struct _SP_DEVINFO_DATA *v27; // [sp-4h] [bp-8Ch]@22
  DWORD cchName; // [sp+Ch] [bp-7Ch]@1
  DWORD cSubKeys; // [sp+10h] [bp-78h]@1
  int v30; // [sp+14h] [bp-74h]@1
  HLOCAL v31; // [sp+18h] [bp-70h]@1
  HLOCAL v32; // [sp+1Ch] [bp-6Ch]@1
  HLOCAL v33; // [sp+20h] [bp-68h]@1
  void *Dst; // [sp+24h] [bp-64h]@1
  DWORD cbMaxSubKeyLen; // [sp+28h] [bp-60h]@1
  HKEY phkResult; // [sp+2Ch] [bp-5Ch]@1
  HDEVINFO DeviceInfoSet; // [sp+30h] [bp-58h]@1
  char v38[4]; // [sp+34h] [bp-54h]@1
  int v39; // [sp+38h] [bp-50h]@1
  HLOCAL hMem; // [sp+3Ch] [bp-4Ch]@1
  DWORD MemberIndex; // [sp+40h] [bp-48h]@1
  char v42; // [sp+47h] [bp-41h]@1
  DWORD v43; // [sp+48h] [bp-40h]@1
  SIZE_T uBytes; // [sp+4Ch] [bp-3Ch]@1
  HLOCAL v45; // [sp+50h] [bp-38h]@1
  SP_LOG_TOKEN LogToken; // [sp+54h] [bp-34h]@4
  HKEY hKey; // [sp+5Ch] [bp-2Ch]@1
  HLOCAL v48; // [sp+60h] [bp-28h]@1
  char v49[4]; // [sp+64h] [bp-24h]@7
  struct _SP_DEVINFO_DATA DeviceInfoData; // [sp+68h] [bp-20h]@22

  v39 = (int)a1;
  v43 = (DWORD)a2;
  *(_DWORD *)v38 = a4;
  phkResult = 0;
  Dst = 0;
  hKey = 0;
  uBytes = 0;
  cSubKeys = 0;
  cbMaxSubKeyLen = 0;
  cchName = 0;
  hMem = 0;
  v45 = 0;
  v48 = 0;
  v42 = 0;
  v33 = 0;
  MemberIndex = 0;
  DeviceInfoSet = 0;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x70u, &o_1_a_87_s_0_tpsig2);
  LogToken = SetupGetThreadLogToken();
  if ( !NcipIsValidHandle((int)a1) || !a2 || !*(_DWORD *)v38 )
  {
    *(_DWORD *)v49 = 87;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_qqLq(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x71u, &o_1_a_87_s_0_tpsig2, (char)a1, (char)a2, a3, v38[0]);
    goto LABEL_132;
  }
  **(_DWORD **)v38 = 0;
  *(_DWORD *)v49 = NcipGetDeviceInstanceId(a1, a2, (int)&v45);
  if ( *(_DWORD *)v49 )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x72u, &o_1_a_87_s_0_tpsig2, v49[0]);
    goto LABEL_132;
  }
  _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NdisCoinst: Attempting Match for %ws", v45);
  if ( wcslen((const unsigned __int16 *)v45) >= 5 && !__wcsnicmp((const wchar_t *)v45, L"ROOT\\", 5u) )
  {
    v42 = 1;
    v4 = NcipGetDriverInfoDetail((void *)v39, (struct _SP_DEVINFO_DATA *)v43, (int)&v32);
    *(_DWORD *)v49 = v4;
    if ( v4 )
    {
      _SetupWriteTextLog(
        LogToken,
        0x40000000u,
        0x10001u,
        "NdisCoinst:NcipGetUpgradeKey, NcipGetDriverInfoDetail failed with error 0x%lx",
        v4);
      goto LABEL_132;
    }
  }
  v5 = &GUID_DEVCLASS_INFRARED;
  if ( !(_BYTE)a3 )
    v5 = &GUID_DEVCLASS_NET;
  DeviceInfoSet = SetupDiGetClassDevsW(v5, 0, 0, 2u);
  if ( !NcipIsValidHandle((int)DeviceInfoSet) )
  {
    *(_DWORD *)v49 = GetLastError();
    goto LABEL_132;
  }
  v6 = (int)L"IRDA";
  if ( !(_BYTE)a3 )
    v6 = (int)L"NET";
  _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NdisCoisnt: Current OS %ws Class Devices:", v6);
  v27 = &DeviceInfoData;
  for ( i = 0; ; i = MemberIndex )
  {
    DeviceInfoData.cbSize = 28;
    if ( !SetupDiEnumDeviceInfo(DeviceInfoSet, i, v27) )
      break;
    ++MemberIndex;
    v27 = &DeviceInfoData;
  }
  v31 = LocalAlloc(0, 4 * MemberIndex);
  if ( !v31 )
  {
    _SetupWriteTextLog(LogToken, 0x40000000u, 1u, "NdisCoinst: Failed to allocate memory for Device Instance ID List");
    goto LABEL_132;
  }
  v33 = LocalAlloc(0, 2 * MemberIndex + 2);
  if ( !v33 )
  {
    _SetupWriteTextLog(LogToken, 0x40000000u, 1u, "NdisCoinst: Failed to allocate memory for Match Mask");
    goto LABEL_132;
  }
  v43 = 0;
  DeviceInfoData.cbSize = 28;
  if ( MemberIndex )
  {
    *(_DWORD *)v49 = v31;
    do
    {
      **(_DWORD **)v49 = 0;
      if ( SetupDiEnumDeviceInfo(DeviceInfoSet, v43, &DeviceInfoData) )
      {
        v8 = NcipGetDeviceInstanceId(DeviceInfoSet, &DeviceInfoData, *(int *)v49);
        DeviceInfoData.cbSize = 28;
        if ( !v8 )
          _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NdisCoisnt: \t%ws:", **(_DWORD **)v49);
      }
      else
      {
        v7 = GetLastError();
        _SetupWriteTextLog(LogToken, 0x40000000u, 1u, "NdisCoinst: SetupDiEnumDeviceInfo failed with error %08xX", v7);
      }
      ++v43;
      *(_DWORD *)v49 += 4;
    }
    while ( v43 < MemberIndex );
  }
  v9 = L"System\\Setup\\Upgrade\\NDIS\\IrdaAdapters";
  if ( !(_BYTE)a3 )
    v9 = L"System\\Setup\\Upgrade\\NDIS\\NetAdapters";
  *(_DWORD *)v49 = RegOpenKeyExW(HKEY_LOCAL_MACHINE, v9, 0, 0x20019u, &phkResult);
  if ( *(_DWORD *)v49 )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x73u, &o_1_a_87_s_0_tpsig2, v49[0]);
    goto LABEL_132;
  }
  *(_DWORD *)v49 = RegQueryInfoKeyW(phkResult, 0, 0, 0, &cSubKeys, &cbMaxSubKeyLen, 0, 0, 0, 0, 0, 0);
  if ( *(_DWORD *)v49 )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x74u, &o_1_a_87_s_0_tpsig2, v49[0]);
    goto LABEL_132;
  }
  ++cbMaxSubKeyLen;
  Dst = LocalAlloc(0, 2 * cbMaxSubKeyLen);
  if ( !Dst )
  {
    *(_DWORD *)v49 = 14;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x75u, &o_1_a_87_s_0_tpsig2);
    goto LABEL_132;
  }
  _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "Downlevel OS NetClass Devices:");
  v10 = 0;
  v43 = 0;
  if ( !cSubKeys )
    goto LABEL_128;
  while ( 1 )
  {
    memset(Dst, 0, 2 * cbMaxSubKeyLen);
    cchName = cbMaxSubKeyLen;
    if ( NcipIsValidHandle((int)hKey) )
    {
      RegCloseKey(hKey);
      hKey = 0;
    }
    if ( hMem )
    {
      LocalFree(hMem);
      hMem = 0;
    }
    if ( v48 )
    {
      LocalFree(v48);
      v48 = 0;
    }
    v11 = RegEnumKeyExW(phkResult, v10, (LPWSTR)Dst, &cchName, 0, 0, 0, 0);
    if ( v11 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x76u, &o_1_a_87_s_0_tpsig2, v10, v11);
LABEL_62:
      *(_DWORD *)v49 = 0;
      goto LABEL_117;
    }
    v12 = RegOpenKeyExW(phkResult, (LPCWSTR)Dst, 0, 0xF003Fu, &hKey);
    if ( v12 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x77u, &o_1_a_87_s_0_tpsig2, v10, v12);
      goto LABEL_62;
    }
    uBytes = 0;
    if ( v48 )
    {
      LocalFree(v48);
      v48 = 0;
    }
    if ( !NcipQueryRegistryWithType(hKey, L"ComponentId", 1, 0, &uBytes) )
    {
      v48 = LocalAlloc(0, uBytes);
      if ( !v48 )
      {
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          1u,
          "!Failed to allocate memory for ComponentId of downlevel adapter at Index %d",
          v10);
LABEL_120:
        *(_DWORD *)v49 = 14;
        goto LABEL_127;
      }
      if ( NcipQueryRegistryWithType(hKey, L"ComponentId", 1, (LPBYTE)v48, &uBytes) )
      {
        LocalFree(v48);
        v48 = 0;
      }
    }
    *(_DWORD *)v49 = 0;
    if ( v48 )
      _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "Downlevel adapter Index %d, ComponentId %ws", v10, v48);
    else
      _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "Downlevel adapter Index %d: no ComponentId", v10);
    if ( v42 )
      break;
    uBytes = 0;
    v14 = NcipQueryRegistryWithType(hKey, L"BackupContext", 3, 0, &uBytes);
    *(_DWORD *)v49 = v14;
    if ( v14 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x78u, &o_1_a_87_s_0_tpsig2, v10, v14);
      goto LABEL_62;
    }
    hMem = LocalAlloc(0, uBytes);
    if ( !hMem )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x79u, &o_1_a_87_s_0_tpsig2, uBytes);
      goto LABEL_117;
    }
    v15 = NcipQueryRegistryWithType(hKey, L"BackupContext", 3, (LPBYTE)hMem, &uBytes);
    *(_DWORD *)v49 = v15;
    if ( v15 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x7Au, &o_1_a_87_s_0_tpsig2, v10, v15);
      goto LABEL_62;
    }
    if ( NcipGetUniqueMatchingDevice((int)hMem, uBytes, (const WCHAR *)v45, a3, (int)v31, MemberIndex, v33) )
    {
      v39 = 1;
      if ( v48 )
      {
        v16 = wcslen((const unsigned __int16 *)v48);
        if ( v16 <= wcslen((const unsigned __int16 *)v45)
          && !__wcsnicmp((const wchar_t *)v45, (const wchar_t *)v48, v16) )
        {
          v17 = *((_WORD *)v45 + v16);
          if ( !v17 || v17 == 92 || v17 == 38 )
          {
            v39 = 2;
            _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "Find a best matching - ComponentId matches DeviceInstanceId");
          }
        }
      }
      if ( v39 <= v30 )
      {
        if ( v39 == v30 && v30 )
        {
          v20 = *(_DWORD *)v38;
          RegCloseKey((HKEY)**(_DWORD **)v38);
          *(_DWORD *)v20 = 0;
          v30 = 0;
          if ( v39 == 2 )
          {
            _SetupWriteTextLog(
              LogToken,
              0x40000000u,
              4u,
              "More than one matching found. Exit at highest matching level");
            goto LABEL_127;
          }
          _SetupWriteTextLog(
            LogToken,
            0x40000000u,
            4u,
            "More than one matching found: continue to find better matching");
        }
      }
      else
      {
        if ( v30 )
        {
          v18 = *(_DWORD *)v38;
          RegCloseKey((HKEY)**(_DWORD **)v38);
          *(_DWORD *)v18 = 0;
        }
        v30 = v39;
        v19 = hKey;
        hKey = 0;
        **(_DWORD **)v38 = v19;
      }
      if ( v48 )
      {
        LocalFree(v48);
        v48 = 0;
      }
      v10 = v43;
    }
    _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "%04d MatchMask %ws", v10, v33);
LABEL_117:
    ++v10;
    v43 = v10;
    if ( v10 >= cSubKeys )
      goto LABEL_127;
  }
  if ( !v48 )
    goto LABEL_117;
  if ( __wcsicmp((const wchar_t *)v48, (const wchar_t *)v32 + 784) )
  {
    LocalFree(v48);
    v48 = 0;
    goto LABEL_117;
  }
  if ( !NcipQueryRegistryWithType(hKey, L"Matched", 1, 0, &uBytes) )
  {
    v13 = (BYTE *)LocalAlloc(0, uBytes);
    if ( !v13 )
    {
      _SetupWriteTextLog(
        LogToken,
        0x40000000u,
        1u,
        "!Failed to allocate memory for MatchedInstanceId of downlevel adapter at Index %d",
        v43);
      goto LABEL_120;
    }
    *(_DWORD *)v49 = NcipQueryRegistryWithType(hKey, L"Matched", 1, v13, &uBytes);
    if ( !*(_DWORD *)v49 && !__wcsicmp((const wchar_t *)v45, (const wchar_t *)v13) )
    {
      LocalFree(v13);
LABEL_123:
      v21 = hKey;
      hKey = 0;
      **(_DWORD **)v38 = v21;
      goto LABEL_132;
    }
    LocalFree(v13);
    v10 = v43;
    goto LABEL_117;
  }
  _SetupWriteTextLog(
    LogToken,
    0x40000000u,
    4u,
    "Downlevel adapter at Index %d with ComponentId %ws matches %ws",
    v10,
    v48,
    v45);
  LocalFree(v48);
  v48 = 0;
  *(_DWORD *)v49 = RegSetValueExW(
                     hKey,
                     L"Matched",
                     0,
                     1u,
                     (const BYTE *)v45,
                     2 * wcslen((const unsigned __int16 *)v45) + 2);
  if ( !*(_DWORD *)v49 )
    goto LABEL_123;
  _SetupWriteTextLog(
    LogToken,
    0x40000000u,
    1u,
    "!!!NdisCoinst: Failed to set matched value %ws for downlevel adapter at index %d",
    v45,
    v10);
LABEL_127:
  if ( !v30 )
LABEL_128:
    *(_DWORD *)v49 = 1168;
LABEL_132:
  if ( NcipIsValidHandle((int)phkResult) )
    RegCloseKey(phkResult);
  if ( NcipIsValidHandle((int)hKey) )
    RegCloseKey(hKey);
  v22 = v31;
  v23 = 0;
  if ( v31 )
  {
    if ( MemberIndex > 0 )
    {
      do
      {
        if ( *((_DWORD *)v22 + v23) )
        {
          LocalFree(*((HLOCAL *)v22 + v23));
          *((_DWORD *)v22 + v23) = 0;
        }
        ++v23;
      }
      while ( v23 < MemberIndex );
    }
    LocalFree(v22);
  }
  if ( DeviceInfoSet )
    SetupDiDestroyDeviceInfoList(DeviceInfoSet);
  if ( v32 )
  {
    LocalFree(v32);
    v32 = 0;
  }
  v24 = v48;
  if ( v48 )
  {
    LocalFree(v48);
    v24 = 0;
  }
  if ( v33 )
    LocalFree(v33);
  if ( hMem )
    LocalFree(hMem);
  if ( v45 )
  {
    LocalFree(v45);
    v45 = 0;
  }
  if ( Dst )
    LocalFree(Dst);
  if ( v24 )
    LocalFree(v24);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x7Bu, &o_1_a_87_s_0_tpsig2);
  return *(_DWORD *)v49;
}
// 32E4350: using guessed type wchar_t aSystemSetupU_1[38];
// 32E5288: using guessed type wchar_t aNet[4];
// 32E5290: using guessed type wchar_t aIrda[5];

//----- (032EE11B) --------------------------------------------------------
int __stdcall NcipUpgradeAdapterSettings(HDEVINFO DeviceInfoSet, DWORD dwIndex)
{
  LSTATUS v2; // edi@71
  LSTATUS v3; // edi@81
  SP_LOG_TOKEN LogToken; // [sp+Ch] [bp-3Ch]@4
  DWORD Type; // [sp+14h] [bp-34h]@71
  DWORD cchValueName; // [sp+18h] [bp-30h]@71
  DWORD cbData; // [sp+1Ch] [bp-2Ch]@71
  DWORD cValues; // [sp+20h] [bp-28h]@1
  DWORD cbMaxValueLen; // [sp+24h] [bp-24h]@1
  DWORD cbMaxValueNameLen; // [sp+28h] [bp-20h]@1
  LPBYTE lpData; // [sp+2Ch] [bp-1Ch]@1
  HKEY hKey; // [sp+30h] [bp-18h]@1
  void *Dst; // [sp+34h] [bp-14h]@1
  HKEY v15; // [sp+38h] [bp-10h]@1
  DWORD v16; // [sp+3Ch] [bp-Ch]@1
  BYTE Data[4]; // [sp+40h] [bp-8h]@1
  char v18[4]; // [sp+44h] [bp-4h]@1
  DWORD dwIndexa; // [sp+54h] [bp+Ch]@70

  v15 = 0;
  hKey = 0;
  v18[0] = 0;
  *(_DWORD *)Data = 0;
  v16 = 0;
  cValues = 0;
  cbMaxValueNameLen = 0;
  cbMaxValueLen = 0;
  Dst = 0;
  lpData = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x8Au, &o_1_a_87_s_0_tpsig2);
  LogToken = SetupGetThreadLogToken();
  _SetupWriteTextLog(
    LogToken,
    0x40000000u,
    2 * (g_IsInUpgrade == 0) + 4,
    "[NdisCoinst: Enter NcipUpgradeAdapterSettings]");
  if ( NcipIsValidHandle((int)DeviceInfoSet) && dwIndex )
  {
    if ( !memcmp((const void *)(dwIndex + 4), &GUID_DEVCLASS_INFRARED, 0x10u) )
      v18[0] = 1;
    *(_DWORD *)v18 = NcipGetUpgradeKey(DeviceInfoSet, (PSP_DEVINFO_DATA)dwIndex, *(int *)v18, (int)&v15);
    if ( *(_DWORD *)v18 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x8Du, &o_1_a_87_s_0_tpsig2, dwIndex);
      _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NdisCoinst: Failed to find matching key from downlevel OS");
    }
    else
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x8Cu, &o_1_a_87_s_0_tpsig2, (char)v15);
      _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "NdisCoinst: Found matching key from downlevel OS");
      *(_DWORD *)v18 = NcipOpenDriverRegistryKey(
                         DeviceInfoSet,
                         (PSP_DEVINFO_DATA)dwIndex,
                         1u,
                         0,
                         2u,
                         0x2001Bu,
                         (int)&hKey);
      if ( *(_DWORD *)v18 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x8Eu, &o_1_a_87_s_0_tpsig2, v18[0]);
        _SetupWriteTextLog(
          LogToken,
          0x40000000u,
          1u,
          "NdisCoinst: NcipOpenDriverRegistryKey failed with error code 0x%lx",
          *(_DWORD *)v18);
      }
      else
      {
        v16 = 4;
        if ( !NcipQueryRegistryWithType(v15, L"PortAuthSendControlState", 4, Data, &v16) )
        {
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x8Fu, &o_1_a_87_s_0_tpsig2, Data[0]);
          v16 = 4;
          *(_DWORD *)v18 = RegSetValueExW(hKey, L"PortAuthSendControlState", 0, 4u, Data, 4u);
          if ( *(_DWORD *)v18 )
          {
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
              WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x90u, &o_1_a_87_s_0_tpsig2, Data[0]);
            _SetupWriteTextLog(
              LogToken,
              0x40000000u,
              4u,
              "NdisCoinst: RegSetValueExW (PortAuthSendControlState) failed with error code 0x%lx",
              *(_DWORD *)v18);
          }
        }
        v16 = 4;
        if ( !NcipQueryRegistryWithType(v15, L"PortAuthReceiveControlState", 4, Data, &v16) )
        {
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x91u, &o_1_a_87_s_0_tpsig2, Data[0]);
          v16 = 4;
          *(_DWORD *)v18 = RegSetValueExW(hKey, L"PortAuthReceiveControlState", 0, 4u, Data, 4u);
          if ( *(_DWORD *)v18 )
          {
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
              WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x92u, &o_1_a_87_s_0_tpsig2, Data[0]);
            _SetupWriteTextLog(
              LogToken,
              0x40000000u,
              1u,
              "NdisCoinst: RegSetValueExW (PortAuthReceiveControlState) failed with error code 0x%lx",
              *(_DWORD *)v18);
          }
        }
        v16 = 4;
        if ( !NcipQueryRegistryWithType(v15, L"PortAuthSendAuthorizationState", 4, Data, &v16) )
        {
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x93u, &o_1_a_87_s_0_tpsig2, Data[0]);
          v16 = 4;
          *(_DWORD *)v18 = RegSetValueExW(hKey, L"PortAuthSendAuthorizationState", 0, 4u, Data, 4u);
          if ( *(_DWORD *)v18 )
          {
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
              WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x94u, &o_1_a_87_s_0_tpsig2, Data[0]);
            _SetupWriteTextLog(
              LogToken,
              0x40000000u,
              1u,
              "NdisCoinst: RegSetValueExW (PortAuthSendAuthorizationState) failed with error code 0x%lx",
              *(_DWORD *)v18);
          }
        }
        v16 = 4;
        if ( !NcipQueryRegistryWithType(v15, L"PortAuthReceiveAuthorizationState", 4, Data, &v16) )
        {
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x95u, &o_1_a_87_s_0_tpsig2, Data[0]);
          v16 = 4;
          *(_DWORD *)v18 = RegSetValueExW(hKey, L"PortAuthReceiveAuthorizationState", 0, 4u, Data, 4u);
          if ( *(_DWORD *)v18 )
          {
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
              WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x96u, &o_1_a_87_s_0_tpsig2, Data[0]);
            _SetupWriteTextLog(
              LogToken,
              0x40000000u,
              1u,
              "NdisCoinst: RegSetValueExW (PortAuthReceiveAuthorizationState) failed with error code 0x%lx",
              *(_DWORD *)v18);
          }
        }
        *(_DWORD *)v18 = RegQueryInfoKeyW(v15, 0, 0, 0, 0, 0, 0, &cValues, &cbMaxValueNameLen, &cbMaxValueLen, 0, 0);
        if ( *(_DWORD *)v18 )
        {
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x97u, &o_1_a_87_s_0_tpsig2, v18[0]);
          _SetupWriteTextLog(LogToken, 0x40000000u, 1u, "RegQueryInfoKey failed with error code 0x%lx", *(_DWORD *)v18);
        }
        else
        {
          ++cbMaxValueNameLen;
          Dst = LocalAlloc(0, 2 * cbMaxValueNameLen);
          if ( Dst )
          {
            lpData = (LPBYTE)LocalAlloc(0, cbMaxValueLen);
            if ( lpData )
            {
              dwIndexa = 0;
              if ( cValues )
              {
                do
                {
                  cchValueName = cbMaxValueNameLen;
                  cbData = cbMaxValueLen;
                  memset(Dst, 0, 2 * cbMaxValueNameLen);
                  memset(lpData, 0, cbMaxValueLen);
                  v2 = RegEnumValueW(v15, dwIndexa, (LPWSTR)Dst, &cchValueName, 0, &Type, lpData, &cbData);
                  if ( v2 )
                  {
                    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                      WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x9Au, &o_1_a_87_s_0_tpsig2, dwIndexa, v2);
                    _SetupWriteTextLog(
                      LogToken,
                      0x40000000u,
                      2u,
                      "RegEnumValueW for ValueCount %d failed with error code 0x%lx",
                      dwIndexa,
                      v2);
                  }
                  else if ( *(_WORD *)Dst == 42 && lstrcmpW((LPCWSTR)Dst, L"*IfType") )
                  {
                    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
                      WPP_SF_S(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x9Bu, &o_1_a_87_s_0_tpsig2, (int)Dst);
                    _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "Setting standardized keyword %ws", Dst);
                    v3 = RegSetValueExW(hKey, (LPCWSTR)Dst, 0, Type, lpData, cbData);
                    if ( v3 )
                    {
                      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x9Cu, &o_1_a_87_s_0_tpsig2, v3);
                      _SetupWriteTextLog(LogToken, 0x40000000u, 1u, "RegSetValueExW failed with error code 0x%lx", v3);
                    }
                  }
                  ++dwIndexa;
                }
                while ( dwIndexa < cValues );
              }
              *(_DWORD *)v18 = 0;
            }
            else
            {
              *(_DWORD *)v18 = 14;
              if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x99u, &o_1_a_87_s_0_tpsig2);
              _SetupWriteTextLog(LogToken, 0x40000000u, 1u, "Failed to allocate memory for DataBuffer");
            }
          }
          else
          {
            *(_DWORD *)v18 = 14;
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
              WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x98u, &o_1_a_87_s_0_tpsig2);
            _SetupWriteTextLog(LogToken, 0x40000000u, 1u, "Failed to allocate memory for ValueBuffer");
          }
        }
      }
    }
  }
  else
  {
    *(_DWORD *)v18 = 87;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x8Bu, &o_1_a_87_s_0_tpsig2, (char)DeviceInfoSet, dwIndex);
    _SetupWriteTextLog(
      LogToken,
      0x40000000u,
      1u,
      "NdisCoinst: Invalid parameter DeviceInfoSet 0x%p, DeviceInfoData 0x%p",
      DeviceInfoSet,
      dwIndex);
  }
  if ( NcipIsValidHandle((int)v15) )
    RegCloseKey(v15);
  if ( NcipIsValidHandle((int)hKey) )
    RegCloseKey(hKey);
  if ( Dst )
    LocalFree(Dst);
  if ( lpData )
    LocalFree(lpData);
  _SetupWriteTextLog(LogToken, 0x40000000u, 4u, "[NdisCoinst: Enter NcipUpgradeAdapterSettings]");
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x9Du, &o_1_a_87_s_0_tpsig2);
  return *(_DWORD *)v18;
}
// 32F3068: using guessed type int g_IsInUpgrade;

//----- (032EE8DF) --------------------------------------------------------
ULONG __stdcall WPP_SF_SS(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, int a4, int a5)
{
  int v5; // edx@1
  unsigned int v6; // ecx@13
  int v7; // eax@18
  signed int v9; // [sp-4h] [bp-10h]@12
  int v10; // [sp+28h] [bp+1Ch]@3

  v5 = a5;
  if ( a5 )
  {
    if ( *(_WORD *)a5 )
      v10 = 2 * wcslen((const unsigned __int16 *)a5) + 2;
    else
      v10 = 14;
  }
  else
  {
    v10 = 10;
  }
  if ( v5 )
  {
    if ( !*(_WORD *)v5 )
      v5 = (int)L"<NULL>";
  }
  else
  {
    v5 = (int)L"NULL";
  }
  if ( a4 )
  {
    if ( *(_WORD *)a4 )
    {
      v6 = 2 * wcslen((const unsigned __int16 *)a4) + 2;
      goto LABEL_16;
    }
    v9 = 14;
  }
  else
  {
    v9 = 10;
  }
  v6 = v9;
LABEL_16:
  if ( a4 )
  {
    if ( *(_WORD *)a4 )
      v7 = a4;
    else
      v7 = (int)L"<NULL>";
  }
  else
  {
    v7 = (int)L"NULL";
  }
  return TraceMessage(LoggerHandle, 0x2Bu, MessageGuid, MessageNumber, v7, v6, v5, v10, 0);
}
// 32E18D0: using guessed type wchar_t aNull[5];
// 32E18DC: using guessed type wchar_t aNull_0[7];

//----- (032EE9A6) --------------------------------------------------------
ULONG __stdcall WPP_SF_SL(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, int a4, char a5)
{
  int v5; // edx@1
  unsigned int v6; // eax@4
  signed int v8; // [sp-4h] [bp-4h]@3

  v5 = a4;
  if ( a4 )
  {
    if ( *(_WORD *)a4 )
    {
      v6 = 2 * wcslen((const unsigned __int16 *)a4) + 2;
      goto LABEL_7;
    }
    v8 = 14;
  }
  else
  {
    v8 = 10;
  }
  v6 = v8;
LABEL_7:
  if ( a4 )
  {
    if ( !*(_WORD *)a4 )
      v5 = (int)L"<NULL>";
  }
  else
  {
    v5 = (int)L"NULL";
  }
  return TraceMessage(LoggerHandle, 0x2Bu, MessageGuid, MessageNumber, v5, v6, &a5, 4, 0);
}
// 32E18D0: using guessed type wchar_t aNull[5];
// 32E18DC: using guessed type wchar_t aNull_0[7];

//----- (032EEA19) --------------------------------------------------------
ULONG __stdcall WPP_SF_SdL(TRACEHANDLE LoggerHandle, USHORT MessageNumber, LPCGUID MessageGuid, int a4, char a5, char a6)
{
  int v6; // edx@1
  unsigned int v7; // eax@4
  signed int v9; // [sp-4h] [bp-4h]@3

  v6 = a4;
  if ( a4 )
  {
    if ( *(_WORD *)a4 )
    {
      v7 = 2 * wcslen((const unsigned __int16 *)a4) + 2;
      goto LABEL_7;
    }
    v9 = 14;
  }
  else
  {
    v9 = 10;
  }
  v7 = v9;
LABEL_7:
  if ( a4 )
  {
    if ( !*(_WORD *)a4 )
      v6 = (int)L"<NULL>";
  }
  else
  {
    v6 = (int)L"NULL";
  }
  return TraceMessage(LoggerHandle, 0x2Bu, MessageGuid, MessageNumber, v6, v7, &a5, 4, &a6, 4, 0);
}
// 32E18D0: using guessed type wchar_t aNull[5];
// 32E18DC: using guessed type wchar_t aNull_0[7];

//----- (032EEA92) --------------------------------------------------------
int __stdcall NcipOnMachineUILanguageSwitch(const wchar_t *a1, const wchar_t *a2, int a3)
{
  HRESULT v3; // eax@9
  HRESULT v4; // eax@18
  char v5; // al@23
  char v6; // al@32
  signed int v7; // eax@35
  LSTATUS v8; // eax@45
  char v9; // bl@54
  LSTATUS v10; // eax@56
  HRESULT v11; // eax@61
  LSTATUS v12; // eax@65
  int v13; // eax@69
  int v14; // eax@73
  char v15; // al@81
  HRESULT v16; // eax@86
  HRESULT v17; // eax@90
  int v18; // eax@94
  char v19; // al@104
  HRESULT v20; // eax@108
  HRESULT v21; // eax@112
  SIZE_T v22; // eax@116
  LSTATUS v23; // eax@124
  char v24; // al@133
  char v25; // al@136
  char v26; // al@141
  DWORD cchName; // [sp+Ch] [bp-6A8h]@54
  DWORD cSubKeys; // [sp+10h] [bp-6A4h]@1
  BYTE Data[4]; // [sp+14h] [bp-6A0h]@54
  UINT uID; // [sp+18h] [bp-69Ch]@69
  STRSAFE_LPWSTR pszDest; // [sp+1Ch] [bp-698h]@4
  HLOCAL hMem; // [sp+20h] [bp-694h]@1
  DWORD cbData; // [sp+24h] [bp-690h]@69
  STRSAFE_LPCWSTR v35; // [sp+28h] [bp-68Ch]@1
  STRSAFE_LPWSTR v36; // [sp+2Ch] [bp-688h]@1
  HKEY phkResult; // [sp+30h] [bp-684h]@1
  DWORD cbMaxSubKeyLen; // [sp+34h] [bp-680h]@1
  LPWSTR lpName; // [sp+38h] [bp-67Ch]@1
  ULONG pulNumLanguages; // [sp+3Ch] [bp-678h]@1
  HKEY hKey; // [sp+40h] [bp-674h]@1
  char v42; // [sp+47h] [bp-66Dh]@54
  ULONG pcchLanguagesBuffer; // [sp+48h] [bp-66Ch]@4
  int v44; // [sp+4Ch] [bp-668h]@1
  STRSAFE_LPCWSTR pszSrc; // [sp+50h] [bp-664h]@1
  WCHAR String1; // [sp+54h] [bp-660h]@54
  wchar_t Dst[258]; // [sp+258h] [bp-45Ch]@54
  wchar_t String2; // [sp+45Ch] [bp-258h]@54
  wchar_t v49; // [sp+660h] [bp-54h]@54

  pszSrc = a1;
  v35 = a2;
  v44 = 0;
  phkResult = 0;
  hKey = 0;
  cbMaxSubKeyLen = 0;
  cSubKeys = 0;
  lpName = 0;
  v36 = 0;
  pulNumLanguages = 0;
  hMem = 0;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xAu, &stru_32E5D00);
  pcchLanguagesBuffer = wcslen(pszSrc);
  pszDest = (STRSAFE_LPWSTR)LocalAlloc(0, 2 * pcchLanguagesBuffer + 4);
  if ( !pszDest )
  {
    v44 = 1;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xBu, &stru_32E5D00, 2 * pcchLanguagesBuffer + 4);
    goto LABEL_144;
  }
  v3 = StringCchCopyW(pszDest, pcchLanguagesBuffer + 2, pszSrc);
  if ( v3 < 0 )
  {
    v44 = 1;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_SL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xCu, &stru_32E5D00, (int)pszSrc, v3);
    goto LABEL_144;
  }
  pszDest[pcchLanguagesBuffer + 1] = 0;
  pcchLanguagesBuffer = wcslen(v35);
  v36 = (STRSAFE_LPWSTR)LocalAlloc(0, 2 * pcchLanguagesBuffer + 4);
  if ( !v36 )
  {
    v44 = 1;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xDu, &stru_32E5D00, 2 * pcchLanguagesBuffer + 4);
    goto LABEL_144;
  }
  v4 = StringCchCopyW(v36, pcchLanguagesBuffer + 2, v35);
  if ( v4 < 0 )
  {
    v44 = 1;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_SL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xEu, &stru_32E5D00, (int)v35, v4);
    goto LABEL_144;
  }
  v36[pcchLanguagesBuffer + 1] = 0;
  pcchLanguagesBuffer = 0;
  if ( !GetThreadPreferredUILanguages(0x48u, &pulNumLanguages, 0, &pcchLanguagesBuffer) )
  {
    v5 = GetLastError();
    v44 = 1;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xFu, &stru_32E5D00, v5);
    goto LABEL_144;
  }
  if ( pulNumLanguages )
  {
    hMem = LocalAlloc(0, 2 * pcchLanguagesBuffer);
    if ( !hMem )
    {
      v44 = 1;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x10u, &stru_32E5D00, 2 * pcchLanguagesBuffer);
      goto LABEL_144;
    }
    if ( !GetThreadPreferredUILanguages(0x48u, &pulNumLanguages, (PZZWSTR)hMem, &pcchLanguagesBuffer) )
    {
      v6 = GetLastError();
      v44 = 1;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x11u, &stru_32E5D00, v6);
      goto LABEL_144;
    }
  }
  v7 = NcipWaitForMultipleObjects();
  if ( v7 )
  {
    v44 = 1;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x12u, &stru_32E5D00, v7);
    goto LABEL_140;
  }
  v35 = (STRSAFE_LPCWSTR)RegOpenKeyExW(
                           HKEY_LOCAL_MACHINE,
                           L"System\\CurrentControlSet\\Control\\Network\\{4D36E972-E325-11CE-BFC1-08002BE10318}",
                           0,
                           0xF003Fu,
                           &phkResult);
  if ( v35 )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x13u, &stru_32E5D00, (char)v35);
    if ( v35 != (STRSAFE_LPCWSTR)2 )
      v44 = 1;
    goto LABEL_139;
  }
  v8 = RegQueryInfoKeyW(phkResult, 0, 0, 0, &cSubKeys, &cbMaxSubKeyLen, 0, 0, 0, 0, 0, 0);
  if ( v8 )
  {
    v44 = 1;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x14u, &stru_32E5D00, v8);
    goto LABEL_139;
  }
  cbMaxSubKeyLen += 13;
  lpName = (LPWSTR)LocalAlloc(0, 2 * cbMaxSubKeyLen);
  if ( !lpName )
  {
    v44 = 1;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x15u, &stru_32E5D00);
    goto LABEL_139;
  }
  pszSrc = 0;
  if ( !cSubKeys )
    goto LABEL_139;
  while ( 1 )
  {
    memset(Dst, 0, 0x202u);
    memset(&String2, 0, 0x202u);
    v9 = 0;
    memset(&String1, 0, 0x202u);
    memset(lpName, 0, 2 * cbMaxSubKeyLen);
    memset(&v49, 0, 0x4Eu);
    v42 = 0;
    *(_DWORD *)Data = 0;
    cchName = cbMaxSubKeyLen;
    if ( NcipIsValidHandle((int)hKey) )
    {
      RegCloseKey(hKey);
      hKey = 0;
    }
    v10 = RegEnumKeyExW(phkResult, (DWORD)pszSrc, lpName, &cchName, 0, 0, 0, 0);
    if ( v10 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x16u, &stru_32E5D00, (char)pszSrc, v10);
      goto LABEL_131;
    }
    StringCchCopyW(&v49, 0x27u, lpName);
    v11 = StringCchCatW(lpName, cbMaxSubKeyLen, L"\\Connection");
    if ( v11 < 0 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x17u, &stru_32E5D00, (char)pszSrc, v11);
      goto LABEL_131;
    }
    v12 = RegOpenKeyExW(phkResult, lpName, 0, 0xF003Fu, &hKey);
    if ( v12 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x18u, &stru_32E5D00, (char)pszSrc, v12);
      goto LABEL_131;
    }
    cbData = 4;
    v13 = NcipQueryRegistryWithType(hKey, L"DefaultNameResourceId", 4, (LPBYTE)&uID, &cbData);
    if ( v13 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x19u, &stru_32E5D00, (char)pszSrc, v13);
      goto LABEL_131;
    }
    cbData = 4;
    v14 = NcipQueryRegistryWithType(hKey, L"DefaultNameIndex", 4, Data, &cbData);
    if ( v14 )
    {
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Au, &stru_32E5D00, (char)pszSrc, v14);
      goto LABEL_131;
    }
    if ( *(_DWORD *)Data )
      v9 = 1;
    pulNumLanguages = 0;
    if ( !SetThreadPreferredUILanguages(8u, v36, &pulNumLanguages) )
      break;
    if ( LoadStringW(g_hInst, uID, Dst, 257) )
    {
      if ( v9 )
      {
        v16 = StringCchPrintfW(&String2, 0x101u, L"%s %d", Dst, *(_DWORD *)Data);
        if ( v16 < 0 )
        {
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Du, &stru_32E5D00, (char)pszSrc, v16);
          goto LABEL_131;
        }
      }
      else
      {
        v17 = StringCchCopyW(&String2, 0x101u, Dst);
        if ( v17 < 0 )
        {
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Eu, &stru_32E5D00, (char)pszSrc, v17);
          goto LABEL_131;
        }
      }
      cbData = 514;
      v18 = NcipQueryRegistryWithType(hKey, L"Name", 1, (LPBYTE)&String1, &cbData);
      if ( v18 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Fu, &stru_32E5D00, (char)pszSrc, v18);
      }
      else if ( lstrcmpiW(&String1, &String2) )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_SL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x20u, &stru_32E5D00, (int)&String1, (char)pszSrc);
      }
      else
      {
        pulNumLanguages = 0;
        if ( !SetThreadPreferredUILanguages(8u, pszDest, &pulNumLanguages) )
        {
          v44 = 1;
          v25 = GetLastError();
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x21u, &stru_32E5D00, v25);
          goto LABEL_139;
        }
        memset(Dst, 0, 0x202u);
        memset(&String2, 0, 0x202u);
        if ( LoadStringW(g_hInst, uID, Dst, 257) )
        {
          if ( !v9 )
          {
            v21 = StringCchCopyW(&String2, 0x101u, Dst);
            if ( v21 < 0 )
            {
              if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x24u, &stru_32E5D00, (char)pszSrc, v21);
              goto LABEL_131;
            }
LABEL_116:
            v22 = NcipIsNameDuplicate(&String2, &v49, (int)&v42);
            if ( v22 )
            {
              if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                WPP_SF_SdL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x25u, &stru_32E5D00, (int)&String2, (char)pszSrc, v22);
            }
            else if ( v42 )
            {
              if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                WPP_SF_SL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x26u, &stru_32E5D00, (int)&String2, (char)pszSrc);
            }
            else
            {
              v23 = NcipUpdateConnectionName((int)&v49, &String2, 0, 0, 1, 0);
              if ( v23 )
              {
                if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                  WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x27u, &stru_32E5D00, (char)pszSrc, v23);
              }
              else if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
              {
                WPP_SF_SL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x28u, &stru_32E5D00, (int)&String2, (char)pszSrc);
              }
            }
            goto LABEL_131;
          }
          v20 = StringCchPrintfW(&String2, 0x101u, L"%s %d", Dst, *(_DWORD *)Data);
          if ( v20 >= 0 )
            goto LABEL_116;
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x23u, &stru_32E5D00, (char)pszSrc, v20);
        }
        else
        {
          v19 = GetLastError();
          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
            WPP_SF_qqq(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x22u, &stru_32E5D00, (char)pszSrc, uID, v19);
        }
      }
    }
    else
    {
      v15 = GetLastError();
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_qqq(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Cu, &stru_32E5D00, (char)pszSrc, uID, v15);
    }
LABEL_131:
    pszSrc = (STRSAFE_LPCWSTR)((char *)pszSrc + 1);
    if ( (unsigned int)pszSrc >= cSubKeys )
      goto LABEL_139;
  }
  v44 = 1;
  v24 = GetLastError();
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Bu, &stru_32E5D00, v24);
LABEL_139:
  ReleaseMutex(g_hMutex);
LABEL_140:
  pulNumLanguages = 0;
  if ( !SetThreadPreferredUILanguages(8u, (PCZZWSTR)hMem, &pulNumLanguages) )
  {
    v44 = 1;
    v26 = GetLastError();
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
    {
      if ( *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x29u, &stru_32E5D00, v26);
    }
  }
LABEL_144:
  if ( NcipIsValidHandle((int)phkResult) )
    RegCloseKey(phkResult);
  if ( NcipIsValidHandle((int)hKey) )
    RegCloseKey(hKey);
  if ( lpName )
    LocalFree(lpName);
  if ( pszDest )
    LocalFree(pszDest);
  if ( v36 )
    LocalFree(v36);
  if ( hMem )
    LocalFree(hMem);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Au, &stru_32E5D00);
  return v44;
}

//----- (032EF6AF) --------------------------------------------------------
int __stdcall NcipOnMachineUILanguageInit(const wchar_t *a1, int a2)
{
  HRESULT v2; // eax@9
  char v3; // al@14
  char v4; // al@23
  char v5; // al@27
  signed int v6; // eax@30
  LSTATUS v7; // eax@40
  LSTATUS v8; // eax@51
  HRESULT v9; // eax@56
  LSTATUS v10; // eax@60
  int v11; // eax@64
  int v12; // eax@68
  char v13; // al@75
  HRESULT v14; // eax@79
  HRESULT v15; // eax@83
  SIZE_T v16; // ebx@87
  HRESULT v17; // eax@94
  PVOID v18; // eax@98
  char v19; // al@112
  LSTATUS v21; // eax@134
  DWORD cchName; // [sp+Ch] [bp-4A4h]@49
  UINT uID; // [sp+10h] [bp-4A0h]@64
  DWORD cSubKeys; // [sp+14h] [bp-49Ch]@1
  DWORD cbData; // [sp+18h] [bp-498h]@64
  BYTE Data[4]; // [sp+1Ch] [bp-494h]@49
  STRSAFE_LPWSTR pszDest; // [sp+20h] [bp-490h]@4
  HLOCAL hMem; // [sp+24h] [bp-48Ch]@1
  HKEY phkResult; // [sp+28h] [bp-488h]@1
  DWORD cbMaxSubKeyLen; // [sp+2Ch] [bp-484h]@1
  ULONG pulNumLanguages; // [sp+30h] [bp-480h]@1
  unsigned int v32; // [sp+34h] [bp-47Ch]@1
  ULONG pcchLanguagesBuffer; // [sp+38h] [bp-478h]@4
  HKEY hKey; // [sp+3Ch] [bp-474h]@1
  LPWSTR lpName; // [sp+40h] [bp-470h]@1
  char v36; // [sp+47h] [bp-469h]@49
  int v37; // [sp+48h] [bp-468h]@1
  char v38; // [sp+4Fh] [bp-461h]@49
  STRSAFE_LPCWSTR pszSrc; // [sp+50h] [bp-460h]@1
  wchar_t Dst[258]; // [sp+54h] [bp-45Ch]@49
  wchar_t v41; // [sp+258h] [bp-258h]@49
  wchar_t v42; // [sp+45Ch] [bp-54h]@49

  pszSrc = a1;
  v37 = 0;
  phkResult = 0;
  hKey = 0;
  cbMaxSubKeyLen = 0;
  cSubKeys = 0;
  lpName = 0;
  pulNumLanguages = 0;
  hMem = 0;
  v32 = 1;
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Bu, &stru_32E5D00);
  pcchLanguagesBuffer = wcslen(pszSrc);
  pszDest = (STRSAFE_LPWSTR)LocalAlloc(0, 2 * pcchLanguagesBuffer + 4);
  if ( !pszDest )
  {
    v37 = 1;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Cu, &stru_32E5D00, 2 * pcchLanguagesBuffer + 4);
    goto LABEL_115;
  }
  v2 = StringCchCopyW(pszDest, pcchLanguagesBuffer + 2, pszSrc);
  if ( v2 < 0 )
  {
    v37 = 1;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_SL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Du, &stru_32E5D00, (int)pszSrc, v2);
    goto LABEL_115;
  }
  pszDest[pcchLanguagesBuffer + 1] = 0;
  pcchLanguagesBuffer = 0;
  if ( !GetThreadPreferredUILanguages(0x48u, &pulNumLanguages, 0, &pcchLanguagesBuffer) )
  {
    v3 = GetLastError();
    v37 = 1;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Eu, &stru_32E5D00, v3);
    goto LABEL_115;
  }
  if ( pulNumLanguages )
  {
    hMem = LocalAlloc(0, 2 * pcchLanguagesBuffer);
    if ( !hMem )
    {
      v37 = 1;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Fu, &stru_32E5D00, 2 * pcchLanguagesBuffer);
      goto LABEL_115;
    }
    if ( !GetThreadPreferredUILanguages(0x48u, &pulNumLanguages, (PZZWSTR)hMem, &pcchLanguagesBuffer) )
    {
      v4 = GetLastError();
      v37 = 1;
      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x30u, &stru_32E5D00, v4);
      goto LABEL_115;
    }
  }
  pulNumLanguages = 0;
  if ( !SetThreadPreferredUILanguages(8u, pszDest, &pulNumLanguages) )
  {
    v37 = 1;
    v5 = GetLastError();
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x31u, &stru_32E5D00, v5);
    goto LABEL_115;
  }
  v6 = NcipWaitForMultipleObjects();
  if ( v6 )
  {
    v37 = 1;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x32u, &stru_32E5D00, v6);
    goto LABEL_111;
  }
  pszSrc = (STRSAFE_LPCWSTR)RegOpenKeyExW(
                              HKEY_LOCAL_MACHINE,
                              L"System\\CurrentControlSet\\Control\\Network\\{4D36E972-E325-11CE-BFC1-08002BE10318}",
                              0,
                              0xF003Fu,
                              &phkResult);
  if ( pszSrc )
  {
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x33u, &stru_32E5D00, (char)pszSrc);
    if ( pszSrc != (STRSAFE_LPCWSTR)2 )
      v37 = 1;
    goto LABEL_110;
  }
  v7 = RegQueryInfoKeyW(phkResult, 0, 0, 0, &cSubKeys, &cbMaxSubKeyLen, 0, 0, 0, 0, 0, 0);
  if ( v7 )
  {
    v37 = 1;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x34u, &stru_32E5D00, v7);
    goto LABEL_110;
  }
  cbMaxSubKeyLen += 13;
  lpName = (LPWSTR)LocalAlloc(0, 2 * cbMaxSubKeyLen);
  if ( !lpName )
  {
    v37 = 1;
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x35u, &stru_32E5D00);
    goto LABEL_110;
  }
  pszSrc = 0;
  if ( cSubKeys )
  {
    do
    {
      memset(Dst, 0, 0x202u);
      memset(&v41, 0, 0x202u);
      memset(lpName, 0, 2 * cbMaxSubKeyLen);
      memset(&v42, 0, 0x4Eu);
      cchName = cbMaxSubKeyLen;
      v38 = 0;
      *(_DWORD *)Data = 0;
      v36 = 0;
      if ( NcipIsValidHandle((int)hKey) )
      {
        RegCloseKey(hKey);
        hKey = 0;
      }
      v8 = RegEnumKeyExW(phkResult, (DWORD)pszSrc, lpName, &cchName, 0, 0, 0, 0);
      if ( v8 )
      {
        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
          WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x36u, &stru_32E5D00, (char)pszSrc, v8);
      }
      else
      {
        StringCchCopyW(&v42, 0x27u, lpName);
        v9 = StringCchCatW(lpName, cbMaxSubKeyLen, L"\\Connection");
        if ( v9 >= 0 )
        {
          v10 = RegOpenKeyExW(phkResult, lpName, 0, 0xF003Fu, &hKey);
          if ( v10 )
          {
            if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
              WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x38u, &stru_32E5D00, (char)pszSrc, v10);
          }
          else
          {
            cbData = 4;
            v11 = NcipQueryRegistryWithType(hKey, L"DefaultNameResourceId", 4, (LPBYTE)&uID, &cbData);
            if ( v11 )
            {
              if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x39u, &stru_32E5D00, (char)pszSrc, v11);
            }
            else
            {
              cbData = 4;
              v12 = NcipQueryRegistryWithType(hKey, L"DefaultNameIndex", 4, Data, &cbData);
              if ( v12 )
              {
                if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                  WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x3Au, &stru_32E5D00, (char)pszSrc, v12);
              }
              else
              {
                if ( *(_DWORD *)Data )
                  v36 = 1;
                memset(Dst, 0, 0x202u);
                memset(&v41, 0, 0x202u);
                if ( LoadStringW(g_hInst, uID, Dst, 257) )
                {
                  if ( v36 )
                  {
                    v14 = StringCchPrintfW(&v41, 0x101u, L"%s %d", Dst, *(_DWORD *)Data);
                    if ( v14 < 0 )
                    {
                      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                        WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x3Cu, &stru_32E5D00, (char)pszSrc, v14);
                      goto LABEL_109;
                    }
                  }
                  else
                  {
                    v15 = StringCchCopyW(&v41, 0x101u, Dst);
                    if ( v15 < 0 )
                    {
                      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                        WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x3Du, &stru_32E5D00, (char)pszSrc, v15);
                      goto LABEL_109;
                    }
                  }
                  v16 = NcipIsNameDuplicate(&v41, &v42, (int)&v38);
                  if ( !v16 )
                  {
                    if ( v38 )
                    {
                      v32 = 1;
                      while ( 1 )
                      {
                        if ( v32 > 0xFFFF )
                          goto LABEL_104;
                        ++v32;
                        v17 = StringCchPrintfW(&v41, 0x101u, L"%s %d", Dst, v32);
                        if ( v17 < 0 )
                          break;
                        v16 = NcipIsNameDuplicate(&v41, &v42, (int)&v38);
                        if ( v16 )
                        {
                          v18 = WPP_GLOBAL_Control;
                          if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                          {
                            WPP_SF_SdL(
                              *((_QWORD *)WPP_GLOBAL_Control + 2),
                              0x40u,
                              &stru_32E5D00,
                              (int)&v42,
                              (char)pszSrc,
                              v16);
                            goto LABEL_104;
                          }
                          goto LABEL_105;
                        }
                        if ( !v38 )
                          goto LABEL_104;
                      }
                      v16 = (unsigned __int16)v17;
                      v18 = WPP_GLOBAL_Control;
                      if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                      {
                        WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x3Fu, &stru_32E5D00, (char)pszSrc, v16);
LABEL_104:
                        v18 = WPP_GLOBAL_Control;
                      }
LABEL_105:
                      *(_DWORD *)Data = v32;
                      if ( v16 )
                      {
LABEL_106:
                        if ( v18 != &WPP_GLOBAL_Control && *((_BYTE *)v18 + 28) & 1 )
                          WPP_SF_SL(*((_QWORD *)v18 + 2), 0x44u, &stru_32E5D00, (int)&v42, (char)pszSrc);
                        goto LABEL_109;
                      }
                    }
                    else
                    {
                      v18 = WPP_GLOBAL_Control;
                    }
                    if ( v32 <= 0xFFFF )
                    {
                      if ( v18 != &WPP_GLOBAL_Control && *((_BYTE *)v18 + 28) & 0x10 )
                        WPP_SF_SS(*((_QWORD *)v18 + 2), 0x41u, &stru_32E5D00, (int)&v42, (int)&v41);
                      v21 = NcipUpdateConnectionName((int)&v42, &v41, 0, Data, 1, 0);
                      if ( v21 )
                      {
                        if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                          WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x42u, &stru_32E5D00, (char)pszSrc, v21);
                      }
                      else if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 0x10 )
                      {
                        WPP_SF_SL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x43u, &stru_32E5D00, (int)&v41, (char)pszSrc);
                      }
                      goto LABEL_109;
                    }
                    goto LABEL_106;
                  }
                  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                    WPP_SF_SdL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x3Eu, &stru_32E5D00, (int)&v42, (char)pszSrc, v16);
                }
                else
                {
                  v13 = GetLastError();
                  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
                    WPP_SF_qqq(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x3Bu, &stru_32E5D00, (char)pszSrc, uID, v13);
                }
              }
            }
          }
        }
        else if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        {
          WPP_SF_dL(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x37u, &stru_32E5D00, (char)pszSrc, v9);
        }
      }
LABEL_109:
      pszSrc = (STRSAFE_LPCWSTR)((char *)pszSrc + 1);
    }
    while ( (unsigned int)pszSrc < cSubKeys );
  }
LABEL_110:
  ReleaseMutex(g_hMutex);
LABEL_111:
  pulNumLanguages = 0;
  if ( !SetThreadPreferredUILanguages(8u, (PCZZWSTR)hMem, &pulNumLanguages) )
  {
    v37 = 1;
    v19 = GetLastError();
    if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control )
    {
      if ( *((_BYTE *)WPP_GLOBAL_Control + 28) & 1 )
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x45u, &stru_32E5D00, v19);
    }
  }
LABEL_115:
  if ( NcipIsValidHandle((int)hKey) )
    RegCloseKey(hKey);
  if ( NcipIsValidHandle((int)phkResult) )
    RegCloseKey(phkResult);
  if ( lpName )
    LocalFree(lpName);
  if ( pszDest )
    LocalFree(pszDest);
  if ( hMem )
    LocalFree(hMem);
  if ( WPP_GLOBAL_Control != &WPP_GLOBAL_Control && *((_BYTE *)WPP_GLOBAL_Control + 28) & 8 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x46u, &stru_32E5D00);
  return v37;
}

//----- (032F014A) --------------------------------------------------------
signed int __stdcall IsSystemUpgradeInProgress()
{
  signed int v0; // esi@1
  DWORD cbData; // [sp+4h] [bp-10h]@2
  BYTE Data[4]; // [sp+8h] [bp-Ch]@2
  DWORD Type; // [sp+Ch] [bp-8h]@2
  HKEY phkResult; // [sp+10h] [bp-4h]@1

  v0 = 0;
  phkResult = 0;
  if ( !RegOpenKeyExW(HKEY_LOCAL_MACHINE, L"System\\Setup", 0, 1u, &phkResult) )
  {
    *(_DWORD *)Data = 0;
    cbData = 4;
    Type = 0;
    if ( !RegQueryValueExW(phkResult, L"Upgrade", 0, &Type, Data, &cbData) && Type == 4 && *(_DWORD *)Data == 1 )
      v0 = 1;
    RegCloseKey(phkResult);
  }
  return v0;
}

//----- (032F01BF) --------------------------------------------------------
int __stdcall DoPass(int a1, void *a2, void *a3, int a4, void *a5)
{
  int result; // eax@2
  signed int v6; // ebx@4
  BYTE *v7; // edi@7
  int v8; // eax@19
  int *v9; // edi@19
  void *v10; // eax@33
  void *v11; // ebx@33
  const WCHAR *v12; // edi@34
  DWORD i; // [sp-10h] [bp-9E4h]@3
  struct _SP_DEVINFO_DATA *v14; // [sp-Ch] [bp-9E0h]@3
  DWORD PropertyRegDataType; // [sp+4h] [bp-9D0h]@6
  BYTE v16[4]; // [sp+8h] [bp-9CCh]@26
  HMACHINE hMachine; // [sp+Ch] [bp-9C8h]@1
  DWORD MemberIndex; // [sp+10h] [bp-9C4h]@1
  int v19; // [sp+14h] [bp-9C0h]@15
  HDEVINFO v20; // [sp+18h] [bp-9BCh]@1
  int v21; // [sp+1Ch] [bp-9B8h]@1
  HDEVINFO DeviceInfoSet; // [sp+20h] [bp-9B4h]@1
  struct _SP_DEVINFO_DATA DeviceInfoData; // [sp+24h] [bp-9B0h]@3
  BYTE PropertyBuffer; // [sp+40h] [bp-994h]@6
  __int16 v25; // [sp+83Ch] [bp-198h]@7
  __int16 v26; // [sp+83Eh] [bp-196h]@7
  WCHAR DeviceInstanceId; // [sp+840h] [bp-194h]@4

  DeviceInfoSet = a2;
  v20 = a3;
  hMachine = a5;
  MemberIndex = 0;
  v21 = 0;
  if ( a1 == 5 )
    return -1;
  memset(&DeviceInfoData, 0, sizeof(DeviceInfoData));
  v14 = &DeviceInfoData;
  for ( i = 0; ; i = MemberIndex )
  {
    DeviceInfoData.cbSize = 28;
    if ( !SetupDiEnumDeviceInfo(DeviceInfoSet, i, v14) )
      return v21;
    ++MemberIndex;
    v6 = 0;
    if ( !SetupDiGetDeviceInstanceIdW(DeviceInfoSet, &DeviceInfoData, &DeviceInstanceId, 0xC8u, 0) )
      goto LABEL_39;
    if ( a1 == 1 )
    {
      do
      {
        if ( SetupDiGetDeviceRegistryPropertyW(
               DeviceInfoSet,
               &DeviceInfoData,
               (v6 != 0) + 1,
               &PropertyRegDataType,
               &PropertyBuffer,
               0x800u,
               0) )
        {
          v26 = 0;
          v25 = 0;
          v7 = &PropertyBuffer;
          while ( *(_WORD *)v7 )
          {
            if ( CompareStringW(0x7Fu, 1u, (PCNZWCH)v7, -1, (PCNZWCH)(a4 + *(_DWORD *)(a4 + 16)), -1) == 2 )
            {
              ++v6;
              _MarkAsMatched(v20, &DeviceInstanceId, (int)&v21);
              break;
            }
            v7 += 2 * lstrlenW((LPCWSTR)v7) + 2;
            if ( (unsigned int)v7 >= (unsigned int)&DeviceInstanceId )
              break;
          }
        }
        ++v6;
      }
      while ( v6 < 2 );
    }
    if ( a1 == 2 )
      break;
LABEL_24:
    if ( a1 != 3 )
      goto LABEL_31;
    if ( !*(_DWORD *)(a4 + 12) )
      return -1;
    if ( !SetupDiGetDeviceRegistryPropertyW(DeviceInfoSet, &DeviceInfoData, 0xFu, &PropertyRegDataType, v16, 4u, 0) )
      *(_DWORD *)v16 = 0;
    if ( v16[0] & 0x10 && CompareStringW(0x7Fu, 1u, &DeviceInstanceId, -1, (PCNZWCH)(a4 + *(_DWORD *)(a4 + 8)), -1) == 2 )
    {
      _MarkAsMatched(v20, &DeviceInstanceId, (int)&v21);
LABEL_31:
      if ( a1 == 4 )
      {
        result = -1;
        if ( *(_DWORD *)(a4 + 20) == -1 )
          return result;
        v10 = _GetDeviceProperty(DeviceInfoSet, &DeviceInfoData, 0x23u);
        v11 = v10;
        if ( v10 )
        {
          v12 = (const WCHAR *)v10;
          if ( *(_WORD *)v10 )
          {
            do
            {
              if ( CompareStringW(0x7Fu, 1u, v12, -1, (PCNZWCH)(a4 + *(_DWORD *)(a4 + 20)), -1) == 2 )
                _MarkAsMatched(v20, &DeviceInstanceId, (int)&v21);
              v12 += lstrlenW(v12) + 1;
            }
            while ( *v12 );
          }
          LocalFree(v11);
        }
      }
    }
LABEL_39:
    memset(&DeviceInfoData, 0, sizeof(DeviceInfoData));
    v14 = &DeviceInfoData;
  }
  v19 = 0;
  if ( *(_DWORD *)a4 >= 2u && *(_DWORD *)(a4 + 24) != -1 )
  {
    if ( !_GetPseudoLocationPathLength(DeviceInfoData.DevInst, (int)&v19, hMachine) )
      goto LABEL_39;
    if ( (unsigned int)v19 <= 2 )
      goto LABEL_39;
    v8 = (int)LocalAlloc(0, 2 * v19);
    v9 = (int *)v8;
    if ( !v8 )
      goto LABEL_39;
    if ( _GetPseudoLocationPath(DeviceInfoData.DevInst, v8, v19, hMachine)
      && _StringEndingsIdentical((int *)(a4 + *(_DWORD *)(a4 + 24)), v9) )
      _MarkAsMatched(v20, &DeviceInstanceId, (int)&v21);
    LocalFree(v9);
    goto LABEL_24;
  }
  return -1;
}

//----- (032F0525) --------------------------------------------------------
DWORD __stdcall DiGetMatchingDevices_BestGuess(HDEVINFO DeviceInfoSet, int a2)
{
  HDEVINFO v2; // edi@7
  int v3; // eax@9
  GUID *v5; // [sp-1Ch] [bp-270h]@4
  DWORD v6; // [sp-10h] [bp-264h]@4
  const WCHAR *MachineName; // [sp+14h] [bp-240h]@3
  const GUID *v8; // [sp+18h] [bp-23Ch]@1
  DWORD v9; // [sp+1Ch] [bp-238h]@1
  int i; // [sp+20h] [bp-234h]@8
  HDEVINFO v11; // [sp+24h] [bp-230h]@6
  int Dst; // [sp+28h] [bp-22Ch]@1
  GUID ClassGuid; // [sp+2Ch] [bp-228h]@3
  void *v14; // [sp+3Ch] [bp-218h]@3
  char v15; // [sp+40h] [bp-214h]@3

  v9 = 0;
  v8 = 0;
  memset(&Dst, 0, 0x226u);
  Dst = 550;
  if ( SetupDiGetDeviceInfoListDetailW(DeviceInfoSet, (PSP_DEVINFO_LIST_DETAIL_DATA_W)&Dst)
    && ((MachineName = (const WCHAR *)(v14 != 0 ? (unsigned int)&v15 : 0), memcmp(&ClassGuid, &GUID_NULL, 0x10u)) ? (v6 = 0, v8 = &ClassGuid, v5 = &ClassGuid) : (v6 = 4, v5 = 0),
        v11 = SetupDiGetClassDevsExW(v5, 0, 0, v6, 0, (PCWSTR)(v14 != 0 ? (unsigned int)&v15 : 0), 0),
        v11 != (HDEVINFO)-1) )
  {
    v2 = SetupDiCreateDeviceInfoListExW(v8, 0, MachineName, 0);
    if ( v2 == (HDEVINFO)-1 )
    {
LABEL_22:
      v9 = GetLastError();
    }
    else
    {
      for ( i = 1; ; ++i )
      {
        v3 = DoPass(i, v11, v2, a2, v14);
        if ( (unsigned int)i >= 2 && v3 == 1 )
        {
          _CopyDeviceInfoSet(v2, (int)DeviceInfoSet);
          goto LABEL_23;
        }
        if ( i == 5 )
          break;
        if ( i == 2 && !v3 )
          goto LABEL_23;
        if ( v3 == -1 || !v3 )
          _CopyDeviceInfoSet(v11, (int)v2);
        SetupDiDestroyDeviceInfoList(v11);
        v11 = v2;
        v2 = SetupDiCreateDeviceInfoListExW(v8, 0, MachineName, 0);
        if ( v2 == (HDEVINFO)-1 )
          goto LABEL_22;
      }
      _CopyDeviceInfoSet(v11, (int)DeviceInfoSet);
    }
LABEL_23:
    if ( v11 != (HDEVINFO)-1 )
      SetupDiDestroyDeviceInfoList(v11);
    if ( v2 != (HDEVINFO)-1 )
      SetupDiDestroyDeviceInfoList(v2);
  }
  else
  {
    v9 = GetLastError();
  }
  return v9;
}

//----- (032F0710) --------------------------------------------------------
BOOL __stdcall DiGetMatchingDevices(HDEVINFO DeviceInfoSet, int a2, int a3, int a4)
{
  unsigned int v4; // edx@14
  unsigned int v5; // ecx@16
  DWORD v6; // eax@23
  BYTE *v7; // edi@32
  void *v8; // eax@48
  const WCHAR *v9; // edi@49
  DWORD PropertyRegDataType; // [sp+Ch] [bp-BF8h]@31
  BYTE v12[4]; // [sp+10h] [bp-BF4h]@43
  HDEVINFO v13; // [sp+14h] [bp-BF0h]@1
  DWORD MemberIndex; // [sp+18h] [bp-BECh]@28
  int v15; // [sp+1Ch] [bp-BE8h]@28
  void *v16; // [sp+20h] [bp-BE4h]@30
  HDEVINFO v17; // [sp+24h] [bp-BE0h]@1
  DWORD dwErrCode; // [sp+28h] [bp-BDCh]@1
  int Dst; // [sp+2Ch] [bp-BD8h]@25
  int v20; // [sp+40h] [bp-BC4h]@27
  char v21; // [sp+44h] [bp-BC0h]@27
  struct _SP_DEVINFO_DATA DeviceInfoData; // [sp+254h] [bp-9B0h]@20
  BYTE PropertyBuffer; // [sp+270h] [bp-994h]@31
  __int16 v24; // [sp+A6Ch] [bp-198h]@32
  __int16 v25; // [sp+A6Eh] [bp-196h]@32
  WCHAR DeviceInstanceId; // [sp+A70h] [bp-194h]@29

  dwErrCode = 0;
  v13 = DeviceInfoSet;
  v17 = (HDEVINFO)-1;
  if ( a4 & 0xFFFFFFFC )
  {
    dwErrCode = 1004;
    goto LABEL_62;
  }
  if ( DeviceInfoSet == (HDEVINFO)-1 )
  {
    dwErrCode = 87;
    goto LABEL_62;
  }
  if ( (unsigned int)a3 < 8 )
  {
    dwErrCode = 1784;
    goto LABEL_62;
  }
  if ( *(_DWORD *)(a2 + 4) != a3 )
    goto LABEL_65;
  *(_WORD *)(a3 + a2 - 2) = 0;
  if ( *(_DWORD *)a2 != 1 && (*(_DWORD *)a2 != 2 || *(_DWORD *)(a2 + 4) < 0x1Cu || !*(_DWORD *)(a2 + 24)) )
    goto LABEL_65;
  if ( *(_DWORD *)(a2 + 4) < 0x18u )
    goto LABEL_65;
  v4 = *(_DWORD *)(a2 + 8);
  if ( !v4 || v4 == -1 )
  {
    dwErrCode = 13;
    goto LABEL_60;
  }
  v5 = *(_DWORD *)(a2 + 16);
  if ( !v5
    || v5 == -1
    || v4 > a3
    || v5 > a3
    || (memset(&DeviceInfoData, 0, sizeof(DeviceInfoData)),
        DeviceInfoData.cbSize = 28,
        SetupDiEnumDeviceInfo(DeviceInfoSet, 0, &DeviceInfoData)) )
  {
LABEL_65:
    dwErrCode = 13;
    goto LABEL_62;
  }
  if ( a4 & 2 && *(_DWORD *)a2 == 2 )
  {
    v6 = DiGetMatchingDevices_BestGuess(v13, a2);
LABEL_24:
    dwErrCode = v6;
    goto LABEL_62;
  }
  memset(&Dst, 0, 0x226u);
  Dst = 550;
  if ( !SetupDiGetDeviceInfoListDetailW(v13, (PSP_DEVINFO_LIST_DETAIL_DATA_W)&Dst)
    || (v17 = SetupDiGetClassDevsExW(0, 0, 0, 4u, 0, (PCWSTR)(v20 != 0 ? (unsigned int)&v21 : 0), 0), v17 == (HDEVINFO)-1) )
  {
    v6 = GetLastError();
    goto LABEL_24;
  }
  MemberIndex = 0;
  v15 = 0;
  memset(&DeviceInfoData, 0, sizeof(DeviceInfoData));
  DeviceInfoData.cbSize = 28;
  if ( SetupDiEnumDeviceInfo(v17, 0, &DeviceInfoData) )
  {
    do
    {
      ++MemberIndex;
      if ( SetupDiGetDeviceInstanceIdW(v17, &DeviceInfoData, &DeviceInstanceId, 0xC8u, 0) )
      {
        v16 = 0;
        while ( 1 )
        {
          if ( SetupDiGetDeviceRegistryPropertyW(
                 v17,
                 &DeviceInfoData,
                 (v16 != 0) + 1,
                 &PropertyRegDataType,
                 &PropertyBuffer,
                 0x800u,
                 0) )
          {
            v25 = 0;
            v24 = 0;
            v7 = &PropertyBuffer;
            while ( *(_WORD *)v7 )
            {
              if ( CompareStringW(0x7Fu, 1u, (PCNZWCH)v7, -1, (PCNZWCH)(a2 + *(_DWORD *)(a2 + 16)), -1) == 2 )
              {
                v15 = 1;
                break;
              }
              v7 += 2 * lstrlenW((LPCWSTR)v7) + 2;
              if ( (unsigned int)v7 >= (unsigned int)&DeviceInstanceId )
                break;
            }
            if ( v15 )
              break;
          }
          v16 = (char *)v16 + 1;
          if ( (signed int)v16 >= 2 )
          {
            if ( !v15 )
              goto LABEL_57;
            break;
          }
        }
        if ( !(a4 & 1) )
          goto LABEL_66;
        if ( !*(_DWORD *)(a2 + 12) )
          goto LABEL_67;
        if ( !SetupDiGetDeviceRegistryPropertyW(v17, &DeviceInfoData, 0xFu, &PropertyRegDataType, v12, 4u, 0) )
          *(_DWORD *)v12 = 0;
        if ( v12[0] & 0x10
          && CompareStringW(0x7Fu, 1u, &DeviceInstanceId, -1, (PCNZWCH)(a2 + *(_DWORD *)(a2 + 8)), -1) == 2 )
        {
LABEL_67:
          if ( *(_DWORD *)(a2 + 20) == -1 )
            goto LABEL_66;
          v8 = _GetDeviceProperty(v17, &DeviceInfoData, 0x23u);
          v16 = v8;
          if ( v8 )
          {
            v9 = (const WCHAR *)v8;
            if ( *(_WORD *)v8 )
            {
              do
              {
                if ( CompareStringW(0x7Fu, 1u, v9, -1, (PCNZWCH)(a2 + *(_DWORD *)(a2 + 20)), -1) == 2 )
                  break;
                v9 += lstrlenW(v9) + 1;
              }
              while ( *v9 );
              v8 = v16;
            }
            if ( !*v9 )
              v15 = 0;
            LocalFree(v8);
            if ( v15 )
LABEL_66:
              SetupDiOpenDeviceInfoW(v13, &DeviceInstanceId, 0, 0, 0);
          }
        }
      }
LABEL_57:
      v15 = 0;
      memset(&DeviceInfoData, 0, sizeof(DeviceInfoData));
      DeviceInfoData.cbSize = 28;
    }
    while ( SetupDiEnumDeviceInfo(v17, MemberIndex, &DeviceInfoData) );
  }
LABEL_60:
  if ( v17 != (HDEVINFO)-1 )
    SetupDiDestroyDeviceInfoList(v17);
LABEL_62:
  SetLastError(dwErrCode);
  return dwErrCode == 0;
}

//----- (032F0B4D) --------------------------------------------------------
void *__stdcall _GetDeviceProperty(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Property)
{
  BYTE *v3; // eax@3
  void *v4; // ebx@3
  DWORD RequiredSize; // [sp+Ch] [bp-4h]@1

  if ( !SetupDiGetDeviceRegistryPropertyW(DeviceInfoSet, DeviceInfoData, Property, 0, 0, 0, &RequiredSize)
    && GetLastError() == 122 )
  {
    v3 = (BYTE *)LocalAlloc(0, RequiredSize);
    v4 = v3;
    if ( v3 )
    {
      if ( SetupDiGetDeviceRegistryPropertyW(DeviceInfoSet, DeviceInfoData, Property, 0, v3, RequiredSize, 0) )
        return v4;
      LocalFree(v4);
    }
  }
  return 0;
}

//----- (032F0BBD) --------------------------------------------------------
int __stdcall _CopyDeviceInfoSet(HDEVINFO DeviceInfoSet, int a2)
{
  int result; // eax@5
  DWORD i; // [sp-8h] [bp-1CCh]@1
  struct _SP_DEVINFO_DATA *v4; // [sp-4h] [bp-1C8h]@1
  DWORD MemberIndex; // [sp+10h] [bp-1B4h]@1
  struct _SP_DEVINFO_DATA DeviceInfoData; // [sp+14h] [bp-1B0h]@1
  WCHAR DeviceInstanceId; // [sp+30h] [bp-194h]@2

  MemberIndex = 0;
  memset(&DeviceInfoData, 0, sizeof(DeviceInfoData));
  v4 = &DeviceInfoData;
  for ( i = 0; ; i = MemberIndex )
  {
    DeviceInfoData.cbSize = 28;
    result = SetupDiEnumDeviceInfo(DeviceInfoSet, i, v4);
    if ( !result )
      break;
    ++MemberIndex;
    if ( SetupDiGetDeviceInstanceIdW(DeviceInfoSet, &DeviceInfoData, &DeviceInstanceId, 0xC8u, 0) )
      SetupDiOpenDeviceInfoW((HDEVINFO)a2, &DeviceInstanceId, 0, 0, 0);
    memset(&DeviceInfoData, 0, sizeof(DeviceInfoData));
    v4 = &DeviceInfoData;
  }
  return result;
}

//----- (032F0C84) --------------------------------------------------------
int __stdcall _MarkAsMatched(HDEVINFO DeviceInfoSet, PCWSTR DeviceInstanceId, int a3)
{
  int result; // eax@1

  result = SetupDiOpenDeviceInfoW(DeviceInfoSet, DeviceInstanceId, 0, 0, 0);
  if ( result )
  {
    result = a3;
    ++*(_DWORD *)result;
  }
  return result;
}

//----- (032F0CAC) --------------------------------------------------------
signed int __stdcall _StringEndingsIdentical(int *a1, int *a2)
{
  int *v2; // edi@1
  int *v3; // esi@1
  signed int result; // eax@2
  int v5; // ebx@8

  v2 = a2;
  v3 = a1;
  if ( *(_WORD *)a1 && *(_WORD *)a2 )
  {
    do
      v3 = (int *)((char *)v3 + 2);
    while ( *(_WORD *)v3 );
    do
      v2 = (int *)((char *)v2 + 2);
    while ( *(_WORD *)v2 );
    if ( v3 != a1 )
    {
      while ( v2 != a2 )
      {
        v5 = tolower(*(_WORD *)v3);
        if ( v5 != tolower(*(_WORD *)v2) )
          return 0;
        v3 = (int *)((char *)v3 - 2);
        v2 = (int *)((char *)v2 - 2);
        if ( v3 == a1 )
          break;
      }
    }
    result = 1;
  }
  else
  {
    result = 0;
  }
  return result;
}

//----- (032F0D19) --------------------------------------------------------
int __stdcall _GetPseudoLocationPath_Internal(DEVINST dnDevInst, int a2, int a3, int a4, HMACHINE hMachine)
{
  int v5; // esi@1
  signed int v7; // edi@6
  CONFIGRET v8; // eax@6
  int v9; // eax@7
  int v10; // eax@8
  int v11; // eax@9
  WCHAR *v12; // eax@18
  WCHAR v13; // cx@21
  int v14; // ebx@39
  HRESULT v15; // eax@46
  signed __int16 v16; // [sp-4h] [bp-1C4h]@43
  DEVNODE v17; // [sp+Ch] [bp-1B4h]@5
  HMACHINE v18; // [sp+10h] [bp-1B0h]@1
  int v19; // [sp+14h] [bp-1ACh]@28
  ULONG pulLength; // [sp+18h] [bp-1A8h]@1
  int v21; // [sp+1Ch] [bp-1A4h]@16
  DEVNODE pdnDevInst; // [sp+20h] [bp-1A0h]@3
  int v23; // [sp+24h] [bp-19Ch]@1
  unsigned int v24; // [sp+28h] [bp-198h]@1
  WCHAR Buffer; // [sp+2Ch] [bp-194h]@6
  __int16 v26; // [sp+1BAh] [bp-6h]@16

  v24 = 0;
  v5 = a2;
  v23 = a4;
  v18 = hMachine;
  pulLength = 4;
  if ( a2 )
    *(_WORD *)a2 = 0;
  if ( CM_Get_Parent_Ex(&pdnDevInst, dnDevInst, 0, hMachine) || CM_Get_Parent_Ex(&v17, pdnDevInst, 0, hMachine) )
    return 1;
  v7 = 0;
  v8 = CM_Get_Device_ID_ExW(dnDevInst, &Buffer, 0xC8u, 0, hMachine);
  if ( v8 )
  {
    v9 = v8 - 2;
    if ( v9 )
    {
      v10 = v9 - 1;
      if ( v10 && (v11 = v10 - 2) != 0 )
      {
        if ( v11 == 8 )
          SetLastError(0x37u);
        else
          SetLastError(1u);
      }
      else
      {
        SetLastError(6u);
      }
    }
    else
    {
      SetLastError(8u);
    }
    return 0;
  }
  v26 = 0;
  if ( CM_Get_DevNode_Registry_Property_ExW(dnDevInst, 0x10u, 0, &v21, &pulLength, 0, hMachine) )
    v21 = 0;
  v12 = &Buffer;
  if ( Buffer )
  {
    do
      ++v12;
    while ( *v12 );
  }
  if ( v12 > &Buffer )
  {
    v13 = *v12;
    while ( 1 )
    {
      if ( v13 == 38 )
        ++v24;
      --v12;
      v13 = *v12;
      ++v7;
      if ( *v12 == 92 )
        break;
      if ( v12 <= &Buffer )
        goto LABEL_28;
    }
    ++v12;
    --v7;
  }
LABEL_28:
  v19 = v21 & 0x10;
  if ( !(v21 & 0x10) )
  {
    if ( v24 <= 2 )
    {
      if ( v24 == 2 )
        v7 = 6;
    }
    else
    {
      v24 = 3;
      while ( *v12 && v24 )
      {
        if ( *v12 == 38 )
          --v24;
        ++v12;
        --v7;
      }
    }
  }
  v14 = a3;
  if ( a2 )
  {
    if ( a3 <= (unsigned int)(v7 + 1) )
    {
      SetLastError(0x7Au);
      return 0;
    }
    if ( v19 )
    {
      v24 = 0;
      v16 = 35;
    }
    else
    {
      v16 = 92;
    }
    *(_WORD *)a2 = v16;
    v5 = a2 + 2;
    v14 = a3 - 1;
    *(_WORD *)(a2 + 2) = 0;
    if ( v24 == 2 )
      v15 = StringCchCopyW((STRSAFE_LPWSTR)v5, v14, L"<NULL>");
    else
      v15 = StringCchCopyW((STRSAFE_LPWSTR)v5, v14, v12);
    if ( v15 >= 0 )
    {
      v14 -= v7;
      v5 += 2 * v7;
    }
  }
  else
  {
    *(_DWORD *)v23 += v7 + 1;
  }
  return _GetPseudoLocationPath_Internal(pdnDevInst, v5, v14, v23, v18);
}
// 32E18DC: using guessed type wchar_t aNull_0[7];

//----- (032F0F38) --------------------------------------------------------
int __stdcall _GetPseudoLocationPath(DEVINST dnDevInst, int a2, int a3, HMACHINE hMachine)
{
  int result; // eax@3

  if ( a2 && a3 )
  {
    result = _GetPseudoLocationPath_Internal(dnDevInst, a2, a3, 0, hMachine);
  }
  else
  {
    SetLastError(0x57u);
    result = 0;
  }
  return result;
}

//----- (032F0F70) --------------------------------------------------------
int __stdcall _GetPseudoLocationPathLength(DEVINST dnDevInst, int a2, HMACHINE hMachine)
{
  int result; // eax@2

  if ( a2 )
  {
    *(_DWORD *)a2 = 1;
    result = _GetPseudoLocationPath_Internal(dnDevInst, 0, 0, a2, hMachine);
  }
  else
  {
    SetLastError(0x57u);
    result = 0;
  }
  return result;
}

//----- (032F101C) --------------------------------------------------------
signed int __stdcall _CRT_INIT(int a1, int a2, int a3)
{
  LONG v4; // ebx@6
  LONG v5; // eax@9
  void *v6; // ebx@26
  int i; // edi@27
  signed int v8; // [sp+18h] [bp+Ch]@6

  if ( !a2 )
  {
    if ( dword_32F306C > 0 )
    {
      --dword_32F306C;
      while ( InterlockedCompareExchange(&__native_startup_lock, 1, 0) )
        Sleep(0x3E8u);
      if ( __native_startup_state == 2 )
      {
        v6 = __onexitbegin;
        if ( __onexitbegin )
        {
          for ( i = __onexitend - 4; i >= (unsigned int)v6; i -= 4 )
          {
            if ( *(_DWORD *)i )
              (*(void (**)(void))i)();
          }
          _free(v6);
          __onexitend = 0;
          __onexitbegin = 0;
        }
        __native_startup_state = 0;
        InterlockedExchange(&__native_startup_lock, 0);
      }
      else
      {
        _amsg_exit(31);
      }
      return 1;
    }
    return 0;
  }
  if ( a2 == 1 )
  {
    v4 = (LONG)NtCurrentTeb()->Reserved1[1];
    v8 = 0;
    while ( 1 )
    {
      v5 = InterlockedCompareExchange(&__native_startup_lock, v4, 0);
      if ( !v5 )
        break;
      if ( v5 == v4 )
      {
        v8 = 1;
        break;
      }
      Sleep(0x3E8u);
    }
    if ( __native_startup_state )
    {
      _amsg_exit(31);
    }
    else
    {
      __native_startup_state = 1;
      if ( _initterm_e(&__xi_a, __xi_z) )
        return 0;
      _initterm(&__xc_a);
      __native_startup_state = 2;
    }
    if ( !v8 )
      InterlockedExchange(&__native_startup_lock, 0);
    if ( __dyn_tls_init_callback && _IsNonwritableInCurrentImage((int)&__dyn_tls_init_callback) )
      __dyn_tls_init_callback(a1, 2, a3);
    ++dword_32F306C;
  }
  return 1;
}
// 32E11B0: using guessed type int __xc_a;
// 32E11B8: using guessed type int __xi_a;
// 32E11C0: using guessed type int __xi_z[4];
// 32F0FCC: using guessed type _DWORD __cdecl _initterm_e(_DWORD, _DWORD);
// 32F156A: using guessed type int __cdecl _initterm(_DWORD);
// 32F1576: using guessed type int __cdecl _amsg_exit(_DWORD);
// 32F306C: using guessed type int dword_32F306C;
// 32F33C8: using guessed type int __native_startup_state;
// 32F33D0: using guessed type int __onexitend;
// 32F33DC: using guessed type int (__stdcall *__dyn_tls_init_callback)(_DWORD, _DWORD, _DWORD);

//----- (032F11A8) --------------------------------------------------------
int __stdcall sub_32F11A8(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
  DWORD v3; // ecx@1
  signed int v5; // [sp+30h] [bp-1Ch]@1

  v3 = fdwReason;
  v5 = 1;
  __native_dllmain_reason = fdwReason;
  if ( !fdwReason && !dword_32F306C )
  {
    v5 = 0;
    goto LABEL_20;
  }
  if ( fdwReason != 1 && fdwReason != 2 )
    goto LABEL_11;
  if ( _pRawDllMain )
  {
    dword_32F3070 = 1;
    v5 = _pRawDllMain(hinstDLL, fdwReason, lpvReserved);
  }
  if ( v5 )
  {
    v5 = _CRT_INIT((int)hinstDLL, fdwReason, (int)lpvReserved);
    if ( v5 )
    {
      v3 = fdwReason;
LABEL_11:
      v5 = DllMain(hinstDLL, v3, lpvReserved);
      if ( fdwReason == 1 && !v5 )
      {
        DllMain(hinstDLL, 0, 0);
        _CRT_INIT((int)hinstDLL, 0, 0);
        if ( _pRawDllMain )
          _pRawDllMain(hinstDLL, 0, 0);
      }
      if ( !fdwReason || fdwReason == 3 )
      {
        v5 = _CRT_INIT((int)hinstDLL, fdwReason, (int)lpvReserved);
        if ( _pRawDllMain && dword_32F3070 )
          v5 = _pRawDllMain(hinstDLL, fdwReason, lpvReserved);
      }
      goto LABEL_20;
    }
  }
LABEL_20:
  __native_dllmain_reason = -1;
  return v5;
}
// 32F300C: using guessed type int __native_dllmain_reason;
// 32F306C: using guessed type int dword_32F306C;
// 32F3070: using guessed type int dword_32F3070;
// 32F33D8: using guessed type int (__stdcall *_pRawDllMain)(_DWORD, _DWORD, _DWORD);

//----- (032F14F9) --------------------------------------------------------
int __cdecl _IsNonwritableInCurrentImage(int a1)
{
  int v1; // eax@2
  int result; // eax@3

  if ( _ValidateImageBase(53346304) && (v1 = _FindPESection(53346304, a1 - 53346304)) != 0 )
    result = ~(unsigned __int8)(*(_DWORD *)(v1 + 36) >> 31) & 1;
  else
    result = 0;
  return result;
}
// 32F1470: using guessed type _DWORD __cdecl _ValidateImageBase(_DWORD);
// 32F14B0: using guessed type _DWORD __cdecl _FindPESection(_DWORD, _DWORD);

//----- (032F160C) --------------------------------------------------------
void __cdecl __security_init_cookie()
{
  DWORD v0; // esi@4
  DWORD v1; // esi@4
  DWORD v2; // esi@4
  DWORD v3; // esi@4
  DWORD v4; // esi@4
  LARGE_INTEGER PerformanceCount; // [sp+8h] [bp-10h]@4
  struct _FILETIME SystemTimeAsFileTime; // [sp+10h] [bp-8h]@1

  SystemTimeAsFileTime.dwLowDateTime = 0;
  SystemTimeAsFileTime.dwHighDateTime = 0;
  if ( __security_cookie != -1153374642 && __security_cookie & 0xFFFF0000 )
  {
    __security_cookie_complement = ~__security_cookie;
  }
  else
  {
    GetSystemTimeAsFileTime(&SystemTimeAsFileTime);
    v0 = SystemTimeAsFileTime.dwLowDateTime ^ SystemTimeAsFileTime.dwHighDateTime;
    v1 = GetCurrentProcessId() ^ v0;
    v2 = GetCurrentThreadId() ^ v1;
    v3 = GetTickCount() ^ v2;
    QueryPerformanceCounter(&PerformanceCount);
    v4 = PerformanceCount.LowPart ^ PerformanceCount.HighPart ^ v3;
    if ( v4 == -1153374642 || !(__security_cookie & 0xFFFF0000) )
      v4 = -1153374641;
    __security_cookie = v4;
    __security_cookie_complement = ~v4;
  }
}
// 32F3008: using guessed type int __security_cookie_complement;

//----- (032F17FB) --------------------------------------------------------
int __stdcall NdisHandlePnPEvent(int a1, int a2, int a3, int a4, int a5, void *Src, size_t Size)
{
  signed int v7; // edi@3
  int v8; // ecx@14
  int v9; // eax@15
  int v10; // eax@17
  int v11; // esi@21
  int v12; // ecx@22
  int v13; // eax@24
  int v14; // ecx@26
  int v15; // esi@29
  int v16; // ecx@30
  int v17; // eax@32
  int v18; // ecx@34
  int v19; // eax@37
  int v20; // edx@37
  SIZE_T v21; // eax@37
  HLOCAL v22; // ebx@40
  HANDLE v23; // esi@43
  char v25; // [sp+Ch] [bp-34h]@41
  int v26; // [sp+14h] [bp-2Ch]@37
  int v27; // [sp+20h] [bp-20h]@14
  int v28; // [sp+28h] [bp-18h]@21
  int v29; // [sp+30h] [bp-10h]@29
  DWORD BytesReturned; // [sp+34h] [bp-Ch]@44
  DWORD nInBufferSize; // [sp+38h] [bp-8h]@37
  int v32; // [sp+3Ch] [bp-4h]@1

  v32 = 0;
  if ( a1 != 1 && a1 != 2 )
    goto LABEL_51;
  v7 = 8;
  if ( a2 != 1
    && a2 != 2
    && a2 != 3
    && a2 != 5
    && a2 != 6
    && a2 != 7
    && a2 != 8
    && a2 != 9
    && a2 != 10
    && a2 != 11
    && a2 != 14 )
    goto LABEL_51;
  v8 = a3;
  v27 = 40;
  v9 = a3 ? *(_WORD *)a3 : 0;
  v10 = v9 + 42;
  if ( (unsigned int)v10 < 0x28 )
    goto LABEL_51;
  if ( a3 )
    v8 = *(_WORD *)a3;
  if ( v10 < (unsigned int)(v8 + 2)
    || ((v28 = v10, v11 = v10, a4) ? (v12 = *(_WORD *)a4) : (v12 = 0),
        (v13 = v10 + v12 + 2, v13 < (unsigned int)v11)
     || (a4 ? (v14 = *(_WORD *)a4) : (v14 = 0),
         v13 < (unsigned int)(v14 + 2)
      || ((v29 = v13, v15 = v13, a5) ? (v16 = *(_WORD *)a5) : (v16 = 0),
          (v17 = v13 + v16 + 2, v17 < (unsigned int)v15)
       || (a5 ? (v18 = *(_WORD *)a5) : (v18 = 0),
           v17 < (unsigned int)(v18 + 2)
        || (v19 = (-v17 & 3) + v17, v20 = v19, v26 = v19, v21 = v19 + Size + 1, nInBufferSize = v21, v21 < v20)
        || v21 < Size
        || v21 < 1)))) )
  {
LABEL_51:
    v7 = 87;
  }
  else
  {
    v22 = LocalAlloc(0x40u, v21);
    if ( v22 )
    {
      qmemcpy(v22, &v25, 0x28u);
      *(_DWORD *)v22 = a1;
      *((_DWORD *)v22 + 1) = a2;
      NdispUnicodeStringToVar(v22, a3, (char *)v22 + 16);
      NdispUnicodeStringToVar(v22, a4, (char *)v22 + 24);
      NdispUnicodeStringToVar(v22, a5, (char *)v22 + 32);
      *((_DWORD *)v22 + 3) = Size;
      if ( Size )
        memcpy((char *)v22 + *((_DWORD *)v22 + 2), Src, Size);
      *((_BYTE *)v22 + *((_DWORD *)v22 + 2) + Size) = 0;
      v23 = CreateFileW(L"\\\\.\\NDIS", 0xC0000000, 0, 0, 3u, 0, 0);
      if ( v23 == (HANDLE)-1 )
      {
        v7 = GetLastError();
      }
      else
      {
        v32 = DeviceIoControl(v23, 0x170008u, v22, nInBufferSize, 0, 0, &BytesReturned, 0);
        v7 = GetLastError();
        CloseHandle(v23);
      }
      LocalFree(v22);
    }
  }
  SetLastError(v7);
  return v32;
}
// 32F17A1: using guessed type _DWORD __stdcall NdispUnicodeStringToVar(_DWORD, _DWORD, _DWORD);

// ALL OK, 89 function(s) have been successfully decompiled
